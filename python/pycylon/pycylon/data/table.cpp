/* Generated by Cython 0.29.37 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "GLOO_USE_MPI",
                "0"
            ],
            [
                "BUILD_CYLON_GLOO",
                "0"
            ],
            [
                "BUILD_CYLON_UCX",
                "0"
            ],
            [
                "BUILD_CYLON_UCC",
                "0"
            ],
            [
                "BUILD_CYLON_REDIS",
                "0"
            ]
        ],
        "depends": [
            "../../cpp/src/cylon/code.hpp",
            "../../cpp/src/cylon/column.hpp",
            "../../cpp/src/cylon/compute/aggregate_kernels.hpp",
            "../../cpp/src/cylon/compute/aggregates.hpp",
            "../../cpp/src/cylon/ctx/cylon_context.hpp",
            "../../cpp/src/cylon/data_types.hpp",
            "../../cpp/src/cylon/groupby/groupby.hpp",
            "../../cpp/src/cylon/indexing/index.hpp",
            "../../cpp/src/cylon/indexing/indexer.hpp",
            "../../cpp/src/cylon/io/csv_read_config.hpp",
            "../../cpp/src/cylon/io/csv_write_config.hpp",
            "../../cpp/src/cylon/join/join_config.hpp",
            "../../cpp/src/cylon/mapreduce/mapreduce.hpp",
            "../../cpp/src/cylon/net/comm_config.hpp",
            "../../cpp/src/cylon/net/comm_operations.hpp",
            "../../cpp/src/cylon/net/comm_type.hpp",
            "../../cpp/src/cylon/net/communicator.hpp",
            "../../cpp/src/cylon/net/gloo/gloo_communicator.hpp",
            "../../cpp/src/cylon/net/mpi/mpi_communicator.hpp",
            "../../cpp/src/cylon/net/ucx/oob_type.hpp",
            "../../cpp/src/cylon/net/ucx/ucc_oob_context.hpp",
            "../../cpp/src/cylon/net/ucx/ucx_communicator.hpp",
            "../../cpp/src/cylon/scalar.hpp",
            "../../cpp/src/cylon/status.hpp",
            "../../cpp/src/cylon/table.hpp",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/api.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/array/concatenate.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/builder.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/c/abi.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/c/bridge.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/compute/api.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/compute/exec/aggregate.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/compute/exec/exec_plan.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/compute/exec/expression.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/compute/exec/options.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/config.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/csv/api.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/extension_type.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/io/api.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/ipc/api.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/json/options.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/json/reader.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/api.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/benchmark.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/common.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/csv.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/extension_type.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/gdb.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/inference.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/init.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/ipc.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/platform.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/pyarrow.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/python/udf.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/result.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/byte_size.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/cancel.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/compression.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/decimal.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/future.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/io_util.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/iterator.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/key_value_metadata.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/optional.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/thread_pool.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/include/arrow/util/value_parsing.h",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib/python3.9/site-packages/numpy/core/include/numpy/halffloat.h"
        ],
        "extra_compile_args": [
            "-std=c++14",
            "-DARROW_METADATA_V4 -DNEED_EXCLUSIVE_SCAN",
            "-DOMPI_SKIP_MPICXX=1"
        ],
        "extra_link_args": [
            "-Wl,-rpath,/u/erg3kp/.conda/envs/gcylon_dev/lib"
        ],
        "include_dirs": [
            "./pycylon/data",
            "./pycylon/io",
            "./pycylon/ctx",
            "./pycylon/net",
            "./pycylon/common",
            "./pycylon/indexing",
            "pycylon/data",
            "pycylon/ctx",
            "pycylon/common",
            "/u/erg3kp/.conda/envs/gcylon_dev/include",
            "/u/erg3kp/.conda/envs/gcylon_dev/glog/install/include",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib/python3.9/site-packages/pyarrow/include",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib/python3.9/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "libraries": [
            "arrow",
            "cylon",
            "glog",
            "mpi"
        ],
        "library_dirs": [
            "/u/erg3kp/.conda/envs/gcylon_dev/lib",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib/Debug",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib/Release",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib",
            "/u/erg3kp/.conda/envs/gcylon_dev/glog/install/lib",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib/python3.9/site-packages",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib",
            "/u/erg3kp/anaconda3/envs/cylon_dev/lib",
            "",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib",
            "/u/erg3kp/.conda/envs/gcylon_dev/lib"
        ],
        "name": "pycylon.data.table",
        "sources": [
            "pycylon/data/table.pyx"
        ]
    },
    "module_name": "pycylon.data.table"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_37"
#define CYTHON_HEX_VERSION 0x001D25F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pycylon__data__table
#define __PYX_HAVE_API__pycylon__data__table
/* Early includes */
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "../../../../cpp/src/cylon/code.hpp"
#include "../../../../cpp/src/cylon/status.hpp"
#include <vector>
#include "../../../../cpp/src/cylon/join/join_config.hpp"
#include "../../../../cpp/src/cylon/io/csv_write_config.hpp"
#include <stdio.h>
#include "pythread.h"
#include <memory>
#include <stdint.h>
#include <functional>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#include "datetime.h"

    #include <type_traits>
    #include <utility>
    namespace cymove {
    template <typename T>
    inline typename std::remove_reference<T>::type&& cymove(T& t) {
        return std::move(t);
    }
    template <typename T>
    inline typename std::remove_reference<T>::type&& cymove(T&& t) {
        return std::move(t);
    }
    }  // namespace cymove
    

    #include <memory>
    #include <utility>

    namespace arrow {
    namespace py {
    template <typename T>
    std::shared_ptr<T> to_shared(std::unique_ptr<T>& t) {
        return std::move(t);
    }
    template <typename T>
    std::shared_ptr<T> to_shared(std::unique_ptr<T>&& t) {
        return std::move(t);
    }
    }  // namespace py
    }  // namespace arrow
    
#include "arrow/python/platform.h"
#include <Python.h>
#include "numpy/halffloat.h"
#include "arrow/api.h"
#include "arrow/result.h"
#include "arrow/python/common.h"
#include "arrow/util/key_value_metadata.h"
#include "arrow/util/decimal.h"
#include "arrow/util/optional.h"
#include "arrow/config.h"
#include "arrow/util/future.h"
#include "arrow/builder.h"
#include "arrow/util/cancel.h"
#include "arrow/io/api.h"
#include "arrow/ipc/api.h"
#include "arrow/util/value_parsing.h"
#include "arrow/csv/api.h"
#include "arrow/json/options.h"
#include "arrow/json/reader.h"
#include "arrow/util/thread_pool.h"
#include "arrow/compute/api.h"

    #include "arrow/compute/function.h"
    namespace arrow {
    namespace compute {
    namespace internal {
    Result<std::unique_ptr<FunctionOptions>> DeserializeFunctionOptions(
        const Buffer& buffer);
    } //  namespace internal
    } //  namespace compute
    } //  namespace arrow
    
#include "arrow/compute/exec/aggregate.h"

    #include <unordered_map>

    #include "arrow/type.h"
    #include "arrow/datum.h"

    namespace arrow {
    namespace compute {
    struct KnownFieldValues {
      std::unordered_map<FieldRef, Datum, FieldRef::Hash> map;
    };
    } //  namespace compute
    } //  namespace arrow
    
#include "arrow/compute/exec/expression.h"
#include "arrow/compute/exec/options.h"
#include "arrow/compute/exec/exec_plan.h"
#include "arrow/extension_type.h"
#include "arrow/util/compression.h"
#include "arrow/util/io_util.h"
#include "arrow/util/iterator.h"
#include "arrow/array/concatenate.h"
#include "arrow/c/abi.h"
#include "arrow/c/bridge.h"
#include "arrow/util/byte_size.h"
#include "arrow/python/udf.h"
#include "arrow/python/csv.h"
#include "arrow/python/api.h"
#include "arrow/python/init.h"
#include "arrow/python/pyarrow.h"
#include "arrow/python/inference.h"
#include "arrow/python/ipc.h"
#include "arrow/python/extension_type.h"
#include "arrow/python/benchmark.h"
#include "arrow/python/gdb.h"
#include "../../../../cpp/src/cylon/net/comm_type.hpp"
#include "../../../../cpp/src/cylon/net/comm_config.hpp"
#include "mpi.h"
#include "../../../../cpp/src/cylon/net/mpi/mpi_communicator.hpp"
#include "../../../../cpp/src/cylon/net/comm_operations.hpp"
#include "../../../../cpp/src/cylon/data_types.hpp"
#include "../../../../cpp/src/cylon/scalar.hpp"
#include "../../../../cpp/src/cylon/net/communicator.hpp"
#include "../../../../cpp/src/cylon/ctx/cylon_context.hpp"
#include "../../../../cpp/src/cylon/indexing/index.hpp"
#include "../../../../cpp/src/cylon/indexing/indexer.hpp"
#include "../../../../cpp/src/cylon/table.hpp"
#include "../../../../cpp/src/cylon/column.hpp"
#include "../../../../cpp/src/cylon/io/csv_read_config.hpp"
#include "../../../../cpp/src/cylon/compute/aggregate_kernels.hpp"
#include "../../../../cpp/src/cylon/compute/aggregates.hpp"
#include "../../../../cpp/src/cylon/groupby/groupby.hpp"
#include "../../../../cpp/src/cylon/mapreduce/mapreduce.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pycylon/data/table.pyx",
  "stringsource",
  "datetime.pxd",
  "pycylon/common/status.pxd",
  "pycylon/common/join_config.pxd",
  "pycylon/io/csv_write_config.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "lib.pxd",
  "pycylon/net/comm_config.pxd",
  "pycylon/net/mpi_config.pxd",
  "pycylon/data/data_type.pxd",
  "pycylon/data/scalar.pxd",
  "pycylon/net/communicator.pxd",
  "pycylon/ctx/context.pxd",
  "pycylon/indexing/cyindex.pxd",
  "pycylon/data/column.pxd",
  "pycylon/net/mpi_communicator.pxd",
  "pycylon/io/csv_read_config.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7pycylon_6common_6status_Status;
struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig;
struct __pyx_obj_7pycylon_2io_16csv_write_config_CSVWriteOptions;
struct __pyx_obj_7pyarrow_3lib__Weakrefable;
struct __pyx_obj_7pyarrow_3lib_IpcWriteOptions;
struct __pyx_obj_7pyarrow_3lib_IpcReadOptions;
struct __pyx_obj_7pyarrow_3lib_Message;
struct __pyx_obj_7pyarrow_3lib_MemoryPool;
struct __pyx_obj_7pyarrow_3lib_DataType;
struct __pyx_obj_7pyarrow_3lib_ListType;
struct __pyx_obj_7pyarrow_3lib_LargeListType;
struct __pyx_obj_7pyarrow_3lib_MapType;
struct __pyx_obj_7pyarrow_3lib_FixedSizeListType;
struct __pyx_obj_7pyarrow_3lib_StructType;
struct __pyx_obj_7pyarrow_3lib_DictionaryMemo;
struct __pyx_obj_7pyarrow_3lib_DictionaryType;
struct __pyx_obj_7pyarrow_3lib_TimestampType;
struct __pyx_obj_7pyarrow_3lib_Time32Type;
struct __pyx_obj_7pyarrow_3lib_Time64Type;
struct __pyx_obj_7pyarrow_3lib_DurationType;
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType;
struct __pyx_obj_7pyarrow_3lib_Decimal128Type;
struct __pyx_obj_7pyarrow_3lib_Decimal256Type;
struct __pyx_obj_7pyarrow_3lib_BaseExtensionType;
struct __pyx_obj_7pyarrow_3lib_ExtensionType;
struct __pyx_obj_7pyarrow_3lib_PyExtensionType;
struct __pyx_obj_7pyarrow_3lib__Metadata;
struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata;
struct __pyx_obj_7pyarrow_3lib_Field;
struct __pyx_obj_7pyarrow_3lib_Schema;
struct __pyx_obj_7pyarrow_3lib_Scalar;
struct __pyx_obj_7pyarrow_3lib__PandasConvertible;
struct __pyx_obj_7pyarrow_3lib_Array;
struct __pyx_obj_7pyarrow_3lib_Tensor;
struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix;
struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix;
struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor;
struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor;
struct __pyx_obj_7pyarrow_3lib_NullArray;
struct __pyx_obj_7pyarrow_3lib_BooleanArray;
struct __pyx_obj_7pyarrow_3lib_NumericArray;
struct __pyx_obj_7pyarrow_3lib_IntegerArray;
struct __pyx_obj_7pyarrow_3lib_FloatingPointArray;
struct __pyx_obj_7pyarrow_3lib_Int8Array;
struct __pyx_obj_7pyarrow_3lib_UInt8Array;
struct __pyx_obj_7pyarrow_3lib_Int16Array;
struct __pyx_obj_7pyarrow_3lib_UInt16Array;
struct __pyx_obj_7pyarrow_3lib_Int32Array;
struct __pyx_obj_7pyarrow_3lib_UInt32Array;
struct __pyx_obj_7pyarrow_3lib_Int64Array;
struct __pyx_obj_7pyarrow_3lib_UInt64Array;
struct __pyx_obj_7pyarrow_3lib_HalfFloatArray;
struct __pyx_obj_7pyarrow_3lib_FloatArray;
struct __pyx_obj_7pyarrow_3lib_DoubleArray;
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray;
struct __pyx_obj_7pyarrow_3lib_Decimal128Array;
struct __pyx_obj_7pyarrow_3lib_Decimal256Array;
struct __pyx_obj_7pyarrow_3lib_StructArray;
struct __pyx_obj_7pyarrow_3lib_BaseListArray;
struct __pyx_obj_7pyarrow_3lib_ListArray;
struct __pyx_obj_7pyarrow_3lib_LargeListArray;
struct __pyx_obj_7pyarrow_3lib_MapArray;
struct __pyx_obj_7pyarrow_3lib_FixedSizeListArray;
struct __pyx_obj_7pyarrow_3lib_UnionArray;
struct __pyx_obj_7pyarrow_3lib_StringArray;
struct __pyx_obj_7pyarrow_3lib_BinaryArray;
struct __pyx_obj_7pyarrow_3lib_DictionaryArray;
struct __pyx_obj_7pyarrow_3lib_ExtensionArray;
struct __pyx_obj_7pyarrow_3lib_MonthDayNanoIntervalArray;
struct __pyx_obj_7pyarrow_3lib_ChunkedArray;
struct __pyx_obj_7pyarrow_3lib_Table;
struct __pyx_obj_7pyarrow_3lib_RecordBatch;
struct __pyx_obj_7pyarrow_3lib_Buffer;
struct __pyx_obj_7pyarrow_3lib_ResizableBuffer;
struct __pyx_obj_7pyarrow_3lib_NativeFile;
struct __pyx_obj_7pyarrow_3lib_BufferedInputStream;
struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream;
struct __pyx_obj_7pyarrow_3lib_CompressedInputStream;
struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream;
struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter;
struct __pyx_obj_7pyarrow_3lib_RecordBatchReader;
struct __pyx_obj_7pyarrow_3lib_Codec;
struct __pyx_obj_7pyarrow_3lib_StopToken;
struct __pyx_obj_7pycylon_3net_11comm_config_CommConfig;
struct __pyx_obj_7pycylon_3net_10mpi_config_MPIConfig;
struct __pyx_obj_7pycylon_4data_9data_type_DataType;
struct __pyx_obj_7pycylon_4data_6scalar_Scalar;
struct __pyx_obj_7pycylon_3net_12communicator_Communicator;
struct __pyx_obj_7pycylon_3ctx_7context_CylonContext;
struct __pyx_obj_7pycylon_8indexing_7cyindex_BaseArrowIndex;
struct __pyx_obj_7pycylon_8indexing_7cyindex_ArrowLocIndexer;
struct __pyx_obj_7pycylon_8indexing_7cyindex_ArrowILocIndexer;
struct __pyx_obj_7pycylon_4data_6column_Column;
struct __pyx_obj_7pycylon_3net_16mpi_communicator_MPICommunicator;
struct __pyx_obj_7pycylon_2io_15csv_read_config_CSVReadOptions;
struct __pyx_obj_7pycylon_4data_5table_SortOptions;
struct __pyx_obj_7pycylon_4data_5table_Table;
struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows;

/* "pyarrow/includes/libarrow.pxd":1208
 * 
 * # Use typedef to emulate syntax for std::function<void(..)>
 * ctypedef void CallbackTransform(object, const shared_ptr[CBuffer]& src,             # <<<<<<<<<<<<<<
 *                                 shared_ptr[CBuffer]* dest)
 * 
 */
typedef void __pyx_t_7pyarrow_8includes_8libarrow_CallbackTransform(PyObject *, std::shared_ptr< arrow::Buffer>  const &, std::shared_ptr< arrow::Buffer>  *);

/* "pyarrow/includes/libarrow.pxd":2730
 *     int64_t TotalBufferSize(const CTable& table)
 * 
 * ctypedef PyObject* CallbackUdf(object user_function, const CScalarUdfContext& context, object inputs)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "arrow/python/udf.h" namespace "arrow::py":
 */
typedef PyObject *__pyx_t_7pyarrow_8includes_8libarrow_CallbackUdf(PyObject *,  arrow::py::ScalarUdfContext const &, PyObject *);

/* "pyarrow/includes/libarrow_python.pxd":24
 * 
 * 
 * ctypedef CInvalidRowResult PyInvalidRowCallback(object,             # <<<<<<<<<<<<<<
 *                                                 const CCSVInvalidRow&)
 * 
 */
typedef  arrow::csv::InvalidRowResult __pyx_t_7pyarrow_8includes_15libarrow_python_PyInvalidRowCallback(PyObject *,  arrow::csv::InvalidRow const &);
struct __pyx_opt_args_7pyarrow_3lib_ensure_type;

/* "pyarrow/lib.pxd":540
 * 
 * # Default is allow_none=False
 * cpdef DataType ensure_type(object type, bint allow_none=*)             # <<<<<<<<<<<<<<
 * 
 * cdef timeunit_to_string(TimeUnit unit)
 */
struct __pyx_opt_args_7pyarrow_3lib_ensure_type {
  int __pyx_n;
  int allow_none;
};

/* "pycylon/data/table.pyx":78
 * '''
 * 
 * ctypedef enum options:             # <<<<<<<<<<<<<<
 *     SLICE,
 *     HEAD,
 */
enum __pyx_t_7pycylon_4data_5table_options {
  __pyx_e_7pycylon_4data_5table_SLICE,
  __pyx_e_7pycylon_4data_5table_HEAD,
  __pyx_e_7pycylon_4data_5table_TAIL,
  __pyx_e_7pycylon_4data_5table_DISTRIBUTED_SLICE,
  __pyx_e_7pycylon_4data_5table_DISTRIBUTED_HEAD,
  __pyx_e_7pycylon_4data_5table_DISTRIBUTED_TAIL
};
typedef enum __pyx_t_7pycylon_4data_5table_options __pyx_t_7pycylon_4data_5table_options;

/* "pycylon/common/status.pxd":34
 *         const string & get_msg()
 * 
 * cdef class Status:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CStatus *thisptr
 */
struct __pyx_obj_7pycylon_6common_6status_Status {
  PyObject_HEAD
  cylon::Status *thisptr;
};


/* "pycylon/common/join_config.pxd":49
 *         const string GetRightTableSuffix()
 * 
 * cdef class JoinConfig:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CJoinConfig *jcPtr
 */
struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pycylon_6common_11join_config_JoinConfig *__pyx_vtab;
  cylon::join::config::JoinConfig *jcPtr;
  enum cylon::join::config::JoinType jtPtr;
  enum cylon::join::config::JoinAlgorithm jaPtr;
};


/* "pycylon/io/csv_write_config.pxd":36
 *         bool IsOverrideColumnNames() const
 * 
 * cdef class CSVWriteOptions:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CCSVWriteOptions *thisPtr
 */
struct __pyx_obj_7pycylon_2io_16csv_write_config_CSVWriteOptions {
  PyObject_HEAD
  cylon::io::config::CSVWriteOptions *thisPtr;
};


/* "pyarrow/lib.pxd":36
 * 
 * 
 * cdef class _Weakrefable:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 * 
 */
struct __pyx_obj_7pyarrow_3lib__Weakrefable {
  PyObject_HEAD
  PyObject *__weakref__;
};


/* "pyarrow/lib.pxd":40
 * 
 * 
 * cdef class IpcWriteOptions(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CIpcWriteOptions c_options
 */
struct __pyx_obj_7pyarrow_3lib_IpcWriteOptions {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
   arrow::ipc::IpcWriteOptions c_options;
};


/* "pyarrow/lib.pxd":44
 *         CIpcWriteOptions c_options
 * 
 * cdef class IpcReadOptions(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CIpcReadOptions c_options
 */
struct __pyx_obj_7pyarrow_3lib_IpcReadOptions {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
   arrow::ipc::IpcReadOptions c_options;
};


/* "pyarrow/lib.pxd":49
 * 
 * 
 * cdef class Message(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         unique_ptr[CMessage] message
 */
struct __pyx_obj_7pyarrow_3lib_Message {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  std::unique_ptr< arrow::ipc::Message>  message;
};


/* "pyarrow/lib.pxd":54
 * 
 * 
 * cdef class MemoryPool(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CMemoryPool* pool
 */
struct __pyx_obj_7pyarrow_3lib_MemoryPool {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool *__pyx_vtab;
   arrow::MemoryPool *pool;
};


/* "pyarrow/lib.pxd":67
 * 
 * 
 * cdef class DataType(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CDataType] sp_type
 */
struct __pyx_obj_7pyarrow_3lib_DataType {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType *__pyx_vtab;
  std::shared_ptr< arrow::DataType>  sp_type;
   arrow::DataType *type;
  PyObject *pep3118_format;
};


/* "pyarrow/lib.pxd":77
 * 
 * 
 * cdef class ListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CListType* list_type
 */
struct __pyx_obj_7pyarrow_3lib_ListType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::ListType const *list_type;
};


/* "pyarrow/lib.pxd":82
 * 
 * 
 * cdef class LargeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CLargeListType* list_type
 */
struct __pyx_obj_7pyarrow_3lib_LargeListType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::LargeListType const *list_type;
};


/* "pyarrow/lib.pxd":87
 * 
 * 
 * cdef class MapType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CMapType* map_type
 */
struct __pyx_obj_7pyarrow_3lib_MapType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::MapType const *map_type;
};


/* "pyarrow/lib.pxd":92
 * 
 * 
 * cdef class FixedSizeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeListType* list_type
 */
struct __pyx_obj_7pyarrow_3lib_FixedSizeListType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::FixedSizeListType const *list_type;
};


/* "pyarrow/lib.pxd":97
 * 
 * 
 * cdef class StructType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CStructType* struct_type
 */
struct __pyx_obj_7pyarrow_3lib_StructType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::StructType const *struct_type;
};


/* "pyarrow/lib.pxd":104
 * 
 * 
 * cdef class DictionaryMemo(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         # Even though the CDictionaryMemo instance is private, we allocate
 */
struct __pyx_obj_7pyarrow_3lib_DictionaryMemo {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  std::shared_ptr< arrow::ipc::DictionaryMemo>  sp_memo;
   arrow::ipc::DictionaryMemo *memo;
};


/* "pyarrow/lib.pxd":112
 * 
 * 
 * cdef class DictionaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDictionaryType* dict_type
 */
struct __pyx_obj_7pyarrow_3lib_DictionaryType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::DictionaryType const *dict_type;
};


/* "pyarrow/lib.pxd":117
 * 
 * 
 * cdef class TimestampType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTimestampType* ts_type
 */
struct __pyx_obj_7pyarrow_3lib_TimestampType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::TimestampType const *ts_type;
};


/* "pyarrow/lib.pxd":122
 * 
 * 
 * cdef class Time32Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime32Type* time_type
 */
struct __pyx_obj_7pyarrow_3lib_Time32Type {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::Time32Type const *time_type;
};


/* "pyarrow/lib.pxd":127
 * 
 * 
 * cdef class Time64Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime64Type* time_type
 */
struct __pyx_obj_7pyarrow_3lib_Time64Type {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::Time64Type const *time_type;
};


/* "pyarrow/lib.pxd":132
 * 
 * 
 * cdef class DurationType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDurationType* duration_type
 */
struct __pyx_obj_7pyarrow_3lib_DurationType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::DurationType const *duration_type;
};


/* "pyarrow/lib.pxd":137
 * 
 * 
 * cdef class FixedSizeBinaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeBinaryType* fixed_size_binary_type
 */
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::FixedSizeBinaryType const *fixed_size_binary_type;
};


/* "pyarrow/lib.pxd":142
 * 
 * 
 * cdef class Decimal128Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal128Type* decimal128_type
 */
struct __pyx_obj_7pyarrow_3lib_Decimal128Type {
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;
   arrow::Decimal128Type const *decimal128_type;
};


/* "pyarrow/lib.pxd":147
 * 
 * 
 * cdef class Decimal256Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal256Type* decimal256_type
 */
struct __pyx_obj_7pyarrow_3lib_Decimal256Type {
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;
   arrow::Decimal256Type const *decimal256_type;
};


/* "pyarrow/lib.pxd":152
 * 
 * 
 * cdef class BaseExtensionType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CExtensionType* ext_type
 */
struct __pyx_obj_7pyarrow_3lib_BaseExtensionType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::ExtensionType const *ext_type;
};


/* "pyarrow/lib.pxd":157
 * 
 * 
 * cdef class ExtensionType(BaseExtensionType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CPyExtensionType* cpy_ext_type
 */
struct __pyx_obj_7pyarrow_3lib_ExtensionType {
  struct __pyx_obj_7pyarrow_3lib_BaseExtensionType __pyx_base;
   arrow::py::PyExtensionType const *cpy_ext_type;
};


/* "pyarrow/lib.pxd":162
 * 
 * 
 * cdef class PyExtensionType(ExtensionType):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_PyExtensionType {
  struct __pyx_obj_7pyarrow_3lib_ExtensionType __pyx_base;
};


/* "pyarrow/lib.pxd":166
 * 
 * 
 * cdef class _Metadata(_Weakrefable):             # <<<<<<<<<<<<<<
 *     # required because KeyValueMetadata also extends collections.abc.Mapping
 *     # and the first parent class must be an extension type
 */
struct __pyx_obj_7pyarrow_3lib__Metadata {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
};


/* "pyarrow/lib.pxd":172
 * 
 * 
 * cdef class KeyValueMetadata(_Metadata):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[const CKeyValueMetadata] wrapped
 */
struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata {
  struct __pyx_obj_7pyarrow_3lib__Metadata __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_KeyValueMetadata *__pyx_vtab;
  std::shared_ptr< arrow::KeyValueMetadata const >  wrapped;
   arrow::KeyValueMetadata const *metadata;
};


/* "pyarrow/lib.pxd":184
 * 
 * 
 * cdef class Field(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CField] sp_field
 */
struct __pyx_obj_7pyarrow_3lib_Field {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Field *__pyx_vtab;
  std::shared_ptr< arrow::Field>  sp_field;
   arrow::Field *field;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":195
 * 
 * 
 * cdef class Schema(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSchema] sp_schema
 */
struct __pyx_obj_7pyarrow_3lib_Schema {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Schema *__pyx_vtab;
  std::shared_ptr< arrow::Schema>  sp_schema;
   arrow::Schema *schema;
};


/* "pyarrow/lib.pxd":204
 * 
 * 
 * cdef class Scalar(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CScalar] wrapped
 */
struct __pyx_obj_7pyarrow_3lib_Scalar {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Scalar *__pyx_vtab;
  std::shared_ptr< arrow::Scalar>  wrapped;
};


/* "pyarrow/lib.pxd":216
 * 
 * 
 * cdef class _PandasConvertible(_Weakrefable):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib__PandasConvertible {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
};


/* "pyarrow/lib.pxd":220
 * 
 * 
 * cdef class Array(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArray] sp_array
 */
struct __pyx_obj_7pyarrow_3lib_Array {
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Array *__pyx_vtab;
  std::shared_ptr< arrow::Array>  sp_array;
   arrow::Array *ap;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
  PyObject *_name;
};


/* "pyarrow/lib.pxd":235
 * 
 * 
 * cdef class Tensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTensor] sp_tensor
 */
struct __pyx_obj_7pyarrow_3lib_Tensor {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Tensor *__pyx_vtab;
  std::shared_ptr< arrow::Tensor>  sp_tensor;
   arrow::Tensor *tp;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":246
 * 
 * 
 * cdef class SparseCSRMatrix(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSRMatrix] sp_sparse_tensor
 */
struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSRMatrix *__pyx_vtab;
  std::shared_ptr< arrow::SparseCSRMatrix>  sp_sparse_tensor;
   arrow::SparseCSRMatrix *stp;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":257
 * 
 * 
 * cdef class SparseCSCMatrix(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSCMatrix] sp_sparse_tensor
 */
struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSCMatrix *__pyx_vtab;
  std::shared_ptr< arrow::SparseCSCMatrix>  sp_sparse_tensor;
   arrow::SparseCSCMatrix *stp;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":268
 * 
 * 
 * cdef class SparseCOOTensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCOOTensor] sp_sparse_tensor
 */
struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseCOOTensor *__pyx_vtab;
  std::shared_ptr< arrow::SparseCOOTensor>  sp_sparse_tensor;
   arrow::SparseCOOTensor *stp;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":279
 * 
 * 
 * cdef class SparseCSFTensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSFTensor] sp_sparse_tensor
 */
struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSFTensor *__pyx_vtab;
  std::shared_ptr< arrow::SparseCSFTensor>  sp_sparse_tensor;
   arrow::SparseCSFTensor *stp;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":290
 * 
 * 
 * cdef class NullArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_NullArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":294
 * 
 * 
 * cdef class BooleanArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BooleanArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":298
 * 
 * 
 * cdef class NumericArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_NumericArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":302
 * 
 * 
 * cdef class IntegerArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_IntegerArray {
  struct __pyx_obj_7pyarrow_3lib_NumericArray __pyx_base;
};


/* "pyarrow/lib.pxd":306
 * 
 * 
 * cdef class FloatingPointArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_FloatingPointArray {
  struct __pyx_obj_7pyarrow_3lib_NumericArray __pyx_base;
};


/* "pyarrow/lib.pxd":310
 * 
 * 
 * cdef class Int8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int8Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":314
 * 
 * 
 * cdef class UInt8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UInt8Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":318
 * 
 * 
 * cdef class Int16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int16Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":322
 * 
 * 
 * cdef class UInt16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UInt16Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":326
 * 
 * 
 * cdef class Int32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int32Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":330
 * 
 * 
 * cdef class UInt32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UInt32Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":334
 * 
 * 
 * cdef class Int64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int64Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":338
 * 
 * 
 * cdef class UInt64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UInt64Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":342
 * 
 * 
 * cdef class HalfFloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_HalfFloatArray {
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;
};


/* "pyarrow/lib.pxd":346
 * 
 * 
 * cdef class FloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_FloatArray {
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;
};


/* "pyarrow/lib.pxd":350
 * 
 * 
 * cdef class DoubleArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_DoubleArray {
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;
};


/* "pyarrow/lib.pxd":354
 * 
 * 
 * cdef class FixedSizeBinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":358
 * 
 * 
 * cdef class Decimal128Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Decimal128Array {
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;
};


/* "pyarrow/lib.pxd":362
 * 
 * 
 * cdef class Decimal256Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Decimal256Array {
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;
};


/* "pyarrow/lib.pxd":366
 * 
 * 
 * cdef class StructArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_StructArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":370
 * 
 * 
 * cdef class BaseListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BaseListArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":374
 * 
 * 
 * cdef class ListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_ListArray {
  struct __pyx_obj_7pyarrow_3lib_BaseListArray __pyx_base;
};


/* "pyarrow/lib.pxd":378
 * 
 * 
 * cdef class LargeListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_LargeListArray {
  struct __pyx_obj_7pyarrow_3lib_BaseListArray __pyx_base;
};


/* "pyarrow/lib.pxd":382
 * 
 * 
 * cdef class MapArray(ListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_MapArray {
  struct __pyx_obj_7pyarrow_3lib_ListArray __pyx_base;
};


/* "pyarrow/lib.pxd":386
 * 
 * 
 * cdef class FixedSizeListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_FixedSizeListArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":390
 * 
 * 
 * cdef class UnionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UnionArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":394
 * 
 * 
 * cdef class StringArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_StringArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":398
 * 
 * 
 * cdef class BinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BinaryArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":402
 * 
 * 
 * cdef class DictionaryArray(Array):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _indices, _dictionary
 */
struct __pyx_obj_7pyarrow_3lib_DictionaryArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
  PyObject *_indices;
  PyObject *_dictionary;
};


/* "pyarrow/lib.pxd":407
 * 
 * 
 * cdef class ExtensionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_ExtensionArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":411
 * 
 * 
 * cdef class MonthDayNanoIntervalArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_MonthDayNanoIntervalArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":419
 * 
 * 
 * cdef class ChunkedArray(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CChunkedArray] sp_chunked_array
 */
struct __pyx_obj_7pyarrow_3lib_ChunkedArray {
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray *__pyx_vtab;
  std::shared_ptr< arrow::ChunkedArray>  sp_chunked_array;
   arrow::ChunkedArray *chunked_array;
  PyObject *_name;
};


/* "pyarrow/lib.pxd":432
 * 
 * 
 * cdef class Table(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTable] sp_table
 */
struct __pyx_obj_7pyarrow_3lib_Table {
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Table *__pyx_vtab;
  std::shared_ptr< arrow::Table>  sp_table;
   arrow::Table *table;
};


/* "pyarrow/lib.pxd":440
 * 
 * 
 * cdef class RecordBatch(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatch] sp_batch
 */
struct __pyx_obj_7pyarrow_3lib_RecordBatch {
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch *__pyx_vtab;
  std::shared_ptr< arrow::RecordBatch>  sp_batch;
   arrow::RecordBatch *batch;
  struct __pyx_obj_7pyarrow_3lib_Schema *_schema;
};


/* "pyarrow/lib.pxd":449
 * 
 * 
 * cdef class Buffer(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CBuffer] buffer
 */
struct __pyx_obj_7pyarrow_3lib_Buffer {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Buffer *__pyx_vtab;
  std::shared_ptr< arrow::Buffer>  buffer;
  Py_ssize_t shape[1];
  Py_ssize_t strides[1];
};


/* "pyarrow/lib.pxd":459
 * 
 * 
 * cdef class ResizableBuffer(Buffer):             # <<<<<<<<<<<<<<
 * 
 *     cdef void init_rz(self, const shared_ptr[CResizableBuffer]& buffer)
 */
struct __pyx_obj_7pyarrow_3lib_ResizableBuffer {
  struct __pyx_obj_7pyarrow_3lib_Buffer __pyx_base;
};


/* "pyarrow/lib.pxd":464
 * 
 * 
 * cdef class NativeFile(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CInputStream] input_stream
 */
struct __pyx_obj_7pyarrow_3lib_NativeFile {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile *__pyx_vtab;
  std::shared_ptr< arrow::io::InputStream>  input_stream;
  std::shared_ptr< arrow::io::RandomAccessFile>  random_access;
  std::shared_ptr< arrow::io::OutputStream>  output_stream;
  int is_readable;
  int is_writable;
  int is_seekable;
  int own_file;
};


/* "pyarrow/lib.pxd":487
 * 
 * 
 * cdef class BufferedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BufferedInputStream {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
};


/* "pyarrow/lib.pxd":491
 * 
 * 
 * cdef class BufferedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
};


/* "pyarrow/lib.pxd":495
 * 
 * 
 * cdef class CompressedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_CompressedInputStream {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
};


/* "pyarrow/lib.pxd":499
 * 
 * 
 * cdef class CompressedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
};


/* "pyarrow/lib.pxd":503
 * 
 * 
 * cdef class _CRecordBatchWriter(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatchWriter] writer
 */
struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  std::shared_ptr< arrow::ipc::RecordBatchWriter>  writer;
};


/* "pyarrow/lib.pxd":508
 * 
 * 
 * cdef class RecordBatchReader(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatchReader] reader
 */
struct __pyx_obj_7pyarrow_3lib_RecordBatchReader {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  std::shared_ptr< arrow::RecordBatchReader>  reader;
};


/* "pyarrow/lib.pxd":513
 * 
 * 
 * cdef class Codec(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CCodec] wrapped
 */
struct __pyx_obj_7pyarrow_3lib_Codec {
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Codec *__pyx_vtab;
  std::shared_ptr< arrow::util::Codec>  wrapped;
};


/* "pyarrow/lib.pxd":521
 * 
 * # This class is only used internally for now
 * cdef class StopToken:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CStopToken stop_token
 */
struct __pyx_obj_7pyarrow_3lib_StopToken {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_StopToken *__pyx_vtab;
  arrow::StopToken stop_token;
};


/* "pycylon/net/comm_config.pxd":21
 *         CCommType Type()
 * 
 * cdef class CommConfig:             # <<<<<<<<<<<<<<
 *     pass
 */
struct __pyx_obj_7pycylon_3net_11comm_config_CommConfig {
  PyObject_HEAD
};


/* "pycylon/net/mpi_config.pxd":29
 * 
 * 
 * cdef class MPIConfig(CommConfig):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CMPIConfig] mpi_config_shd_ptr
 */
struct __pyx_obj_7pycylon_3net_10mpi_config_MPIConfig {
  struct __pyx_obj_7pycylon_3net_11comm_config_CommConfig __pyx_base;
  std::shared_ptr<cylon::net::MPIConfig>  mpi_config_shd_ptr;
};


/* "pycylon/data/data_type.pxd":48
 * 
 * 
 * cdef class DataType:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CDataType *thisPtr
 */
struct __pyx_obj_7pycylon_4data_9data_type_DataType {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pycylon_4data_9data_type_DataType *__pyx_vtab;
  cylon::DataType *thisPtr;
  std::shared_ptr<cylon::DataType>  sp_data_type;
};


/* "pycylon/data/scalar.pxd":29
 *         const shared_ptr[CDataType]& type() const
 * 
 * cdef class Scalar:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CScalar] thisPtr
 */
struct __pyx_obj_7pycylon_4data_6scalar_Scalar {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pycylon_4data_6scalar_Scalar *__pyx_vtab;
  std::shared_ptr<cylon::Scalar>  thisPtr;
};


/* "pycylon/net/communicator.pxd":39
 *                            shared_ptr[CScalar] *output)
 * 
 * cdef class Communicator:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pycylon_3net_12communicator_Communicator {
  PyObject_HEAD
};


/* "pycylon/ctx/context.pxd":66
 * 
 * 
 * cdef class CylonContext:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CCylonContext *ctx_ptr
 */
struct __pyx_obj_7pycylon_3ctx_7context_CylonContext {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pycylon_3ctx_7context_CylonContext *__pyx_vtab;
  cylon::CylonContext *ctx_ptr;
  std::shared_ptr<cylon::CylonContext>  ctx_shd_ptr;
  PyObject *__dict__;
};


/* "pycylon/indexing/cyindex.pxd":45
 * 
 * 
 * cdef class BaseArrowIndex:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CBaseArrowIndex] bindex_shd_ptr
 */
struct __pyx_obj_7pycylon_8indexing_7cyindex_BaseArrowIndex {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pycylon_8indexing_7cyindex_BaseArrowIndex *__pyx_vtab;
  std::shared_ptr<cylon::BaseArrowIndex>  bindex_shd_ptr;
  std::shared_ptr<cylon::CylonContext>  ctx_shd_ptr;
  int column_id;
  int size;
  PyObject *__dict__;
};


/* "pycylon/indexing/cyindex.pxd":109
 * 
 * 
 * cdef class ArrowLocIndexer:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArrowLocIndexer] indexer_shd_ptr
 */
struct __pyx_obj_7pycylon_8indexing_7cyindex_ArrowLocIndexer {
  PyObject_HEAD
  std::shared_ptr<cylon::ArrowLocIndexer>  indexer_shd_ptr;
  enum cylon::IndexingType c_indexing_type;
};


/* "pycylon/indexing/cyindex.pxd":115
 * 
 * 
 * cdef class ArrowILocIndexer:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArrowILocIndexer] indexer_shd_ptr
 */
struct __pyx_obj_7pycylon_8indexing_7cyindex_ArrowILocIndexer {
  PyObject_HEAD
  std::shared_ptr<cylon::ArrowILocIndexer>  indexer_shd_ptr;
  enum cylon::IndexingType c_indexing_type;
};


/* "pycylon/data/column.pxd":60
 * 
 * 
 * cdef class Column:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CColumn] thisPtr
 */
struct __pyx_obj_7pycylon_4data_6column_Column {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pycylon_4data_6column_Column *__pyx_vtab;
  std::shared_ptr<cylon::Column>  thisPtr;
};


/* "pycylon/net/mpi_communicator.pxd":37
 * 
 * 
 * cdef class MPICommunicator(Communicator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CMPICommunicator] mpi_comm_shd_ptr
 */
struct __pyx_obj_7pycylon_3net_16mpi_communicator_MPICommunicator {
  struct __pyx_obj_7pycylon_3net_12communicator_Communicator __pyx_base;
  struct __pyx_vtabstruct_7pycylon_3net_16mpi_communicator_MPICommunicator *__pyx_vtab;
  std::shared_ptr<cylon::net::MPICommunicator>  mpi_comm_shd_ptr;
};


/* "pycylon/io/csv_read_config.pxd":83
 * 
 * 
 * cdef class CSVReadOptions:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CCSVReadOptions *thisPtr
 */
struct __pyx_obj_7pycylon_2io_15csv_read_config_CSVReadOptions {
  PyObject_HEAD
  cylon::io::config::CSVReadOptions *thisPtr;
  std::vector<std::string>  cpp_strings;
};


/* "pycylon/data/table.pxd":155
 * 
 * 
 * cdef class SortOptions:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSortOptions] thisPtr
 */
struct __pyx_obj_7pycylon_4data_5table_SortOptions {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pycylon_4data_5table_SortOptions *__pyx_vtab;
  std::shared_ptr<cylon::SortOptions>  thisPtr;
};


/* "pycylon/data/table.pxd":160
 *         void init(self, const shared_ptr[CSortOptions] &csort_options)
 * 
 * cdef class Table:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTable] table_shd_ptr
 */
struct __pyx_obj_7pycylon_4data_5table_Table {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pycylon_4data_5table_Table *__pyx_vtab;
  std::shared_ptr<cylon::Table>  table_shd_ptr;
  std::shared_ptr<cylon::CylonContext>  sp_context;
  PyObject *__dict__;
};


/* "pycylon/data/table.pyx":2630
 *             raise ValueError(f"Invalid axis {axis}, must 0 or 1")
 * 
 *     def iterrows(self):             # <<<<<<<<<<<<<<
 *         data_dict = self.to_pydict()
 *         index_values = self.index.values.tolist()
 */
struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows {
  PyObject_HEAD
  PyObject *__pyx_v_column;
  PyObject *__pyx_v_data_dict;
  PyObject *__pyx_v_index_id;
  PyObject *__pyx_v_index_values;
  PyObject *__pyx_v_row;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "pycylon/common/join_config.pxd":49
 *         const string GetRightTableSuffix()
 * 
 * cdef class JoinConfig:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CJoinConfig *jcPtr
 */

struct __pyx_vtabstruct_7pycylon_6common_11join_config_JoinConfig {
  PyObject *(*_get_join_config)(struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_7pycylon_6common_11join_config_JoinConfig *__pyx_vtabptr_7pycylon_6common_11join_config_JoinConfig;


/* "pyarrow/lib.pxd":54
 * 
 * 
 * cdef class MemoryPool(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CMemoryPool* pool
 */

struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_MemoryPool *,  arrow::MemoryPool *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool *__pyx_vtabptr_7pyarrow_3lib_MemoryPool;


/* "pyarrow/lib.pxd":67
 * 
 * 
 * cdef class DataType(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CDataType] sp_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DataType {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_DataType *, std::shared_ptr< arrow::DataType>  const &);
  struct __pyx_obj_7pyarrow_3lib_Field *(*field)(struct __pyx_obj_7pyarrow_3lib_DataType *, int);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DataType *__pyx_vtabptr_7pyarrow_3lib_DataType;


/* "pyarrow/lib.pxd":77
 * 
 * 
 * cdef class ListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CListType* list_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ListType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ListType *__pyx_vtabptr_7pyarrow_3lib_ListType;


/* "pyarrow/lib.pxd":82
 * 
 * 
 * cdef class LargeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CLargeListType* list_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType *__pyx_vtabptr_7pyarrow_3lib_LargeListType;


/* "pyarrow/lib.pxd":87
 * 
 * 
 * cdef class MapType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CMapType* map_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_MapType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_MapType *__pyx_vtabptr_7pyarrow_3lib_MapType;


/* "pyarrow/lib.pxd":92
 * 
 * 
 * cdef class FixedSizeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeListType* list_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListType *__pyx_vtabptr_7pyarrow_3lib_FixedSizeListType;


/* "pyarrow/lib.pxd":97
 * 
 * 
 * cdef class StructType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CStructType* struct_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StructType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
  struct __pyx_obj_7pyarrow_3lib_Field *(*field_by_name)(struct __pyx_obj_7pyarrow_3lib_StructType *, PyObject *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StructType *__pyx_vtabptr_7pyarrow_3lib_StructType;


/* "pyarrow/lib.pxd":112
 * 
 * 
 * cdef class DictionaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDictionaryType* dict_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType *__pyx_vtabptr_7pyarrow_3lib_DictionaryType;


/* "pyarrow/lib.pxd":117
 * 
 * 
 * cdef class TimestampType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTimestampType* ts_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType *__pyx_vtabptr_7pyarrow_3lib_TimestampType;


/* "pyarrow/lib.pxd":122
 * 
 * 
 * cdef class Time32Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime32Type* time_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type *__pyx_vtabptr_7pyarrow_3lib_Time32Type;


/* "pyarrow/lib.pxd":127
 * 
 * 
 * cdef class Time64Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime64Type* time_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type *__pyx_vtabptr_7pyarrow_3lib_Time64Type;


/* "pyarrow/lib.pxd":132
 * 
 * 
 * cdef class DurationType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDurationType* duration_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DurationType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DurationType *__pyx_vtabptr_7pyarrow_3lib_DurationType;


/* "pyarrow/lib.pxd":137
 * 
 * 
 * cdef class FixedSizeBinaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeBinaryType* fixed_size_binary_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType *__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType;


/* "pyarrow/lib.pxd":142
 * 
 * 
 * cdef class Decimal128Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal128Type* decimal128_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type {
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type *__pyx_vtabptr_7pyarrow_3lib_Decimal128Type;


/* "pyarrow/lib.pxd":147
 * 
 * 
 * cdef class Decimal256Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal256Type* decimal256_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Type {
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Type *__pyx_vtabptr_7pyarrow_3lib_Decimal256Type;


/* "pyarrow/lib.pxd":152
 * 
 * 
 * cdef class BaseExtensionType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CExtensionType* ext_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType *__pyx_vtabptr_7pyarrow_3lib_BaseExtensionType;


/* "pyarrow/lib.pxd":157
 * 
 * 
 * cdef class ExtensionType(BaseExtensionType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CPyExtensionType* cpy_ext_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType {
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType *__pyx_vtabptr_7pyarrow_3lib_ExtensionType;


/* "pyarrow/lib.pxd":162
 * 
 * 
 * cdef class PyExtensionType(ExtensionType):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType {
  struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType *__pyx_vtabptr_7pyarrow_3lib_PyExtensionType;


/* "pyarrow/lib.pxd":172
 * 
 * 
 * cdef class KeyValueMetadata(_Metadata):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[const CKeyValueMetadata] wrapped
 */

struct __pyx_vtabstruct_7pyarrow_3lib_KeyValueMetadata {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata *, std::shared_ptr< arrow::KeyValueMetadata const >  const &);
  PyObject *(*wrap)(std::shared_ptr< arrow::KeyValueMetadata const >  const &);
  std::shared_ptr< arrow::KeyValueMetadata const >  (*unwrap)(struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_KeyValueMetadata *__pyx_vtabptr_7pyarrow_3lib_KeyValueMetadata;


/* "pyarrow/lib.pxd":184
 * 
 * 
 * cdef class Field(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CField] sp_field
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Field {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Field *, std::shared_ptr< arrow::Field>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Field *__pyx_vtabptr_7pyarrow_3lib_Field;


/* "pyarrow/lib.pxd":195
 * 
 * 
 * cdef class Schema(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSchema] sp_schema
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Schema {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Schema *, std::vector<std::shared_ptr< arrow::Field> >  const &);
  void (*init_schema)(struct __pyx_obj_7pyarrow_3lib_Schema *, std::shared_ptr< arrow::Schema>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Schema *__pyx_vtabptr_7pyarrow_3lib_Schema;


/* "pyarrow/lib.pxd":204
 * 
 * 
 * cdef class Scalar(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CScalar] wrapped
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Scalar {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Scalar *, std::shared_ptr< arrow::Scalar>  const &);
  PyObject *(*wrap)(std::shared_ptr< arrow::Scalar>  const &);
  std::shared_ptr< arrow::Scalar>  (*unwrap)(struct __pyx_obj_7pyarrow_3lib_Scalar *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Scalar *__pyx_vtabptr_7pyarrow_3lib_Scalar;


/* "pyarrow/lib.pxd":220
 * 
 * 
 * cdef class Array(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArray] sp_array
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Array {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Array *, std::shared_ptr< arrow::Array>  const &);
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_Array *, int64_t);
  int64_t (*length)(struct __pyx_obj_7pyarrow_3lib_Array *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Array *__pyx_vtabptr_7pyarrow_3lib_Array;


/* "pyarrow/lib.pxd":235
 * 
 * 
 * cdef class Tensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTensor] sp_tensor
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Tensor {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Tensor *, std::shared_ptr< arrow::Tensor>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Tensor *__pyx_vtabptr_7pyarrow_3lib_Tensor;


/* "pyarrow/lib.pxd":246
 * 
 * 
 * cdef class SparseCSRMatrix(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSRMatrix] sp_sparse_tensor
 */

struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSRMatrix {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix *, std::shared_ptr< arrow::SparseCSRMatrix>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSRMatrix *__pyx_vtabptr_7pyarrow_3lib_SparseCSRMatrix;


/* "pyarrow/lib.pxd":257
 * 
 * 
 * cdef class SparseCSCMatrix(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSCMatrix] sp_sparse_tensor
 */

struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSCMatrix {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix *, std::shared_ptr< arrow::SparseCSCMatrix>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSCMatrix *__pyx_vtabptr_7pyarrow_3lib_SparseCSCMatrix;


/* "pyarrow/lib.pxd":268
 * 
 * 
 * cdef class SparseCOOTensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCOOTensor] sp_sparse_tensor
 */

struct __pyx_vtabstruct_7pyarrow_3lib_SparseCOOTensor {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor *, std::shared_ptr< arrow::SparseCOOTensor>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseCOOTensor *__pyx_vtabptr_7pyarrow_3lib_SparseCOOTensor;


/* "pyarrow/lib.pxd":279
 * 
 * 
 * cdef class SparseCSFTensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSFTensor] sp_sparse_tensor
 */

struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSFTensor {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor *, std::shared_ptr< arrow::SparseCSFTensor>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSFTensor *__pyx_vtabptr_7pyarrow_3lib_SparseCSFTensor;


/* "pyarrow/lib.pxd":290
 * 
 * 
 * cdef class NullArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_NullArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_NullArray *__pyx_vtabptr_7pyarrow_3lib_NullArray;


/* "pyarrow/lib.pxd":294
 * 
 * 
 * cdef class BooleanArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray *__pyx_vtabptr_7pyarrow_3lib_BooleanArray;


/* "pyarrow/lib.pxd":298
 * 
 * 
 * cdef class NumericArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray *__pyx_vtabptr_7pyarrow_3lib_NumericArray;


/* "pyarrow/lib.pxd":302
 * 
 * 
 * cdef class IntegerArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray *__pyx_vtabptr_7pyarrow_3lib_IntegerArray;


/* "pyarrow/lib.pxd":306
 * 
 * 
 * cdef class FloatingPointArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray *__pyx_vtabptr_7pyarrow_3lib_FloatingPointArray;


/* "pyarrow/lib.pxd":310
 * 
 * 
 * cdef class Int8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array *__pyx_vtabptr_7pyarrow_3lib_Int8Array;


/* "pyarrow/lib.pxd":314
 * 
 * 
 * cdef class UInt8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array *__pyx_vtabptr_7pyarrow_3lib_UInt8Array;


/* "pyarrow/lib.pxd":318
 * 
 * 
 * cdef class Int16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array *__pyx_vtabptr_7pyarrow_3lib_Int16Array;


/* "pyarrow/lib.pxd":322
 * 
 * 
 * cdef class UInt16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array *__pyx_vtabptr_7pyarrow_3lib_UInt16Array;


/* "pyarrow/lib.pxd":326
 * 
 * 
 * cdef class Int32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array *__pyx_vtabptr_7pyarrow_3lib_Int32Array;


/* "pyarrow/lib.pxd":330
 * 
 * 
 * cdef class UInt32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array *__pyx_vtabptr_7pyarrow_3lib_UInt32Array;


/* "pyarrow/lib.pxd":334
 * 
 * 
 * cdef class Int64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array *__pyx_vtabptr_7pyarrow_3lib_Int64Array;


/* "pyarrow/lib.pxd":338
 * 
 * 
 * cdef class UInt64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array *__pyx_vtabptr_7pyarrow_3lib_UInt64Array;


/* "pyarrow/lib.pxd":342
 * 
 * 
 * cdef class HalfFloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray *__pyx_vtabptr_7pyarrow_3lib_HalfFloatArray;


/* "pyarrow/lib.pxd":346
 * 
 * 
 * cdef class FloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray *__pyx_vtabptr_7pyarrow_3lib_FloatArray;


/* "pyarrow/lib.pxd":350
 * 
 * 
 * cdef class DoubleArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray *__pyx_vtabptr_7pyarrow_3lib_DoubleArray;


/* "pyarrow/lib.pxd":354
 * 
 * 
 * cdef class FixedSizeBinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray *__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray;


/* "pyarrow/lib.pxd":358
 * 
 * 
 * cdef class Decimal128Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array *__pyx_vtabptr_7pyarrow_3lib_Decimal128Array;


/* "pyarrow/lib.pxd":362
 * 
 * 
 * cdef class Decimal256Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Array *__pyx_vtabptr_7pyarrow_3lib_Decimal256Array;


/* "pyarrow/lib.pxd":366
 * 
 * 
 * cdef class StructArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StructArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StructArray *__pyx_vtabptr_7pyarrow_3lib_StructArray;


/* "pyarrow/lib.pxd":370
 * 
 * 
 * cdef class BaseListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray *__pyx_vtabptr_7pyarrow_3lib_BaseListArray;


/* "pyarrow/lib.pxd":374
 * 
 * 
 * cdef class ListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ListArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ListArray *__pyx_vtabptr_7pyarrow_3lib_ListArray;


/* "pyarrow/lib.pxd":378
 * 
 * 
 * cdef class LargeListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray *__pyx_vtabptr_7pyarrow_3lib_LargeListArray;


/* "pyarrow/lib.pxd":382
 * 
 * 
 * cdef class MapArray(ListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_MapArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_ListArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_MapArray *__pyx_vtabptr_7pyarrow_3lib_MapArray;


/* "pyarrow/lib.pxd":386
 * 
 * 
 * cdef class FixedSizeListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListArray *__pyx_vtabptr_7pyarrow_3lib_FixedSizeListArray;


/* "pyarrow/lib.pxd":390
 * 
 * 
 * cdef class UnionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray *__pyx_vtabptr_7pyarrow_3lib_UnionArray;


/* "pyarrow/lib.pxd":394
 * 
 * 
 * cdef class StringArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StringArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StringArray *__pyx_vtabptr_7pyarrow_3lib_StringArray;


/* "pyarrow/lib.pxd":398
 * 
 * 
 * cdef class BinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray *__pyx_vtabptr_7pyarrow_3lib_BinaryArray;


/* "pyarrow/lib.pxd":402
 * 
 * 
 * cdef class DictionaryArray(Array):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _indices, _dictionary
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray *__pyx_vtabptr_7pyarrow_3lib_DictionaryArray;


/* "pyarrow/lib.pxd":407
 * 
 * 
 * cdef class ExtensionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray *__pyx_vtabptr_7pyarrow_3lib_ExtensionArray;


/* "pyarrow/lib.pxd":411
 * 
 * 
 * cdef class MonthDayNanoIntervalArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_MonthDayNanoIntervalArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_MonthDayNanoIntervalArray *__pyx_vtabptr_7pyarrow_3lib_MonthDayNanoIntervalArray;


/* "pyarrow/lib.pxd":419
 * 
 * 
 * cdef class ChunkedArray(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CChunkedArray] sp_chunked_array
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_ChunkedArray *, std::shared_ptr< arrow::ChunkedArray>  const &);
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_ChunkedArray *, int64_t);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray *__pyx_vtabptr_7pyarrow_3lib_ChunkedArray;


/* "pyarrow/lib.pxd":432
 * 
 * 
 * cdef class Table(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTable] sp_table
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Table {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Table *, std::shared_ptr< arrow::Table>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Table *__pyx_vtabptr_7pyarrow_3lib_Table;


/* "pyarrow/lib.pxd":440
 * 
 * 
 * cdef class RecordBatch(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatch] sp_batch
 */

struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_RecordBatch *, std::shared_ptr< arrow::RecordBatch>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch *__pyx_vtabptr_7pyarrow_3lib_RecordBatch;


/* "pyarrow/lib.pxd":449
 * 
 * 
 * cdef class Buffer(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CBuffer] buffer
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Buffer {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Buffer *, std::shared_ptr< arrow::Buffer>  const &);
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_Buffer *, int64_t);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Buffer *__pyx_vtabptr_7pyarrow_3lib_Buffer;


/* "pyarrow/lib.pxd":459
 * 
 * 
 * cdef class ResizableBuffer(Buffer):             # <<<<<<<<<<<<<<
 * 
 *     cdef void init_rz(self, const shared_ptr[CResizableBuffer]& buffer)
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer {
  struct __pyx_vtabstruct_7pyarrow_3lib_Buffer __pyx_base;
  void (*init_rz)(struct __pyx_obj_7pyarrow_3lib_ResizableBuffer *, std::shared_ptr< arrow::ResizableBuffer>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer *__pyx_vtabptr_7pyarrow_3lib_ResizableBuffer;


/* "pyarrow/lib.pxd":464
 * 
 * 
 * cdef class NativeFile(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CInputStream] input_stream
 */

struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile {
  PyObject *(*set_random_access_file)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr< arrow::io::RandomAccessFile> );
  PyObject *(*set_input_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr< arrow::io::InputStream> );
  PyObject *(*set_output_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr< arrow::io::OutputStream> );
  std::shared_ptr< arrow::io::RandomAccessFile>  (*get_random_access_file)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);
  std::shared_ptr< arrow::io::InputStream>  (*get_input_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);
  std::shared_ptr< arrow::io::OutputStream>  (*get_output_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile *__pyx_vtabptr_7pyarrow_3lib_NativeFile;


/* "pyarrow/lib.pxd":487
 * 
 * 
 * cdef class BufferedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream *__pyx_vtabptr_7pyarrow_3lib_BufferedInputStream;


/* "pyarrow/lib.pxd":491
 * 
 * 
 * cdef class BufferedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream *__pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream;


/* "pyarrow/lib.pxd":495
 * 
 * 
 * cdef class CompressedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream *__pyx_vtabptr_7pyarrow_3lib_CompressedInputStream;


/* "pyarrow/lib.pxd":499
 * 
 * 
 * cdef class CompressedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream *__pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream;


/* "pyarrow/lib.pxd":513
 * 
 * 
 * cdef class Codec(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CCodec] wrapped
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Codec {
   arrow::util::Codec *(*unwrap)(struct __pyx_obj_7pyarrow_3lib_Codec *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Codec *__pyx_vtabptr_7pyarrow_3lib_Codec;


/* "pyarrow/lib.pxd":521
 * 
 * # This class is only used internally for now
 * cdef class StopToken:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CStopToken stop_token
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StopToken {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_StopToken *, arrow::StopToken);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StopToken *__pyx_vtabptr_7pyarrow_3lib_StopToken;


/* "pycylon/data/data_type.pxd":48
 * 
 * 
 * cdef class DataType:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CDataType *thisPtr
 */

struct __pyx_vtabstruct_7pycylon_4data_9data_type_DataType {
  void (*init)(struct __pyx_obj_7pycylon_4data_9data_type_DataType *, std::shared_ptr<cylon::DataType>  const &);
};
static struct __pyx_vtabstruct_7pycylon_4data_9data_type_DataType *__pyx_vtabptr_7pycylon_4data_9data_type_DataType;


/* "pycylon/data/scalar.pxd":29
 *         const shared_ptr[CDataType]& type() const
 * 
 * cdef class Scalar:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CScalar] thisPtr
 */

struct __pyx_vtabstruct_7pycylon_4data_6scalar_Scalar {
  void (*init)(struct __pyx_obj_7pycylon_4data_6scalar_Scalar *, std::shared_ptr<cylon::Scalar> );
};
static struct __pyx_vtabstruct_7pycylon_4data_6scalar_Scalar *__pyx_vtabptr_7pycylon_4data_6scalar_Scalar;


/* "pycylon/ctx/context.pxd":66
 * 
 * 
 * cdef class CylonContext:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CCylonContext *ctx_ptr
 */

struct __pyx_vtabstruct_7pycylon_3ctx_7context_CylonContext {
  void (*init)(struct __pyx_obj_7pycylon_3ctx_7context_CylonContext *, std::shared_ptr<cylon::CylonContext>  const &);
  std::shared_ptr<cylon::net::CommConfig>  (*init_dist)(struct __pyx_obj_7pycylon_3ctx_7context_CylonContext *, PyObject *);
};
static struct __pyx_vtabstruct_7pycylon_3ctx_7context_CylonContext *__pyx_vtabptr_7pycylon_3ctx_7context_CylonContext;


/* "pycylon/indexing/cyindex.pxd":45
 * 
 * 
 * cdef class BaseArrowIndex:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CBaseArrowIndex] bindex_shd_ptr
 */

struct __pyx_vtabstruct_7pycylon_8indexing_7cyindex_BaseArrowIndex {
  void (*init)(struct __pyx_obj_7pycylon_8indexing_7cyindex_BaseArrowIndex *, std::shared_ptr<cylon::BaseArrowIndex>  const &);
};
static struct __pyx_vtabstruct_7pycylon_8indexing_7cyindex_BaseArrowIndex *__pyx_vtabptr_7pycylon_8indexing_7cyindex_BaseArrowIndex;


/* "pycylon/data/column.pxd":60
 * 
 * 
 * cdef class Column:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CColumn] thisPtr
 */

struct __pyx_vtabstruct_7pycylon_4data_6column_Column {
  void (*init)(struct __pyx_obj_7pycylon_4data_6column_Column *, std::shared_ptr<cylon::Column>  const &);
};
static struct __pyx_vtabstruct_7pycylon_4data_6column_Column *__pyx_vtabptr_7pycylon_4data_6column_Column;


/* "pycylon/net/mpi_communicator.pxd":37
 * 
 * 
 * cdef class MPICommunicator(Communicator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CMPICommunicator] mpi_comm_shd_ptr
 */

struct __pyx_vtabstruct_7pycylon_3net_16mpi_communicator_MPICommunicator {
  void (*init)(struct __pyx_obj_7pycylon_3net_16mpi_communicator_MPICommunicator *, std::shared_ptr<cylon::net::MPICommunicator>  const &);
};
static struct __pyx_vtabstruct_7pycylon_3net_16mpi_communicator_MPICommunicator *__pyx_vtabptr_7pycylon_3net_16mpi_communicator_MPICommunicator;


/* "pycylon/data/table.pyx":2785
 * 
 * 
 * cdef class SortOptions:             # <<<<<<<<<<<<<<
 *     """
 *     Sort Operations for Distributed Sort
 */

struct __pyx_vtabstruct_7pycylon_4data_5table_SortOptions {
  void (*init)(struct __pyx_obj_7pycylon_4data_5table_SortOptions *, std::shared_ptr<cylon::SortOptions>  const &);
};
static struct __pyx_vtabstruct_7pycylon_4data_5table_SortOptions *__pyx_vtabptr_7pycylon_4data_5table_SortOptions;


/* "pycylon/data/table.pyx":87
 * 
 * 
 * cdef class Table:             # <<<<<<<<<<<<<<
 *     def __init__(self, pyarrow_table=None, context=None):
 *         self.initialize(pyarrow_table, context)
 */

struct __pyx_vtabstruct_7pycylon_4data_5table_Table {
  void (*init)(struct __pyx_obj_7pycylon_4data_5table_Table *, std::shared_ptr<cylon::Table>  const &);
  PyObject *(*_get_join_ra_response)(struct __pyx_obj_7pycylon_4data_5table_Table *, PyObject *, std::shared_ptr<cylon::Table> , cylon::Status);
  PyObject *(*_get_ra_response)(struct __pyx_obj_7pycylon_4data_5table_Table *, PyObject *, PyObject *);
  PyObject *(*_get_slice_ra_response)(struct __pyx_obj_7pycylon_4data_5table_Table *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_7pycylon_4data_5table_Table *__pyx_vtabptr_7pycylon_4data_5table_Table;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* MergeKeywords.proto */
static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_RemainderObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceRemainder(op1, op2) : PyNumber_Remainder(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_FloorDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceFloorDivide(op1, op2) : PyNumber_FloorDivide(op1, op2))
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_37
#define __PYX_HAVE_RT_ImportType_proto_0_29_37
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_37(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_37(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_37 {
   __Pyx_ImportType_CheckSize_Error_0_29_37 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_37 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_37 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_37(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_37 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum cylon::compute::AggregationOpId __Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_t_7pycylon_4data_5table_options value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_0_29_37(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_7pycylon_4data_5table_5Table_init(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, std::shared_ptr<cylon::Table>  const &__pyx_v_table); /* proto*/
static PyObject *__pyx_f_7pycylon_4data_5table_5Table__get_join_ra_response(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_op_name, std::shared_ptr<cylon::Table>  __pyx_v_output, cylon::Status __pyx_v_status); /* proto*/
static PyObject *__pyx_f_7pycylon_4data_5table_5Table__get_ra_response(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_table, PyObject *__pyx_v_ra_op_name); /* proto*/
static PyObject *__pyx_f_7pycylon_4data_5table_5Table__get_slice_ra_response(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_offset, PyObject *__pyx_v_length, PyObject *__pyx_v_ra_op_name); /* proto*/
static void __pyx_f_7pycylon_4data_5table_11SortOptions_init(struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_self, std::shared_ptr<cylon::SortOptions>  const &__pyx_v_csort_options); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'pycylon.common.code' */

/* Module declarations from 'pycylon.common.status' */
static PyTypeObject *__pyx_ptype_7pycylon_6common_6status_Status = 0;

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'pycylon.common.join_config' */
static PyTypeObject *__pyx_ptype_7pycylon_6common_11join_config_JoinConfig = 0;

/* Module declarations from 'pycylon.io.csv_write_config' */
static PyTypeObject *__pyx_ptype_7pycylon_2io_16csv_write_config_CSVWriteOptions = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.functional' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'datetime' */

/* Module declarations from 'cpython.datetime' */
static PyTypeObject *__pyx_ptype_7cpython_8datetime_date = 0;
static PyTypeObject *__pyx_ptype_7cpython_8datetime_time = 0;
static PyTypeObject *__pyx_ptype_7cpython_8datetime_datetime = 0;
static PyTypeObject *__pyx_ptype_7cpython_8datetime_timedelta = 0;
static PyTypeObject *__pyx_ptype_7cpython_8datetime_tzinfo = 0;

/* Module declarations from 'pyarrow.includes.common' */

/* Module declarations from 'pyarrow.includes.libarrow' */

/* Module declarations from 'pyarrow.includes.libarrow_python' */

/* Module declarations from 'pyarrow.lib' */
static PyTypeObject *__pyx_ptype_7pyarrow_3lib__Weakrefable = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_IpcWriteOptions = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_IpcReadOptions = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Message = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_MemoryPool = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DataType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_MapType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeListType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StructType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryMemo = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_TimestampType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Time32Type = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Time64Type = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DurationType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal128Type = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal256Type = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BaseExtensionType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ExtensionType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_PyExtensionType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib__Metadata = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_KeyValueMetadata = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Field = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Schema = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Scalar = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib__PandasConvertible = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Tensor = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseCOOTensor = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseCSFTensor = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_NullArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BooleanArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_NumericArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_IntegerArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FloatingPointArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int8Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt8Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int16Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt16Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int32Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt32Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int64Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt64Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_HalfFloatArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FloatArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DoubleArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal128Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal256Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StructArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BaseListArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_MapArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeListArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UnionArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StringArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BinaryArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ExtensionArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ChunkedArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Table = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_RecordBatch = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Buffer = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ResizableBuffer = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_NativeFile = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BufferedInputStream = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BufferedOutputStream = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_CompressedInputStream = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_CompressedOutputStream = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_RecordBatchReader = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Codec = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StopToken = 0;
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_buffer)(std::shared_ptr< arrow::Buffer>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_resizable_buffer)(std::shared_ptr< arrow::ResizableBuffer>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_data_type)(std::shared_ptr< arrow::DataType>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_field)(std::shared_ptr< arrow::Field>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_schema)(std::shared_ptr< arrow::Schema>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_scalar)(std::shared_ptr< arrow::Scalar>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_array)(std::shared_ptr< arrow::Array>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_chunked_array)(std::shared_ptr< arrow::ChunkedArray>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_coo_tensor)(std::shared_ptr< arrow::SparseCOOTensor>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_csc_matrix)(std::shared_ptr< arrow::SparseCSCMatrix>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_csf_tensor)(std::shared_ptr< arrow::SparseCSFTensor>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_csr_matrix)(std::shared_ptr< arrow::SparseCSRMatrix>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_tensor)(std::shared_ptr< arrow::Tensor>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_batch)(std::shared_ptr< arrow::RecordBatch>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_table)(std::shared_ptr< arrow::Table>  const &); /*proto*/
static std::shared_ptr< arrow::Buffer>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_buffer)(PyObject *); /*proto*/
static std::shared_ptr< arrow::DataType>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_data_type)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Field>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_field)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Schema>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_schema)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Scalar>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_scalar)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Array>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_array)(PyObject *); /*proto*/
static std::shared_ptr< arrow::ChunkedArray>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_chunked_array)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseCOOTensor>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_coo_tensor)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseCSCMatrix>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_csc_matrix)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseCSFTensor>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_csf_tensor)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseCSRMatrix>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_csr_matrix)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Tensor>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_tensor)(PyObject *); /*proto*/
static std::shared_ptr< arrow::RecordBatch>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_batch)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Table>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_table)(PyObject *); /*proto*/

/* Module declarations from 'pycylon.net.comm_type' */

/* Module declarations from 'pycylon.net.comm_config' */
static PyTypeObject *__pyx_ptype_7pycylon_3net_11comm_config_CommConfig = 0;

/* Module declarations from 'mpi4py.libmpi' */

/* Module declarations from 'pycylon.net.mpi_config' */
static PyTypeObject *__pyx_ptype_7pycylon_3net_10mpi_config_MPIConfig = 0;

/* Module declarations from 'pycylon.net.reduce_op' */

/* Module declarations from 'pycylon.data.ctype' */

/* Module declarations from 'pycylon.data.layout' */

/* Module declarations from 'pycylon.data.data_type' */
static PyTypeObject *__pyx_ptype_7pycylon_4data_9data_type_DataType = 0;

/* Module declarations from 'pycylon.data.scalar' */
static PyTypeObject *__pyx_ptype_7pycylon_4data_6scalar_Scalar = 0;

/* Module declarations from 'pycylon.net.communicator' */
static PyTypeObject *__pyx_ptype_7pycylon_3net_12communicator_Communicator = 0;

/* Module declarations from 'pycylon.ctx.context' */
static PyTypeObject *__pyx_ptype_7pycylon_3ctx_7context_CylonContext = 0;

/* Module declarations from 'pycylon.indexing.cyindex' */
static PyTypeObject *__pyx_ptype_7pycylon_8indexing_7cyindex_BaseArrowIndex = 0;
static PyTypeObject *__pyx_ptype_7pycylon_8indexing_7cyindex_ArrowLocIndexer = 0;
static PyTypeObject *__pyx_ptype_7pycylon_8indexing_7cyindex_ArrowILocIndexer = 0;

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'pycylon.data.column' */
static PyTypeObject *__pyx_ptype_7pycylon_4data_6column_Column = 0;

/* Module declarations from 'pycylon.net.mpi_communicator' */
static PyTypeObject *__pyx_ptype_7pycylon_3net_16mpi_communicator_MPICommunicator = 0;

/* Module declarations from 'pycylon.io.csv_read_config' */
static PyTypeObject *__pyx_ptype_7pycylon_2io_15csv_read_config_CSVReadOptions = 0;

/* Module declarations from 'pycylon.api.lib' */
static int (*__pyx_f_7pycylon_3api_3lib_pyclon_is_context)(PyObject *); /*proto*/
static std::shared_ptr<cylon::CylonContext>  (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_context)(PyObject *); /*proto*/
static std::shared_ptr<cylon::net::MPIConfig>  (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_mpi_config)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_mci_communicator)(std::shared_ptr<cylon::net::MPICommunicator>  const &); /*proto*/
static std::shared_ptr<cylon::Table>  (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_table)(PyObject *); /*proto*/
static std::shared_ptr<cylon::DataType>  (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_data_type)(PyObject *); /*proto*/
static cylon::io::config::CSVReadOptions (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_csv_read_options)(PyObject *); /*proto*/
static cylon::io::config::CSVWriteOptions (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_csv_write_options)(PyObject *); /*proto*/
static std::shared_ptr<cylon::SortOptions>  (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_sort_options)(PyObject *); /*proto*/
static std::shared_ptr<cylon::BaseArrowIndex>  (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_base_arrow_index)(PyObject *); /*proto*/
static cylon::Type (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_type)(PyObject *); /*proto*/
static cylon::Layout (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_layout)(PyObject *); /*proto*/
static cylon::join::config::JoinConfig *(*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_join_config)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_table)(std::shared_ptr<cylon::Table>  const &); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_context)(std::shared_ptr<cylon::CylonContext>  const &); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_type)(cylon::Type const &); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_layout)(cylon::Layout const &); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_data_type)(std::shared_ptr<cylon::DataType>  const &); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_sort_options)(std::shared_ptr<cylon::SortOptions>  const &); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_base_arrow_index)(std::shared_ptr<cylon::BaseArrowIndex>  const &); /*proto*/
static std::shared_ptr<cylon::Column>  (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_column)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_column)(std::shared_ptr<cylon::Column>  const &); /*proto*/
static std::shared_ptr<cylon::Scalar>  (*__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_scalar)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_7pycylon_3api_3lib_pycylon_wrap_scalar)(std::shared_ptr<cylon::Scalar>  const &); /*proto*/

/* Module declarations from 'pycylon.data.aggregates' */

/* Module declarations from 'pycylon.data.groupby' */

/* Module declarations from 'pycylon.data.table' */
static PyTypeObject *__pyx_ptype_7pycylon_4data_5table_SortOptions = 0;
static PyTypeObject *__pyx_ptype_7pycylon_4data_5table_Table = 0;
static PyTypeObject *__pyx_ptype_7pycylon_4data_5table___pyx_scope_struct__iterrows = 0;
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pycylon.data.table"
extern int __pyx_module_is_main_pycylon__data__table;
int __pyx_module_is_main_pycylon__data__table = 0;

/* Implementation of 'pycylon.data.table' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_KeyError;
static const char __pyx_k_F[] = "F";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_i[] = "i";
static const char __pyx_k__7[] = "";
static const char __pyx_k_df[] = "df";
static const char __pyx_k_eq[] = "__eq__";
static const char __pyx_k_ge[] = "__ge__";
static const char __pyx_k_gt[] = "__gt__";
static const char __pyx_k_le[] = "__le__";
static const char __pyx_k_lt[] = "__lt__";
static const char __pyx_k_ne[] = "__ne__";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_on[] = "on";
static const char __pyx_k_op[] = "op";
static const char __pyx_k_or[] = "__or__";
static const char __pyx_k_pa[] = "pa";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_MAX[] = "MAX";
static const char __pyx_k_MIN[] = "MIN";
static const char __pyx_k_SUM[] = "SUM";
static const char __pyx_k__21[] = "\n";
static const char __pyx_k__22[] = ".";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_agg[] = "agg";
static const char __pyx_k_and[] = "__and__";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_ctx[] = "ctx";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_how[] = "how";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_loc[] = "loc";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_mul[] = "mul";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_neg[] = "neg";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_sub[] = "sub";
static const char __pyx_k_tb1[] = "tb1";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Join[] = "Join";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_cast[] = "cast";
static const char __pyx_k_col1[] = "col1";
static const char __pyx_k_col2[] = "col2";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_drop[] = "drop";
static const char __pyx_k_full[] = "full";
static const char __pyx_k_hash[] = "hash";
static const char __pyx_k_iloc[] = "iloc";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_keep[] = "keep";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_row1[] = "row1";
static const char __pyx_k_row2[] = "row2";
static const char __pyx_k_safe[] = "safe";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_COUNT[] = "COUNT";
static const char __pyx_k_RANGE[] = "RANGE";
static const char __pyx_k_Table[] = "Table";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_arrow[] = "arrow";
static const char __pyx_k_as_py[] = "as_py";
static const char __pyx_k_chunk[] = "chunk";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_index[] = "_index";
static const char __pyx_k_inner[] = "inner";
static const char __pyx_k_is_in[] = "is_in";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_merge[] = "merge";
static const char __pyx_k_names[] = "names";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_slice[] = "slice";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_union[] = "union";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Column[] = "Column ";
static const char __pyx_k_LINEAR[] = "LINEAR";
static const char __pyx_k_Status[] = "Status";
static const char __pyx_k_agg_op[] = "_agg_op";
static const char __pyx_k_chunks[] = "chunks";
static const char __pyx_k_column[] = "column";
static const char __pyx_k_concat[] = "concat";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_failed[] = " failed: ";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_invert[] = "invert";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_schema[] = "schema";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_tables[] = "tables";
static const char __pyx_k_tb_idx[] = "tb_idx";
static const char __pyx_k_tolist[] = "tolist";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_ar_list[] = "ar_list";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_compute[] = "compute";
static const char __pyx_k_context[] = "context";
static const char __pyx_k_ctables[] = "ctables";
static const char __pyx_k_drop_na[] = "drop_na";
static const char __pyx_k_index_2[] = "index";
static const char __pyx_k_initial[] = "initial";
static const char __pyx_k_inplace[] = "inplace";
static const char __pyx_k_is_null[] = "is_null";
static const char __pyx_k_left_on[] = "left_on";
static const char __pyx_k_math_op[] = "math_op";
static const char __pyx_k_ordered[] = "ordered";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_pyarrow[] = "pyarrow";
static const char __pyx_k_regular[] = "regular";
static const char __pyx_k_truediv[] = "truediv";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_cn_table[] = "cn_table";
static const char __pyx_k_curTable[] = "curTable";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_isscalar[] = "isscalar";
static const char __pyx_k_iterrows[] = "iterrows";
static const char __pyx_k_nthreads[] = "nthreads";
static const char __pyx_k_num_bins[] = "num_bins";
static const char __pyx_k_operator[] = "operator";
static const char __pyx_k_order_by[] = "order_by";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_right_on[] = "right_on";
static const char __pyx_k_sampling[] = "sampling";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_subtract[] = "subtract";
static const char __pyx_k_to_arrow[] = "to_arrow";
static const char __pyx_k_to_numpy[] = "to_numpy";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_writable[] = "writable";
static const char __pyx_k_IndexUtil[] = "IndexUtil";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_algorithm[] = "algorithm";
static const char __pyx_k_arw_table[] = "arw_table";
static const char __pyx_k_ascending[] = "ascending";
static const char __pyx_k_col_names[] = "col_names";
static const char __pyx_k_condition[] = "condition";
static const char __pyx_k_data_list[] = "data_list";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_fill_null[] = "fill_null";
static const char __pyx_k_from_list[] = "from_list";
static const char __pyx_k_get_index[] = "get_index";
static const char __pyx_k_intersect[] = "intersect";
static const char __pyx_k_join_type[] = "join_type";
static const char __pyx_k_left_cols[] = "left_cols";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_res_table[] = "res_table";
static const char __pyx_k_row_count[] = "row_count";
static const char __pyx_k_row_limit[] = "row_limit";
static const char __pyx_k_set_index[] = "set_index";
static const char __pyx_k_skip_null[] = "skip_null";
static const char __pyx_k_to_pandas[] = "to_pandas";
static const char __pyx_k_to_pydict[] = "to_pydict";
static const char __pyx_k_to_string[] = "to_string";
static const char __pyx_k_with_type[] = "with_type";
static const char __pyx_k_EmptyTable[] = "EmptyTable";
static const char __pyx_k_JoinConfig[] = "JoinConfig";
static const char __pyx_k_RangeIndex[] = "RangeIndex";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_dictionary[] = "dictionary";
static const char __pyx_k_drop_index[] = "drop_index";
static const char __pyx_k_empty_data[] = "empty_data";
static const char __pyx_k_from_arrow[] = "from_arrow";
static const char __pyx_k_from_numpy[] = "from_numpy";
static const char __pyx_k_get_config[] = "get_config";
static const char __pyx_k_initialize[] = "initialize";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_right_cols[] = "right_cols";
static const char __pyx_k_set_column[] = "set_column";
static const char __pyx_k_to_batches[] = "to_batches";
static const char __pyx_k_with_index[] = "with_index";
static const char __pyx_k_SortOptions[] = "SortOptions";
static const char __pyx_k_concat_impl[] = "_concat_impl";
static const char __pyx_k_from_arrays[] = "from_arrays";
static const char __pyx_k_from_pandas[] = "from_pandas";
static const char __pyx_k_from_pydict[] = "from_pydict";
static const char __pyx_k_itercolumns[] = "itercolumns";
static const char __pyx_k_left_prefix[] = "left_prefix";
static const char __pyx_k_mapred_hash[] = "mapred_hash";
static const char __pyx_k_must_0_or_1[] = ", must 0 or 1";
static const char __pyx_k_num_samples[] = "num_samples";
static const char __pyx_k_reset_index[] = "reset_index";
static const char __pyx_k_Aggregate_op[] = "Aggregate op ";
static const char __pyx_k_CylonContext[] = "CylonContext";
static const char __pyx_k_IndexingType[] = "IndexingType";
static const char __pyx_k_Invalid_axis[] = "Invalid axis ";
static const char __pyx_k_NumericIndex[] = "NumericIndex";
static const char __pyx_k_PyLocIndexer[] = "PyLocIndexer";
static const char __pyx_k_column_count[] = "column_count";
static const char __pyx_k_column_names[] = "column_names";
static const char __pyx_k_groupby_type[] = "groupby_type";
static const char __pyx_k_hash_columns[] = "hash_columns";
static const char __pyx_k_pycylon_data[] = "pycylon.data";
static const char __pyx_k_right_prefix[] = "right_prefix";
static const char __pyx_k_sort_options[] = "sort_options";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_AggregationOp[] = "AggregationOp";
static const char __pyx_k_StrToJoinType[] = "StrToJoinType";
static const char __pyx_k_append_column[] = "append_column";
static const char __pyx_k_indexing_type[] = "_indexing_type";
static const char __pyx_k_pyarrow_table[] = "pyarrow_table";
static const char __pyx_k_pycylon_index[] = "pycylon.index";
static const char __pyx_k_pycylon_table[] = "pycylon_table";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_BaseArrowIndex[] = "BaseArrowIndex";
static const char __pyx_k_Invalid_object[] = "Invalid object ";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_Table_expected[] = ", Table expected";
static const char __pyx_k_Table_iterrows[] = "Table.iterrows";
static const char __pyx_k_and_value_type[] = " and value type ";
static const char __pyx_k_asfortranarray[] = "asfortranarray";
static const char __pyx_k_combine_chunks[] = "combine_chunks";
static const char __pyx_k_compute_engine[] = "compute_engine";
static const char __pyx_k_expected_Table[] = ", expected Table";
static const char __pyx_k_get_arrow_type[] = "get_arrow_type";
static const char __pyx_k_get_world_size[] = "get_world_size";
static const char __pyx_k_preserve_index[] = "preserve_index";
static const char __pyx_k_rename_columns[] = "rename_columns";
static const char __pyx_k_zero_copy_only[] = "zero_copy_only";
static const char __pyx_k_CSVWriteOptions[] = "CSVWriteOptions";
static const char __pyx_k_axis1_join_func[] = "axis1_join_func";
static const char __pyx_k_indexing_type_2[] = "indexing_type";
static const char __pyx_k_op_column_names[] = "op_column_names";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_table_from_mask[] = "_table_from_mask";
static const char __pyx_k_Distributed_Join[] = "Distributed Join";
static const char __pyx_k_Operation_failed[] = "Operation failed: : ";
static const char __pyx_k_distributed_join[] = "distributed_join";
static const char __pyx_k_empty_initialize[] = "_empty_initialize";
static const char __pyx_k_formatted_tables[] = "formatted_tables";
static const char __pyx_k_is_pyarrow_table[] = "_is_pyarrow_table";
static const char __pyx_k_is_pycylon_table[] = "_is_pycylon_table";
static const char __pyx_k_new_column_names[] = "new_column_names";
static const char __pyx_k_operation_failed[] = " operation failed: : ";
static const char __pyx_k_range_calculator[] = "range_calculator";
static const char __pyx_k_table_compare_op[] = "table_compare_op";
static const char __pyx_k_EmptyTable___init[] = "EmptyTable.__init__";
static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static const char __pyx_k_csv_write_options[] = "csv_write_options";
static const char __pyx_k_distributed_union[] = "distributed_union";
static const char __pyx_k_Columns_not_passed[] = "Columns not passed.";
static const char __pyx_k_Repartition_failed[] = "Repartition failed ";
static const char __pyx_k_StrToJoinAlgorithm[] = "StrToJoinAlgorithm";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_distributed_concat[] = "distributed_concat";
static const char __pyx_k_is_pycylon_context[] = "_is_pycylon_context";
static const char __pyx_k_operation_failed_2[] = " operation failed : ";
static const char __pyx_k_pycylon_data_table[] = "pycylon.data.table";
static const char __pyx_k_rows_per_partition[] = "rows_per_partition";
static const char __pyx_k_AggregationOpString[] = "AggregationOpString";
static const char __pyx_k_pycylon_ctx_context[] = "pycylon.ctx.context";
static const char __pyx_k_Table_drop_line_1875[] = "Table.drop (line 1875)";
static const char __pyx_k_Table_isna_line_2019[] = "Table.isna (line 2019)";
static const char __pyx_k_Unknown_groupby_type[] = "Unknown groupby type ";
static const char __pyx_k_distributed_subtract[] = "distributed_subtract";
static const char __pyx_k_Head_operation_failed[] = "Head operation failed : ";
static const char __pyx_k_Table_equals_line_789[] = "Table.equals (line 789)";
static const char __pyx_k_Table_notna_line_2066[] = "Table.notna (line 2066)";
static const char __pyx_k_Table_unique_line_671[] = "Table.unique (line 671)";
static const char __pyx_k_Table_where_line_1943[] = "Table.where (line 1943)";
static const char __pyx_k_distributed_intersect[] = "distributed_intersect";
static const char __pyx_k_pycylon_common_status[] = "pycylon.common.status";
static const char __pyx_k_Equal_operation_failed[] = "Equal operation failed ";
static const char __pyx_k_Table___eq___line_1416[] = "Table.__eq__ (line 1416)";
static const char __pyx_k_Table___ge___line_1588[] = "Table.__ge__ (line 1588)";
static const char __pyx_k_Table___gt___line_1520[] = "Table.__gt__ (line 1520)";
static const char __pyx_k_Table___le___line_1554[] = "Table.__le__ (line 1554)";
static const char __pyx_k_Table___lt___line_1486[] = "Table.__lt__ (line 1486)";
static const char __pyx_k_Table___ne___line_1452[] = "Table.__ne__ (line 1452)";
static const char __pyx_k_Table___or___line_1623[] = "Table.__or__ (line 1623)";
static const char __pyx_k_Table_astype_line_2639[] = "Table.astype (line 2639)";
static const char __pyx_k_Table_dropna_line_2367[] = "Table.dropna (line 2367)";
static const char __pyx_k_Table_fillna_line_1911[] = "Table.fillna (line 1911)";
static const char __pyx_k_Table_isnull_line_1994[] = "Table.isnull (line 1994)";
static const char __pyx_k_Table_rename_line_2088[] = "Table.rename (line 2088)";
static const char __pyx_k_Table_to_csv_line_1114[] = "Table.to_csv (line 1114)";
static const char __pyx_k_process_index_by_value[] = "process_index_by_value";
static const char __pyx_k_pycylon_data_table_pyx[] = "pycylon/data/table.pyx";
static const char __pyx_k_Table___add___line_1741[] = "Table.__add__ (line 1741)";
static const char __pyx_k_Table___and___line_1657[] = "Table.__and__ (line 1657)";
static const char __pyx_k_Table___mul___line_1795[] = "Table.__mul__ (line 1795)";
static const char __pyx_k_Table___neg___line_1716[] = "Table.__neg__ (line 1716)";
static const char __pyx_k_Table___sub___line_1768[] = "Table.__sub__ (line 1768)";
static const char __pyx_k_Table_notnull_line_2042[] = "Table.notnull (line 2042)";
static const char __pyx_k_Unique_operation_failed[] = "Unique operation failed ";
static const char __pyx_k_get_join_column_indices[] = "_get_join_column_indices";
static const char __pyx_k_pycylon_data_aggregates[] = "pycylon.data.aggregates";
static const char __pyx_k_pycylon_util_type_utils[] = "pycylon.util.type_utils";
static const char __pyx_k_Groupby_operation_failed[] = "Groupby operation failed ";
static const char __pyx_k_Project_operation_failed[] = "Project operation failed : ";
static const char __pyx_k_Shuffle_operation_failed[] = "Shuffle operation failed : ";
static const char __pyx_k_Table_applymap_line_2445[] = "Table.applymap (line 2445)";
static const char __pyx_k_Table_couldn_t_be_sorted[] = "Table couldn't be sorted: ";
static const char __pyx_k_Table_from_list_line_972[] = "Table.from_list (line 972)";
static const char __pyx_k_is_column_indices_viable[] = "_is_column_indices_viable";
static const char __pyx_k_pycylon_indexing_cyindex[] = "pycylon.indexing.cyindex";
static const char __pyx_k_receive_build_rank_order[] = "receive_build_rank_order";
static const char __pyx_k_Table_from_arrow_line_911[] = "Table.from_arrow (line 911)";
static const char __pyx_k_Table_from_numpy_line_948[] = "Table.from_numpy (line 948)";
static const char __pyx_k_Table_set_index_line_2249[] = "Table.set_index (line 2249)";
static const char __pyx_k_Tables_couldn_t_be_merged[] = "Tables couldn't be merged: ";
static const char __pyx_k_check_column_names_viable[] = "_check_column_names_viable";
static const char __pyx_k_column_must_be_str_or_int[] = "column must be str or int";
static const char __pyx_k_Available_hash_mapred_hash[] = ". Available [hash, mapred_hash]";
static const char __pyx_k_Table___invert___line_1691[] = "Table.__invert__ (line 1691)";
static const char __pyx_k_Table_add_prefix_line_2135[] = "Table.add_prefix (line 2135)";
static const char __pyx_k_Table_add_suffix_line_2164[] = "Table.add_suffix (line 2164)";
static const char __pyx_k_pycylon_common_join_config[] = "pycylon.common.join_config";
static const char __pyx_k_Not_Supported_index_pattern[] = "Not Supported index pattern";
static const char __pyx_k_Table___getitem___line_1232[] = "Table.__getitem__ (line 1232)";
static const char __pyx_k_Table___setitem___line_1359[] = "Table.__setitem__ (line 1359)";
static const char __pyx_k_Table___truediv___line_1822[] = "Table.__truediv__ (line 1822)";
static const char __pyx_k_Table_from_pandas_line_1024[] = "Table.from_pandas (line 1024)";
static const char __pyx_k_Table_from_pydict_line_1001[] = "Table.from_pydict (line 1001)";
static const char __pyx_k_Table_loc___get___line_2496[] = "Table.loc.__get__ (line 2496)";
static const char __pyx_k_Table_reset_index_line_2336[] = "Table.reset_index (line 2336)";
static const char __pyx_k_does_not_exist_in_the_table[] = " does not exist in the table";
static const char __pyx_k_pycylon_io_csv_write_config[] = "pycylon.io.csv_write_config";
static const char __pyx_k_EmptyTable__empty_initialize[] = "EmptyTable._empty_initialize";
static const char __pyx_k_Invalid_object_expected_List[] = "Invalid object, expected List";
static const char __pyx_k_Table_iloc___get___line_2528[] = "Table.iloc.__get__ (line 2528)";
static const char __pyx_k_Unsupported_aggregation_type[] = "Unsupported aggregation type ";
static const char __pyx_k_pycylon_indexing_index_utils[] = "pycylon.indexing.index_utils";
static const char __pyx_k_Hash_columns_are_not_provided[] = "Hash columns are not provided";
static const char __pyx_k_Invalid_object_expected_range[] = "Invalid object, expected range";
static const char __pyx_k_Table_index___get___line_2236[] = "Table.index.__get__ (line 2236)";
static const char __pyx_k_Does_a_distributed_sort_on_the[] = "\n        Does a distributed sort on the table by re-partitioning the data to maintain the sort\n        order across all processes\n        Args:\n            sort_column: str or int\n            sort_options: SortOption\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> from pycylon.data.table import SortOptions\n        >>> s = SortOptions(num_bins=0, num_samples=0)\n        >>> tb1.distributed_sort(order_by='use_id', ascending=True, sort_options=s)\n\n        ";
static const char __pyx_k_Element_wise_division_operator[] = "\n         Element-wise division operator for Table\n         Args:\n             other: scalar numeric\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb / 2\n               col-1  col-2  col-3\n            0    0.5    2.5    4.5\n            1    1.0    3.0    5.0\n            2    1.5    3.5    5.5\n            3    2.0    4.0    6.0\n         ";
static const char __pyx_k_Greater_than_or_equal_operator[] = "\n        Greater than or equal operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n\n        >>> tb3 = tb['col-1'] >= 2\n               col-1\n            0  False\n            1   True\n            2   True\n            3   True\n\n        >>> tb4 = tb >= 2\n               col-1  col-2  col-3\n            0  False   True   True\n            1   True   True   True\n            2   True   True   True\n            3   True   True   True\n        ";
static const char __pyx_k_Lesser_than_operator_for_Table[] = "\n        Lesser than operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb3 = tb['col-1'] < 2\n               col-1\n            0   True\n            1  False\n            2  False\n            3  False\n\n        >>> tb4 = tb < 2\n               col-1  col-2  col-3\n            0   True  False  False\n            1  False  False  False\n            2  False  False  False\n            3  False  False  False\n        ";
static const char __pyx_k_Removes_duplicates_and_returns[] = "\n        Removes duplicates and returns a table with unique values\n        TODO: Fix the order of the records for time series.\n        Args:\n            columns: list of columns for which the unique operation applies\n            keep: 'first' or 'last', 'first' keeps the first record and drops the rest or the\n            opposite for 'last'.\n            inplace: default is False, if set to True, returns a copy of the unique table\n\n        Returns: PyCylon Table\n\n        Examples\n        ----------\n        >>> tb\n            a,b,c,d\n            4,5,6,1\n            1,2,3,2\n            7,8,9,3\n            10,11,12,4\n            15,20,21,5\n            10,11,24,6\n            27,23,24,7\n            1,2,13,8\n            4,5,21,9\n            39,23,24,10\n            10,11,13,11\n            123,11,12,12\n            25,13,12,13\n            30,21,22,14\n            35,1,2,15\n\n        >>> tb.unique(columns=['a', 'b'], keep='first')\n            25,13,12,13\n            39,23,24,10\n            15,20,21,5\n            35,1,2,15\n            10,11,12,4\n            7,8,9,3\n            30,21,22,14\n            123,11,12,12\n            1,2,3,2\n            27,23,24,7\n            4,5,6,1\n        ";
static const char __pyx_k_This_method_allows_to_retrieve[] = "\n        This method allows to retrieve a subset of a Table by means of a key\n        Args:\n            key: a key can be the following\n                 1. slice i.e table[1:5], rows 1:5\n                 2. int i.e a row index\n                 3. str i.e extract the data column-wise by column-name\n                 4. List of columns are extracted\n                 5. PyCylon Table\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> ctx: CylonContext = CylonContext(config=None, distributed=False)\n        >>> data = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n        >>> columns = ['col-1', 'col-2', 'col-3']\n\n        >>> tb: Table = Table.from_list(ctx, columns, data)\n\n        >>> tb1 = tb[1:3]\n            col-1  col-2  col-3\n                0      2      6     10\n                1      3      7     11\n                2      4      8     12\n\n        >>> tb2 = tb['col-1']\n               col-1\n            0      1\n            1      2\n            2      3\n            3      4\n\n        >>> tb3 = tb[['col-1', 'col-2']]\n               col-1  col-2\n            0      1      5\n            1      2      6\n            2      3      7\n            3      4      8\n\n        >>> tb4 = tb > 3\n                 col-1  col-2  col-3\n            0    False   True   True\n            1    False   True   True\n            2    False   True   True\n            3     True   True   True\n\n        >>> tb5 = tb[tb4]\n                col-1  col-2  col-3\n            0    NaN      5      9\n            1    NaN      6     10\n            2    NaN      7     11\n            3    4.0      8     12\n\n        >>> tb8 = tb['col-1'] > 2\n               col-1  col-2  col-3\n            0      3      7     11\n            1      4      8     12\n\n        ";
static const char __pyx_k_Add_operator_for_Table_Args_oth[] = "\n         Add operator for Table\n         Args:\n             other: scalar numeric\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb + 2\n               col-1  col-2  col-3\n            0      3      7     11\n            1      4      8     12\n            2      5      9     13\n            3      6     10     14\n         ";
static const char __pyx_k_Adding_a_prefix_to_column_names[] = "\n        Adding a prefix to column names\n        Args:\n            prefix: str\n\n        Returns: PyCylon Table with prefix updated\n\n        Examples\n        --------\n\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.add_prefix('old_')\n               old_c1  old_c2  old_c3\n            0       1       5       9\n            1       2       6      10\n            2       3       7      11\n            3       4       8      12\n\n        ";
static const char __pyx_k_And_operator_for_Table_Args_oth[] = "\n        And operator for Table\n        Args:\n            other: PyCylon Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb1\n               col-1  col-2\n            0  False   True\n            1   True   True\n            2  False  False\n            3   True  False\n\n        >>> tb2\n                col-1  col-2\n            0   True  False\n            1   True   True\n            2  False  False\n            3  False   True\n\n        >>> tb_or = tb1 & tb2\n               col-1  col-2\n            0  False  False\n            1   True   True\n            2  False  False\n            3  False  False\n        ";
static const char __pyx_k_Applies_an_element_wise_map_fun[] = "\n        Applies an element-wise map function\n        Args:\n            func: lambda or a map function\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n                     c1       c2\n            0     Rayan  Cameron\n            1  Reynolds   Selena\n            2      Jack    Roger\n            3       Mat   Murphy\n\n        >>> tb.applymap(lambda x: \"Hello, \" + x)\n                            c1              c2\n            0     Hello, Rayan  Hello, Cameron\n            1  Hello, Reynolds   Hello, Selena\n            2      Hello, Jack    Hello, Roger\n            3       Hello, Mat   Hello, Murphy\n\n        ";
static const char __pyx_k_Check_for_not_applicable_values[] = "\n        Check for not applicable values and returns a bool Table\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.isna()\n                col-1  col-2  col-3\n            0  False  False  False\n            1   True  False  False\n            2  False   True  False\n            3  False  False   True\n        ";
static const char __pyx_k_Check_the_not_null_values_and_r[] = "\n        Check the not null values and returns a bool Table\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.notnull()\n               col-1  col-2  col-3\n            0   True   True   True\n            1  False   True   True\n            2   True  False   True\n            3   True   True  False\n        ";
static const char __pyx_k_Checks_for_not_NA_values_and_re[] = "\n        Checks for not NA values and returns a bool Table\n        Returns: PyCylon Table\n\n        >>> tb\n                col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.notna()\n               col-1  col-2  col-3\n            0   True   True   True\n            1  False   True   True\n            2   True  False   True\n            3   True   True  False\n        ";
static const char __pyx_k_Checks_for_null_elements_and_re[] = "\n        Checks for null elements and returns a bool Table\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.isnull()\n                col-1  col-2  col-3\n            0  False  False  False\n            1   True  False  False\n            2  False   True  False\n            3  False  False   True\n\n        ";
static const char __pyx_k_Creating_a_PyCylon_table_from_P[] = "\n        Creating a PyCylon table from PyArrow Table\n        Args:\n            context: pycylon.CylonContext\n            pyarrow_table: PyArrow Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> atb\n            pyarrow.Table\n            col-1: int64\n            col-2: int64\n            col-3: int64\n\n        >>> Table.from_arrow(ctx, atb)\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static const char __pyx_k_Creating_a_PyCylon_table_from_a[] = "\n        Creating a PyCylon table from a list\n        Args:\n            context: pycylon.CylonContext\n            col_names: Column names as a List[str]\n            data_list: data as a List of List, (List per column)\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> Table.from_list(ctx, ['col-1', 'col-2', 'col-3'], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static const char __pyx_k_Creating_a_PyCylon_table_from_n[] = "\n        Creating a PyCylon table from numpy arrays\n        Args:\n            context: pycylon.CylonContext\n            col_names: column names as a List\n            ar_list: Numpy ndarrays as a list (one 1D array per column)\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> Table.from_numpy(ctx, ['c1', 'c2', 'c3'], [np.array([1, 2, 3, 4]), np.array([5, 6, 7, 8]), np.array([9, 10, 11, 12])])\n               c1  c2  c3\n            0   1   5   9\n            1   2   6  10\n            2   3   7  11\n            3   4   8  12\n        ";
static const char __pyx_k_Creating_a_csv_file_with_PyCylo[] = "\n        Creating a csv file with PyCylon table data\n        Args:\n            path: path to file\n            csv_write_options: pycylon.io.CSVWriteOptions\n\n        Returns: None\n\n        Examples\n        --------\n        >>> from pycylon.io import CSVWriteOptions\n        >>> csv_write_options = CSVWriteOptions().with_delimiter(',')\n        >>> tb.to_csv('/tmp/data.csv', csv_write_options)\n\n\n        ";
static const char __pyx_k_Determine_whether_two_tables_ar[] = "\n        Determine whether two tables are equal.\n        Args:\n            table: the other table\n            ordered: whether we have to maintain the original order when \n            comparing two tables\n\n        Returns: boolean\n\n        Examples\n        ----------\n        >>> tb1\n            1,2\n            1,2\n            3,4\n            5,6\n\n        >>> tb2\n            1,2\n            1,2\n            5,6\n            3,4\n\n        >>> tb1.equals(tb2)\n            False\n        \n        >>> tb1.equals(tb2, false)\n            True\n        ";
static const char __pyx_k_Drop_not_applicable_values_from[] = "\n        Drop not applicable values from a Table\n        Args:\n            axis: 0 for column and 1 for row and only do dropping on the specified axis\n            how: any or all, any refers to drop if any value is NA and drop only if all values\n            are NA in the considered axis\n            inplace: do the operation on the existing Table itself when set to True, the default\n            is False and it produces a new Table with the drop update\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0      5    9.0\n            1    NaN      6   10.0\n            2    3.0      7   11.0\n            3    4.0      8    NaN\n\n        >>> tb_na.dropna(how='any')\n               col-2\n            0      5\n            1      6\n            2      7\n            3      8\n\n        >>> tb_na.dropna(how='all')\n               col-1  col-2  col-3\n            0    1.0      5    9.0\n            1    NaN      6   10.0\n            2    3.0      7   11.0\n            3    4.0      8    NaN\n\n        >>> tb_na.dropna(axis=1, how='any')\n               col-1  col-2  col-3\n            0      1      5      9\n            1      3      7     11\n\n        >>> tb_na.dropna(axis=1, how='all')\n               col-1  col-2  col-3\n            0    1.0      5    9.0\n            1    NaN      6   10.0\n            2    3.0      7   11.0\n            3    4.0      8    NaN\n\n        >>> tb_na\n               col-1  col-2  col-3\n            0    1.0      5    9.0\n            1    NaN      6   10.0\n            2    3.0      7   11.0\n            3    4.0      8    NaN\n\n        >>> tb_na.dropna(axis=1, how='any', inplace=True)\n               col-1  col-2  col-3\n            0      1      5      9\n            1      3      7     11\n\n        >>> tb_na\n               col-1  col-2  col-3\n            0      1      5      9\n            1      3      7     11\n        ";
static const char __pyx_k_Empty_Table_definition_required[] = "\n    Empty Table definition required in returning an Empty Table when an operation reduces a None\n    object after an operation on a Table. As a standard, we return an Empty Table to symbolize\n    this. This helps to validate an operation followed by this.\n    TODO: Add validity for checking Empty Table when executing ops\n    ";
static const char __pyx_k_Equal_operator_for_Table_Args_o[] = "\n        Equal operator for Table\n        Args:\n            other: can be a numeric scalar or a Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb['col-1'] == 2\n               col-1\n            0  False\n            1   True\n            2  False\n            3  False\n\n        >>> tb == 2\n               col-1  col-2  col-3\n            0  False  False  False\n            1   True  False  False\n            2  False  False  False\n            3  False  False  False\n\n        ";
static const char __pyx_k_Experimental_version_of_Where_o[] = "\n        Experimental version of Where operation.\n        Replace values where condition is False\n        Args:\n            condition: bool Table\n            other: Scalar\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.where(tb > 2)\n                col-1  col-2  col-3\n            0    NaN      5      9\n            1    NaN      6     10\n            2    3.0      7     11\n            3    4.0      8     12\n\n        >>> tb.where(tb > 2, 10)\n               col-1  col-2  col-3\n            0     10      5      9\n            1     10      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static const char __pyx_k_Fill_not_applicable_values_with[] = "\n        Fill not applicable values with a given value\n        Args:\n            fill_value: scalar\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.fillna(0)\n               col-1  col-2  col-3\n            0      1      5      9\n            1      0      6     10\n            2      3      0     11\n            3      4      8      0\n        ";
static const char __pyx_k_Greater_than_operator_for_Table[] = "\n        Greater than operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb3 = tb['col-1'] > 2\n                col-1\n            0  False\n            1  False\n            2   True\n            3   True\n\n        >>> tb4 = tb > 2\n               col-1  col-2  col-3\n            0  False   True   True\n            1  False   True   True\n            2   True   True   True\n            3   True   True   True\n        ";
static const char __pyx_k_Invert_operator_for_Table_Retur[] = "\n         Invert operator for Table\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n         >>> tb\n                col-1  col-2\n            0  False   True\n            1   True   True\n            2  False  False\n            3   True  False\n\n        >>> ~tb\n               col-1  col-2\n            0   True  False\n            1  False  False\n            2   True   True\n            3  False   True\n         ";
static const char __pyx_k_Lesser_than_or_equal_operator_f[] = "\n        Lesser than or equal operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb3 = tb['col-1'] <= 2\n                col-1\n            0   True\n            1   True\n            2  False\n            3  False\n\n        >>> tb4 = tb <= 2\n               col-1  col-2  col-3\n            0   True  False  False\n            1   True  False  False\n            2  False  False  False\n            3  False  False  False\n        ";
static const char __pyx_k_Multiply_operator_for_Table_Arg[] = "\n         Multiply operator for Table\n         Args:\n             other: scalar numeric\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb * 2\n               col-1  col-2  col-3\n            0      2     10     18\n            1      4     12     20\n            2      6     14     22\n            3      8     16     24\n         ";
static const char __pyx_k_Negation_operator_for_Table_Ret[] = "\n         Negation operator for Table\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n         >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n         >>> -tb\n               col-1  col-2  col-3\n            0     -1     -5     -9\n            1     -2     -6    -10\n            2     -3     -7    -11\n            3     -4     -8    -12\n         ";
static const char __pyx_k_Not_equal_operator_for_Table_Ar[] = "\n        Not equal operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb3 = tb['col-1'] != 2\n               col-1\n            0   True\n            1  False\n            2   True\n            3   True\n\n        >>> tb4 = tb != 2\n               col-1  col-2  col-3\n            0   True   True   True\n            1  False   True   True\n            2   True   True   True\n            3   True   True   True\n        ";
static const char __pyx_k_Or_operator_for_Table_Args_othe[] = "\n        Or operator for Table\n        Args:\n            other: PyCylon Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb1\n               col-1  col-2\n            0  False   True\n            1   True   True\n            2  False  False\n            3   True  False\n\n        >>> tb2\n                col-1  col-2\n            0   True  False\n            1   True   True\n            2  False  False\n            3  False   True\n\n        >>> tb_or = tb1 | tb2\n               col-1  col-2\n            0   True   True\n            1   True   True\n            2  False  False\n            3   True   True\n        ";
static const char __pyx_k_Provided_Column_Names_or_Column[] = "Provided Column Names or Column Indices not valid.";
static const char __pyx_k_Rename_a_Table_with_a_column_na[] = "\n        Rename a Table with a column name or column names\n        Args:\n            column_names: dictionary or full list of new column names\n\n        Returns: None\n\n        Examples\n        --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.rename({'col-1': 'col_1'})\n               col_1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.rename(['c1', 'c2', 'c3'])\n               c1  c2  c3\n            0   1   5   9\n            1   2   6  10\n            2   3   7  11\n            3   4   8  12\n        ";
static const char __pyx_k_Retrieve_index_if_exists_or_pro[] = "\n        Retrieve index if exists or provide a range index as default\n        Returns: Index object\n\n        Examples:\n\n        >>> tb.index\n            <pycylon.index.RangeIndex object at 0x7f58bde8e040>\n\n        ";
static const char __pyx_k_Set_Index_Operation_takes_place[] = "\n        Set Index\n        Operation takes place inplace.\n        Args:\n            key: pycylon.indexing.cyindex.BaseIndex\n\n        Returns: None\n\n        Examples\n        --------\n\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n\n        >>> tb.set_index(['a', 'b', 'c', 'd'])\n\n        >>> tb.index\n            <pycylon.indexing.cyindex.BaseIndex object at 0x7fa72c2b6ca0>\n\n        >>> tb.index.index_values\n            ['a', 'b', 'c', 'd']\n\n        >>> tb.set_index('col-1', IndexingSchema.LINEAR, True)\n\n               col-2  col-3\n            1      5      9\n            2      6     10\n            3      7     11\n            4      8     12\n        NOTE: indexing value is not exposed to print functions\n        >>> tb.index.index_values\n            [ 1, 2, 3, 4]\n        ";
static const char __pyx_k_Sets_values_for_a_existing_tabl[] = "\n        Sets values for a existing table by means of a column\n        Args:\n            key: (str) column-name\n            value: (Table) data as a single column table or a scalar\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n\n        >>> tb['col-3'] = Table.from_list(ctx, ['x'], [[90, 100, 110, 120]])\n               col-1  col-2  col-3\n            0      1      5     90\n            1      2      6    100\n            2      3      7    110\n            3      4      8    120\n\n        >>> tb['col-4'] = Table.from_list(ctx, ['x'], [[190, 1100, 1110, 1120]])\n                col-1  col-2  col-3  col-4\n            0      1      5     90    190\n            1      2      6    100   1100\n            2      3      7    110   1110\n            3      4      8    120   1120\n        ";
static const char __pyx_k_Subtract_operator_for_Table_Arg[] = "\n         Subtract operator for Table\n         Args:compute.add(self, other, 'numpy')\n             other: scalar numeric\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb - 2\n               col-1  col-2  col-3\n            0     -1      3      7\n            1      0      4      8\n            2      1      5      9\n            3      2      6     10\n         ";
static const char __pyx_k_Table_distributed_sort_line_463[] = "Table.distributed_sort (line 463)";
static const char __pyx_k_Tables_are_not_parsed_for_merge[] = "Tables are not parsed for merge";
static const char __pyx_k_This_cast_a_table_into_given_da[] = "\n        This cast a table into given data type\n        Args:\n            dtype: can be a dictionary or a data type\n            safe: bool  check for overflows or other unsafe conversions\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n                c2  c3\n            c1\n            1   20  33\n            2   30  43\n            3   40  53\n            4   50  63\n            5   51  73\n\n        >>> tb.astype(float)\n                  c2    c3\n            c1\n            1   20.0  33.0\n            2   30.0  43.0\n            3   40.0  53.0\n            4   50.0  63.0\n            5   51.0  73.0\n\n        >>> tb.astype({'c2': 'int32', 'c3': 'float64'})\n                c2    c3\n            c1\n            1   20  33.0\n            2   30  43.0\n            3   40  53.0\n            4   50  63.0\n            5   51  73.0\n\n\n        ";
static const char __pyx_k_cast_data_type_is_not_supported[] = "cast data type is not supported";
static const char __pyx_k_drop_a_column_or_list_of_column[] = "\n        drop a column or list of columns from a Table\n        Args:\n            column_names: List[str]\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.drop(['col-1'])\n               col-2  col-3\n            0      5      9\n            1      6     10\n            2      7     11\n            3      8     12\n        ";
static const char __pyx_k_loc_This_operator_finds_value_b[] = "\n        loc\n\n        This operator finds value by key\n\n        Examples\n        --------\n\n        >>> tb\n               col-2  col-3   col-4\n            1      5      9       1\n            2      6     10      12\n            3      7     11      15\n            4      8     12      21\n\n        >>> tb.loc[2:3, 'col-2']\n                col-2\n            2      6\n            3      7\n\n        >>> tb.loc[2:3, 'col-3':'col-4']\n               col-3   col-4\n            2     10      12\n            3     11      15\n\n        Returns: PyCylon Table\n\n        ";
static const char __pyx_k_reset_index_Here_the_existing_i[] = "\n        reset_index\n        Here the existing index can be removed and set back to table.\n        This operation takes place in place.\n        Args:\n            drop_index: bool, if True the column is dropped otherwise added to the table with the\n            column name \"index\"\n\n        Returns: None\n\n        Examples\n        --------\n\n        >>> tb\n                col-2  col-3\n            1      5      9\n            2      6     10\n            3      7     11\n            4      8     12\n\n        >>> tb.reset_index()\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static const char __pyx_k_resolve_column_index_from_colum[] = "_resolve_column_index_from_column_name";
static const char __pyx_k_resolve_join_column_indices_fro[] = "_resolve_join_column_indices_from_column_names";
static const char __pyx_k_Agg_column_must_be_either_column[] = "Agg column must be either column name (str) or column index (int)";
static const char __pyx_k_Agg_op_must_be_either_op_name_st[] = "Agg op must be either op name (str) or AggregationOp enum or a list of either of those";
static const char __pyx_k_Column_Names_count_doesn_t_match[] = "Column Names count doesn't match data columns count";
static const char __pyx_k_Column_name_doesn_t_exist_in_the[] = "Column name doesn't exist in the table";
static const char __pyx_k_Given_table_has_more_than_1_colu[] = "Given table has more than 1 columns";
static const char __pyx_k_Hash_columns_must_be_a_List_of_i[] = "Hash columns must be a List of integers or strings";
static const char __pyx_k_Heterogeneous_Cylon_Table_Detect[] = "Heterogeneous Cylon Table Detected!. Use Numpy operations with Caution.";
static const char __pyx_k_Index_column_must_be_either_colu[] = "Index column must be either column name (str) or column index (int)";
static const char __pyx_k_Input_Column_names_must_be_a_dic[] = "Input Column names must be a dictionary or list";
static const char __pyx_k_Invalid_column_list_it_must_be_c[] = "Invalid column list, it must be column names in string or column indices in int";
static const char __pyx_k_Not_Implemented___setitem___opti[] = "Not Implemented __setitem__ option for key Type ";
static const char __pyx_k_Removes_duplicates_and_returns_2[] = "\n        Removes duplicates and returns a table with unique values\n        TODO: Fix the order of the records for time series.\n        Args:\n            columns: list of columns for which the unique operation applies\n            inplace: default is False, if set to True, returns a copy of the unique table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb = tb.distributed_unique(['c1', 'c2', 'c3'])\n\n        ";
static const char __pyx_k_Table_couldn_t_be_converted_to_a[] = "Table couldn't be converted to a PyArrow Table : ";
static const char __pyx_k_Table_couldn_t_be_created_from_P[] = "Table couldn't be created from PyArrow Table: ";
static const char __pyx_k_Table_distributed_equals_line_82[] = "Table.distributed_equals (line 827)";
static const char __pyx_k_Table_distributed_unique_line_74[] = "Table.distributed_unique (line 746)";
static const char __pyx_k_Unsupported_Key_Type_in___getite[] = "Unsupported Key Type in __getitem__ ";
static const char __pyx_k_Unsupported_data_type_representa[] = "Unsupported data type representation";
static const char __pyx_k_Unsupported_format_for_ascending[] = "Unsupported format for ascending/descending order indication. Expected a boolean or a list of booleans";
static const char __pyx_k_Unsupported_relational_algebra_o[] = "Unsupported relational algebra operator: ";
static const char __pyx_k_Unsupported_type_used_to_specify[] = "Unsupported type used to specify the sort by columns. Expected column name or index";
static const char __pyx_k_agg_should_be_non_empty_and_dict[] = "agg should be non-empty and dict type";
static const char __pyx_k_columns_must_be_str_or_int_provi[] = "columns must be str or int, provided ";
static const char __pyx_k_kwargs_on_or_left_on_and_right_o[] = "kwargs 'on' or 'left_on' and 'right_on' must be provided";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_unknown_sampling_method_for_sort[] = "unknown sampling method for sorting: ";
static const char __pyx_k_Adding_a_prefix_to_column_names_2[] = "\n        Adding a prefix to column names\n        Args:\n            prefix: str\n\n        Returns: PyCylon Table with prefix updated\n\n        Examples\n        --------\n\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.add_suffix('_old')\n               c1_old  c2_old  c3_old\n            0       1       5       9\n            1       2       6      10\n            2       3       7      11\n            3       4       8      12\n\n        ";
static const char __pyx_k_Creating_a_PyCylon_table_from_P_2[] = "\n        Creating a PyCylon table from Pandas DataFrame\n        Args:\n            context: cylon.CylonContext\n            df: pd.DataFrame\n            preserve_index: keep indexes as same as in original DF\n            nthreads: number of threads for the operation\n            columns: column names, if updated\n            safe: safe operation\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> Table.from_pandas(ctx, df)\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static const char __pyx_k_Creating_a_PyCylon_table_from_a_2[] = "\n        Creating a PyCylon table from a dictionary\n        Args:\n            context: pycylon.CylonContext\n            dictionary: dict object with key as column names and values as a List\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> Table.from_pydict(ctx, {'col-1': [1, 2, 3, 4], 'col-2': [5, 6, 7, 8], 'col-3': [9, 10, 11, 12]})\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        ";
static const char __pyx_k_loc_This_operator_finds_value_b_2[] = "\n        loc\n\n        This operator finds value by position as an index (row index)\n\n        Examples\n        --------\n\n        >>> tb\n               col-2  col-3   col-4\n            1      5      9       1\n            2      6     10      12\n            3      7     11      15\n            4      8     12      21\n\n        >>> tb.iloc[1:3, 'col-2']\n                col-2\n            2      6\n            3      7\n\n\n        >>> tb.iloc[1:3, 'col-3':'col-4']\n               col-3   col-4\n            2     10      12\n            3     11      15\n\n        Returns: PyCylon Table\n\n        ";
static const char __pyx_k_kwargs_on_or_left_on_and_right_o_2[] = "kwargs 'on' or 'left_on' and 'right_on' must be type List and contain int type or str type and cannot be None";
static PyObject *__pyx_kp_u_Add_operator_for_Table_Args_oth;
static PyObject *__pyx_kp_u_Adding_a_prefix_to_column_names;
static PyObject *__pyx_kp_u_Adding_a_prefix_to_column_names_2;
static PyObject *__pyx_kp_u_Agg_column_must_be_either_column;
static PyObject *__pyx_kp_u_Agg_op_must_be_either_op_name_st;
static PyObject *__pyx_kp_u_Aggregate_op;
static PyObject *__pyx_n_s_AggregationOp;
static PyObject *__pyx_n_s_AggregationOpString;
static PyObject *__pyx_kp_u_And_operator_for_Table_Args_oth;
static PyObject *__pyx_kp_u_Applies_an_element_wise_map_fun;
static PyObject *__pyx_kp_u_Available_hash_mapred_hash;
static PyObject *__pyx_n_s_BaseArrowIndex;
static PyObject *__pyx_n_s_COUNT;
static PyObject *__pyx_n_s_CSVWriteOptions;
static PyObject *__pyx_kp_u_Check_for_not_applicable_values;
static PyObject *__pyx_kp_u_Check_the_not_null_values_and_r;
static PyObject *__pyx_kp_u_Checks_for_not_NA_values_and_re;
static PyObject *__pyx_kp_u_Checks_for_null_elements_and_re;
static PyObject *__pyx_kp_u_Column;
static PyObject *__pyx_kp_u_Column_Names_count_doesn_t_match;
static PyObject *__pyx_kp_u_Column_name_doesn_t_exist_in_the;
static PyObject *__pyx_kp_u_Columns_not_passed;
static PyObject *__pyx_kp_u_Creating_a_PyCylon_table_from_P;
static PyObject *__pyx_kp_u_Creating_a_PyCylon_table_from_P_2;
static PyObject *__pyx_kp_u_Creating_a_PyCylon_table_from_a;
static PyObject *__pyx_kp_u_Creating_a_PyCylon_table_from_a_2;
static PyObject *__pyx_kp_u_Creating_a_PyCylon_table_from_n;
static PyObject *__pyx_kp_u_Creating_a_csv_file_with_PyCylo;
static PyObject *__pyx_n_s_CylonContext;
static PyObject *__pyx_kp_u_Determine_whether_two_tables_ar;
static PyObject *__pyx_kp_u_Distributed_Join;
static PyObject *__pyx_kp_u_Does_a_distributed_sort_on_the;
static PyObject *__pyx_kp_u_Drop_not_applicable_values_from;
static PyObject *__pyx_kp_u_Element_wise_division_operator;
static PyObject *__pyx_n_s_EmptyTable;
static PyObject *__pyx_n_s_EmptyTable___init;
static PyObject *__pyx_n_s_EmptyTable__empty_initialize;
static PyObject *__pyx_kp_s_Empty_Table_definition_required;
static PyObject *__pyx_kp_u_Equal_operation_failed;
static PyObject *__pyx_kp_u_Equal_operator_for_Table_Args_o;
static PyObject *__pyx_kp_u_Experimental_version_of_Where_o;
static PyObject *__pyx_n_u_F;
static PyObject *__pyx_kp_u_Fill_not_applicable_values_with;
static PyObject *__pyx_kp_u_Given_table_has_more_than_1_colu;
static PyObject *__pyx_kp_u_Greater_than_operator_for_Table;
static PyObject *__pyx_kp_u_Greater_than_or_equal_operator;
static PyObject *__pyx_kp_u_Groupby_operation_failed;
static PyObject *__pyx_kp_u_Hash_columns_are_not_provided;
static PyObject *__pyx_kp_u_Hash_columns_must_be_a_List_of_i;
static PyObject *__pyx_kp_u_Head_operation_failed;
static PyObject *__pyx_kp_u_Heterogeneous_Cylon_Table_Detect;
static PyObject *__pyx_n_s_IndexUtil;
static PyObject *__pyx_kp_u_Index_column_must_be_either_colu;
static PyObject *__pyx_n_s_IndexingType;
static PyObject *__pyx_kp_u_Input_Column_names_must_be_a_dic;
static PyObject *__pyx_kp_u_Invalid_axis;
static PyObject *__pyx_kp_u_Invalid_column_list_it_must_be_c;
static PyObject *__pyx_kp_u_Invalid_object;
static PyObject *__pyx_kp_u_Invalid_object_expected_List;
static PyObject *__pyx_kp_u_Invalid_object_expected_range;
static PyObject *__pyx_kp_u_Invert_operator_for_Table_Retur;
static PyObject *__pyx_n_u_Join;
static PyObject *__pyx_n_s_JoinConfig;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_LINEAR;
static PyObject *__pyx_kp_u_Lesser_than_operator_for_Table;
static PyObject *__pyx_kp_u_Lesser_than_or_equal_operator_f;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_MAX;
static PyObject *__pyx_n_s_MIN;
static PyObject *__pyx_kp_u_Multiply_operator_for_Table_Arg;
static PyObject *__pyx_kp_u_Negation_operator_for_Table_Ret;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_kp_u_Not_Implemented___setitem___opti;
static PyObject *__pyx_kp_u_Not_Supported_index_pattern;
static PyObject *__pyx_kp_u_Not_equal_operator_for_Table_Ar;
static PyObject *__pyx_n_s_NumericIndex;
static PyObject *__pyx_kp_u_Operation_failed;
static PyObject *__pyx_kp_u_Or_operator_for_Table_Args_othe;
static PyObject *__pyx_kp_u_Project_operation_failed;
static PyObject *__pyx_kp_u_Provided_Column_Names_or_Column;
static PyObject *__pyx_n_s_PyLocIndexer;
static PyObject *__pyx_n_s_RANGE;
static PyObject *__pyx_n_s_RangeIndex;
static PyObject *__pyx_kp_u_Removes_duplicates_and_returns;
static PyObject *__pyx_kp_u_Removes_duplicates_and_returns_2;
static PyObject *__pyx_kp_u_Rename_a_Table_with_a_column_na;
static PyObject *__pyx_kp_u_Repartition_failed;
static PyObject *__pyx_kp_u_Retrieve_index_if_exists_or_pro;
static PyObject *__pyx_n_s_SUM;
static PyObject *__pyx_kp_u_Set_Index_Operation_takes_place;
static PyObject *__pyx_kp_u_Sets_values_for_a_existing_tabl;
static PyObject *__pyx_kp_u_Shuffle_operation_failed;
static PyObject *__pyx_n_s_SortOptions;
static PyObject *__pyx_n_s_Status;
static PyObject *__pyx_n_s_StrToJoinAlgorithm;
static PyObject *__pyx_n_s_StrToJoinType;
static PyObject *__pyx_kp_u_Subtract_operator_for_Table_Arg;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_Table;
static PyObject *__pyx_kp_u_Table___add___line_1741;
static PyObject *__pyx_kp_u_Table___and___line_1657;
static PyObject *__pyx_kp_u_Table___eq___line_1416;
static PyObject *__pyx_kp_u_Table___ge___line_1588;
static PyObject *__pyx_kp_u_Table___getitem___line_1232;
static PyObject *__pyx_kp_u_Table___gt___line_1520;
static PyObject *__pyx_kp_u_Table___invert___line_1691;
static PyObject *__pyx_kp_u_Table___le___line_1554;
static PyObject *__pyx_kp_u_Table___lt___line_1486;
static PyObject *__pyx_kp_u_Table___mul___line_1795;
static PyObject *__pyx_kp_u_Table___ne___line_1452;
static PyObject *__pyx_kp_u_Table___neg___line_1716;
static PyObject *__pyx_kp_u_Table___or___line_1623;
static PyObject *__pyx_kp_u_Table___setitem___line_1359;
static PyObject *__pyx_kp_u_Table___sub___line_1768;
static PyObject *__pyx_kp_u_Table___truediv___line_1822;
static PyObject *__pyx_kp_u_Table_add_prefix_line_2135;
static PyObject *__pyx_kp_u_Table_add_suffix_line_2164;
static PyObject *__pyx_kp_u_Table_applymap_line_2445;
static PyObject *__pyx_kp_u_Table_astype_line_2639;
static PyObject *__pyx_kp_u_Table_couldn_t_be_converted_to_a;
static PyObject *__pyx_kp_u_Table_couldn_t_be_created_from_P;
static PyObject *__pyx_kp_u_Table_couldn_t_be_sorted;
static PyObject *__pyx_kp_u_Table_distributed_equals_line_82;
static PyObject *__pyx_kp_u_Table_distributed_sort_line_463;
static PyObject *__pyx_kp_u_Table_distributed_unique_line_74;
static PyObject *__pyx_kp_u_Table_drop_line_1875;
static PyObject *__pyx_kp_u_Table_dropna_line_2367;
static PyObject *__pyx_kp_u_Table_equals_line_789;
static PyObject *__pyx_kp_u_Table_expected;
static PyObject *__pyx_kp_u_Table_fillna_line_1911;
static PyObject *__pyx_kp_u_Table_from_arrow_line_911;
static PyObject *__pyx_kp_u_Table_from_list_line_972;
static PyObject *__pyx_kp_u_Table_from_numpy_line_948;
static PyObject *__pyx_kp_u_Table_from_pandas_line_1024;
static PyObject *__pyx_kp_u_Table_from_pydict_line_1001;
static PyObject *__pyx_kp_u_Table_iloc___get___line_2528;
static PyObject *__pyx_kp_u_Table_index___get___line_2236;
static PyObject *__pyx_kp_u_Table_isna_line_2019;
static PyObject *__pyx_kp_u_Table_isnull_line_1994;
static PyObject *__pyx_n_s_Table_iterrows;
static PyObject *__pyx_kp_u_Table_loc___get___line_2496;
static PyObject *__pyx_kp_u_Table_notna_line_2066;
static PyObject *__pyx_kp_u_Table_notnull_line_2042;
static PyObject *__pyx_kp_u_Table_rename_line_2088;
static PyObject *__pyx_kp_u_Table_reset_index_line_2336;
static PyObject *__pyx_kp_u_Table_set_index_line_2249;
static PyObject *__pyx_kp_u_Table_to_csv_line_1114;
static PyObject *__pyx_kp_u_Table_unique_line_671;
static PyObject *__pyx_kp_u_Table_where_line_1943;
static PyObject *__pyx_kp_u_Tables_are_not_parsed_for_merge;
static PyObject *__pyx_kp_u_Tables_couldn_t_be_merged;
static PyObject *__pyx_kp_u_This_cast_a_table_into_given_da;
static PyObject *__pyx_kp_u_This_method_allows_to_retrieve;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Unique_operation_failed;
static PyObject *__pyx_kp_u_Unknown_groupby_type;
static PyObject *__pyx_kp_u_Unsupported_Key_Type_in___getite;
static PyObject *__pyx_kp_u_Unsupported_aggregation_type;
static PyObject *__pyx_kp_u_Unsupported_data_type_representa;
static PyObject *__pyx_kp_u_Unsupported_format_for_ascending;
static PyObject *__pyx_kp_u_Unsupported_relational_algebra_o;
static PyObject *__pyx_kp_u_Unsupported_type_used_to_specify;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__21;
static PyObject *__pyx_kp_u__22;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_agg;
static PyObject *__pyx_n_s_agg_op;
static PyObject *__pyx_kp_u_agg_should_be_non_empty_and_dict;
static PyObject *__pyx_n_s_algorithm;
static PyObject *__pyx_n_s_and;
static PyObject *__pyx_kp_u_and_value_type;
static PyObject *__pyx_n_u_any;
static PyObject *__pyx_n_s_append_column;
static PyObject *__pyx_n_s_ar_list;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_u_arrow;
static PyObject *__pyx_n_s_arw_table;
static PyObject *__pyx_n_s_as_py;
static PyObject *__pyx_n_s_ascending;
static PyObject *__pyx_n_s_ascontiguousarray;
static PyObject *__pyx_n_s_asfortranarray;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_axis1_join_func;
static PyObject *__pyx_n_s_cast;
static PyObject *__pyx_kp_u_cast_data_type_is_not_supported;
static PyObject *__pyx_n_s_check_column_names_viable;
static PyObject *__pyx_n_s_chunk;
static PyObject *__pyx_n_s_chunks;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cn_table;
static PyObject *__pyx_n_s_col1;
static PyObject *__pyx_n_s_col2;
static PyObject *__pyx_n_s_col_names;
static PyObject *__pyx_n_s_column;
static PyObject *__pyx_n_s_column_count;
static PyObject *__pyx_kp_u_column_must_be_str_or_int;
static PyObject *__pyx_n_s_column_names;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_kp_u_columns_must_be_str_or_int_provi;
static PyObject *__pyx_n_s_combine_chunks;
static PyObject *__pyx_n_s_compute;
static PyObject *__pyx_n_u_compute_engine;
static PyObject *__pyx_n_s_concat;
static PyObject *__pyx_n_s_concat_impl;
static PyObject *__pyx_n_s_condition;
static PyObject *__pyx_n_s_context;
static PyObject *__pyx_n_s_csv_write_options;
static PyObject *__pyx_n_s_ctables;
static PyObject *__pyx_n_s_ctx;
static PyObject *__pyx_n_s_curTable;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_data_list;
static PyObject *__pyx_n_s_df;
static PyObject *__pyx_n_s_dictionary;
static PyObject *__pyx_n_s_distributed_concat;
static PyObject *__pyx_n_u_distributed_intersect;
static PyObject *__pyx_n_u_distributed_join;
static PyObject *__pyx_n_u_distributed_subtract;
static PyObject *__pyx_n_u_distributed_union;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_kp_u_does_not_exist_in_the_table;
static PyObject *__pyx_n_s_drop;
static PyObject *__pyx_kp_u_drop_a_column_or_list_of_column;
static PyObject *__pyx_n_s_drop_index;
static PyObject *__pyx_n_s_drop_na;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_empty_data;
static PyObject *__pyx_n_s_empty_initialize;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eq;
static PyObject *__pyx_kp_u_expected_Table;
static PyObject *__pyx_kp_u_failed;
static PyObject *__pyx_n_s_fill_null;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_u_first;
static PyObject *__pyx_n_s_formatted_tables;
static PyObject *__pyx_n_s_from_arrays;
static PyObject *__pyx_n_s_from_arrow;
static PyObject *__pyx_n_s_from_list;
static PyObject *__pyx_n_s_from_numpy;
static PyObject *__pyx_n_s_from_pandas;
static PyObject *__pyx_n_s_from_pydict;
static PyObject *__pyx_n_s_full;
static PyObject *__pyx_n_s_ge;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_arrow_type;
static PyObject *__pyx_n_s_get_config;
static PyObject *__pyx_n_s_get_index;
static PyObject *__pyx_n_s_get_join_column_indices;
static PyObject *__pyx_n_s_get_world_size;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_groupby_type;
static PyObject *__pyx_n_s_gt;
static PyObject *__pyx_n_u_hash;
static PyObject *__pyx_n_s_hash_columns;
static PyObject *__pyx_n_s_how;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_u_iloc;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_index_2;
static PyObject *__pyx_n_s_indexing_type;
static PyObject *__pyx_n_s_indexing_type_2;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_u_initial;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_n_u_inner;
static PyObject *__pyx_n_s_inplace;
static PyObject *__pyx_n_u_intersect;
static PyObject *__pyx_n_s_invert;
static PyObject *__pyx_n_s_is_column_indices_viable;
static PyObject *__pyx_n_s_is_in;
static PyObject *__pyx_n_s_is_null;
static PyObject *__pyx_n_s_is_pyarrow_table;
static PyObject *__pyx_n_s_is_pycylon_context;
static PyObject *__pyx_n_s_is_pycylon_table;
static PyObject *__pyx_n_s_isscalar;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itercolumns;
static PyObject *__pyx_n_s_iterrows;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_u_join;
static PyObject *__pyx_n_s_join_type;
static PyObject *__pyx_n_s_keep;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_kp_u_kwargs_on_or_left_on_and_right_o;
static PyObject *__pyx_kp_u_kwargs_on_or_left_on_and_right_o_2;
static PyObject *__pyx_n_s_le;
static PyObject *__pyx_n_s_left_cols;
static PyObject *__pyx_n_s_left_on;
static PyObject *__pyx_n_u_left_on;
static PyObject *__pyx_n_u_left_prefix;
static PyObject *__pyx_n_u_loc;
static PyObject *__pyx_kp_u_loc_This_operator_finds_value_b;
static PyObject *__pyx_kp_u_loc_This_operator_finds_value_b_2;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_lt;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_u_mapred_hash;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_math_op;
static PyObject *__pyx_n_s_merge;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mul;
static PyObject *__pyx_kp_u_must_0_or_1;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_names;
static PyObject *__pyx_n_s_nan;
static PyObject *__pyx_n_s_ne;
static PyObject *__pyx_n_s_neg;
static PyObject *__pyx_n_s_new_column_names;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nthreads;
static PyObject *__pyx_n_s_num_bins;
static PyObject *__pyx_n_s_num_samples;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_u_on;
static PyObject *__pyx_n_s_op;
static PyObject *__pyx_n_s_op_column_names;
static PyObject *__pyx_kp_u_operation_failed;
static PyObject *__pyx_kp_u_operation_failed_2;
static PyObject *__pyx_n_s_operator;
static PyObject *__pyx_n_s_or;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_order_by;
static PyObject *__pyx_n_s_ordered;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_pa;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_preserve_index;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_process_index_by_value;
static PyObject *__pyx_n_s_pyarrow;
static PyObject *__pyx_n_s_pyarrow_table;
static PyObject *__pyx_n_s_pycylon_common_join_config;
static PyObject *__pyx_n_s_pycylon_common_status;
static PyObject *__pyx_n_s_pycylon_ctx_context;
static PyObject *__pyx_n_s_pycylon_data;
static PyObject *__pyx_n_s_pycylon_data_aggregates;
static PyObject *__pyx_n_s_pycylon_data_table;
static PyObject *__pyx_kp_s_pycylon_data_table_pyx;
static PyObject *__pyx_n_s_pycylon_index;
static PyObject *__pyx_n_s_pycylon_indexing_cyindex;
static PyObject *__pyx_n_s_pycylon_indexing_index_utils;
static PyObject *__pyx_n_s_pycylon_io_csv_write_config;
static PyObject *__pyx_n_s_pycylon_table;
static PyObject *__pyx_n_s_pycylon_util_type_utils;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_range_calculator;
static PyObject *__pyx_n_s_receive_build_rank_order;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_u_regular;
static PyObject *__pyx_n_s_rename_columns;
static PyObject *__pyx_n_s_res_table;
static PyObject *__pyx_n_s_reset_index;
static PyObject *__pyx_kp_u_reset_index_Here_the_existing_i;
static PyObject *__pyx_n_s_resolve_column_index_from_colum;
static PyObject *__pyx_n_s_resolve_join_column_indices_fro;
static PyObject *__pyx_n_s_right_cols;
static PyObject *__pyx_n_s_right_on;
static PyObject *__pyx_n_u_right_on;
static PyObject *__pyx_n_u_right_prefix;
static PyObject *__pyx_n_s_row1;
static PyObject *__pyx_n_s_row2;
static PyObject *__pyx_n_s_row_count;
static PyObject *__pyx_n_s_row_limit;
static PyObject *__pyx_n_s_rows_per_partition;
static PyObject *__pyx_n_s_safe;
static PyObject *__pyx_n_s_sampling;
static PyObject *__pyx_n_s_schema;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set;
static PyObject *__pyx_n_s_set_column;
static PyObject *__pyx_n_s_set_index;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_skip_null;
static PyObject *__pyx_n_s_slice;
static PyObject *__pyx_n_u_sort;
static PyObject *__pyx_n_s_sort_options;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_u_subtract;
static PyObject *__pyx_n_s_table;
static PyObject *__pyx_n_s_table_compare_op;
static PyObject *__pyx_n_s_table_from_mask;
static PyObject *__pyx_n_s_tables;
static PyObject *__pyx_n_s_tb1;
static PyObject *__pyx_n_s_tb_idx;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_to_arrow;
static PyObject *__pyx_n_s_to_batches;
static PyObject *__pyx_n_s_to_numpy;
static PyObject *__pyx_n_s_to_pandas;
static PyObject *__pyx_n_s_to_pydict;
static PyObject *__pyx_n_s_to_string;
static PyObject *__pyx_n_s_tolist;
static PyObject *__pyx_n_s_truediv;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_u_union;
static PyObject *__pyx_kp_u_unknown_sampling_method_for_sort;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_with_index;
static PyObject *__pyx_n_s_with_type;
static PyObject *__pyx_n_s_writable;
static PyObject *__pyx_n_s_zero_copy_only;
static PyObject *__pyx_n_s_zip;
static int __pyx_pf_7pycylon_4data_5table_5Table___init__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_pyarrow_table, PyObject *__pyx_v_context); /* proto */
static int __pyx_pf_7pycylon_4data_5table_5Table_2__cinit__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_pyarrow_table, PyObject *__pyx_v_context, CYTHON_UNUSED PyObject *__pyx_v_columns); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_4initialize(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_pyarrow_table, PyObject *__pyx_v_context); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_6_is_pyarrow_table(PyObject *__pyx_v_pyarrow_table); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_8_is_pycylon_table(PyObject *__pyx_v_pycylon_table); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_10_is_pycylon_context(PyObject *__pyx_v_context); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_12show(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_row1, PyObject *__pyx_v_row2, PyObject *__pyx_v_col1, PyObject *__pyx_v_col2); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_14sort(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_order_by, PyObject *__pyx_v_ascending); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_16retain_memory(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_retain); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_18is_retain(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_20merge(PyObject *__pyx_v_tables); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_22_resolve_column_index_from_column_name(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_name); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_12column_count___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_9row_count___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_7context___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_24_resolve_join_column_indices_from_column_names(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_names, PyObject *__pyx_v_op_column_names); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_26_get_join_column_indices(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_28_is_column_indices_viable(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_left_cols, PyObject *__pyx_v_right_cols); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_30_check_column_names_viable(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_left_cols, PyObject *__pyx_v_right_cols); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_32join(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_join_type, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_kwargs); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_34distributed_join(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_join_type, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_kwargs); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_36union(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_38distributed_union(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_40subtract(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_42distributed_subtract(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_44intersect(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_46distributed_intersect(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_48project(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_columns); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_50distributed_sort(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_order_by, PyObject *__pyx_v_ascending, struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_sort_options); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_52shuffle(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_hash_columns); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_54_agg_op(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_56sum(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_58count(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_60min(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_62max(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_64groupby(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_agg, PyObject *__pyx_v_groupby_type); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_66unique(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_columns, PyObject *__pyx_v_keep, PyObject *__pyx_v_inplace); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_68distributed_unique(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_columns, PyObject *__pyx_v_inplace); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_70equals(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_ordered); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_72distributed_equals(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_ordered); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_74repartition(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_rows_per_partition, PyObject *__pyx_v_receive_build_rank_order); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_76evenly_partition(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_78from_arrow(PyObject *__pyx_v_context, PyObject *__pyx_v_pyarrow_table); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_80from_numpy(PyObject *__pyx_v_context, PyObject *__pyx_v_col_names, PyObject *__pyx_v_ar_list); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_82from_list(PyObject *__pyx_v_context, PyObject *__pyx_v_col_names, PyObject *__pyx_v_data_list); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_84from_pydict(PyObject *__pyx_v_context, PyObject *__pyx_v_dictionary); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_86from_pandas(PyObject *__pyx_v_context, PyObject *__pyx_v_df, PyObject *__pyx_v_preserve_index, PyObject *__pyx_v_nthreads, PyObject *__pyx_v_columns, PyObject *__pyx_v_safe); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_88to_pandas(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_90to_numpy(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_order, PyObject *__pyx_v_zero_copy_only, PyObject *__pyx_v_writable); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_92to_pydict(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_with_index); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_94to_csv(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_csv_write_options); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_96to_arrow(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_12column_names___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_5shape___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_98filter(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_statement); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_100_table_from_mask(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_mask); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_102__getitem__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7pycylon_4data_5table_5Table_104__setitem__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_106__eq__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_108__ne__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_110__lt__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_112__gt__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_114__le__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_116__ge__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_118__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_120__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_122__invert__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_124__neg__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_126__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_128__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_130__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_132__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_134__repr__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_136to_string(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_row_limit); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_138drop(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_names, PyObject *__pyx_v_inplace); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_140fillna(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_fill_value); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_142where(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_condition, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_144isnull(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_146isna(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_148notnull(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_150notna(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_152rename(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_names); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_154add_prefix(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_prefix); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_156add_suffix(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_suffix); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_158_is_index_and_range_validity(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index_range); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_160_is_index_list_and_valid(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_162_is_index_list_of_columns(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_164_get_index_list_from_columns(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_166_is_index_str_and_valid(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_168_get_column_by_name(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_name); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_5index___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_170set_index(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_indexing_type, PyObject *__pyx_v_drop); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_172reset_index(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_drop_index); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_174dropna(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_how, PyObject *__pyx_v_inplace); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_176isin(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_skip_null); /* proto */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_178applymap(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_func); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_180get_index(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_13indexing_type___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static int __pyx_pf_7pycylon_4data_5table_5Table_13indexing_type_2__set__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_3loc___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_4iloc___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_182concat(PyObject *__pyx_v_tables, PyObject *__pyx_v_axis, PyObject *__pyx_v_join, PyObject *__pyx_v_algorithm); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_184distributed_concat(PyObject *__pyx_v_tables, PyObject *__pyx_v_axis, PyObject *__pyx_v_join, PyObject *__pyx_v_algorithm); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_186iterrows(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_189astype(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_dtype, PyObject *__pyx_v_safe); /* proto */
static Py_ssize_t __pyx_pf_7pycylon_4data_5table_5Table_191__len__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_193__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_195__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table__concat_impl(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tables, PyObject *__pyx_v_axis, PyObject *__pyx_v_join, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_axis1_join_func); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_10EmptyTable___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_context, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_10EmptyTable_2_empty_initialize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_7pycylon_4data_5table_11SortOptions___cinit__(struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_self, PyObject *__pyx_v_num_bins, PyObject *__pyx_v_num_samples, PyObject *__pyx_v_sampling); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_11SortOptions_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pycylon_4data_5table_11SortOptions_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7pycylon_4data_5table_SortOptions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pycylon_4data_5table_Table(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pycylon_4data_5table___pyx_scope_struct__iterrows(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__28;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
/* Late includes */

/* "pycylon/data/table.pyx":88
 * 
 * cdef class Table:
 *     def __init__(self, pyarrow_table=None, context=None):             # <<<<<<<<<<<<<<
 *         self.initialize(pyarrow_table, context)
 *         self._index = None
 */

/* Python wrapper */
static int __pyx_pw_7pycylon_4data_5table_5Table_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pycylon_4data_5table_5Table_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pyarrow_table = 0;
  PyObject *__pyx_v_context = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyarrow_table,&__pyx_n_s_context,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyarrow_table);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 88, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pyarrow_table = values[0];
    __pyx_v_context = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table___init__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_pyarrow_table, __pyx_v_context);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pycylon_4data_5table_5Table___init__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_pyarrow_table, PyObject *__pyx_v_context) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pycylon/data/table.pyx":89
 * cdef class Table:
 *     def __init__(self, pyarrow_table=None, context=None):
 *         self.initialize(pyarrow_table, context)             # <<<<<<<<<<<<<<
 *         self._index = None
 *         self._indexing_type = IndexingType.RANGE
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_pyarrow_table, __pyx_v_context};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_pyarrow_table, __pyx_v_context};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pyarrow_table);
    __Pyx_GIVEREF(__pyx_v_pyarrow_table);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_pyarrow_table);
    __Pyx_INCREF(__pyx_v_context);
    __Pyx_GIVEREF(__pyx_v_context);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_context);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":90
 *     def __init__(self, pyarrow_table=None, context=None):
 *         self.initialize(pyarrow_table, context)
 *         self._index = None             # <<<<<<<<<<<<<<
 *         self._indexing_type = IndexingType.RANGE
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index, Py_None) < 0) __PYX_ERR(0, 90, __pyx_L1_error)

  /* "pycylon/data/table.pyx":91
 *         self.initialize(pyarrow_table, context)
 *         self._index = None
 *         self._indexing_type = IndexingType.RANGE             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, pyarrow_table=None, context=None, columns=None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_IndexingType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_RANGE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_indexing_type, __pyx_t_2) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":88
 * 
 * cdef class Table:
 *     def __init__(self, pyarrow_table=None, context=None):             # <<<<<<<<<<<<<<
 *         self.initialize(pyarrow_table, context)
 *         self._index = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":93
 *         self._indexing_type = IndexingType.RANGE
 * 
 *     def __cinit__(self, pyarrow_table=None, context=None, columns=None):             # <<<<<<<<<<<<<<
 *         """
 *         PyClon constructor
 */

/* Python wrapper */
static int __pyx_pw_7pycylon_4data_5table_5Table_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pycylon_4data_5table_5Table_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pyarrow_table = 0;
  PyObject *__pyx_v_context = 0;
  CYTHON_UNUSED PyObject *__pyx_v_columns = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyarrow_table,&__pyx_n_s_context,&__pyx_n_s_columns,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyarrow_table);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 93, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pyarrow_table = values[0];
    __pyx_v_context = values[1];
    __pyx_v_columns = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 93, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_2__cinit__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_pyarrow_table, __pyx_v_context, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pycylon_4data_5table_5Table_2__cinit__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_pyarrow_table, PyObject *__pyx_v_context, CYTHON_UNUSED PyObject *__pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pycylon/data/table.pyx":100
 *         @param columns: columns TODO: add support
 *         """
 *         self.initialize(pyarrow_table, context)             # <<<<<<<<<<<<<<
 *         self._index = None
 *         self._indexing_type = IndexingType.RANGE
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_pyarrow_table, __pyx_v_context};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_pyarrow_table, __pyx_v_context};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pyarrow_table);
    __Pyx_GIVEREF(__pyx_v_pyarrow_table);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_pyarrow_table);
    __Pyx_INCREF(__pyx_v_context);
    __Pyx_GIVEREF(__pyx_v_context);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_context);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":101
 *         """
 *         self.initialize(pyarrow_table, context)
 *         self._index = None             # <<<<<<<<<<<<<<
 *         self._indexing_type = IndexingType.RANGE
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index, Py_None) < 0) __PYX_ERR(0, 101, __pyx_L1_error)

  /* "pycylon/data/table.pyx":102
 *         self.initialize(pyarrow_table, context)
 *         self._index = None
 *         self._indexing_type = IndexingType.RANGE             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, pyarrow_table=None, context=None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_IndexingType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_RANGE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_indexing_type, __pyx_t_2) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":93
 *         self._indexing_type = IndexingType.RANGE
 * 
 *     def __cinit__(self, pyarrow_table=None, context=None, columns=None):             # <<<<<<<<<<<<<<
 *         """
 *         PyClon constructor
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":104
 *         self._indexing_type = IndexingType.RANGE
 * 
 *     def initialize(self, pyarrow_table=None, context=None):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CArrowTable] c_arrow_tb_shd_ptr
 *         if self._is_pycylon_context(context) and self._is_pyarrow_table(pyarrow_table):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_4initialize[] = "Table.initialize(self, pyarrow_table=None, context=None)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pyarrow_table = 0;
  PyObject *__pyx_v_context = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyarrow_table,&__pyx_n_s_context,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyarrow_table);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pyarrow_table = values[0];
    __pyx_v_context = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_4initialize(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_pyarrow_table, __pyx_v_context);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_4initialize(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_pyarrow_table, PyObject *__pyx_v_context) {
  std::shared_ptr< arrow::Table>  __pyx_v_c_arrow_tb_shd_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::shared_ptr<cylon::Table>  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "pycylon/data/table.pyx":106
 *     def initialize(self, pyarrow_table=None, context=None):
 *         cdef shared_ptr[CArrowTable] c_arrow_tb_shd_ptr
 *         if self._is_pycylon_context(context) and self._is_pyarrow_table(pyarrow_table):             # <<<<<<<<<<<<<<
 *             c_arrow_tb_shd_ptr = pyarrow_unwrap_table(pyarrow_table)
 *             self.sp_context = pycylon_unwrap_context(context)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_pycylon_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_context) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_context);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_pyarrow_table); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_pyarrow_table) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_pyarrow_table);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":107
 *         cdef shared_ptr[CArrowTable] c_arrow_tb_shd_ptr
 *         if self._is_pycylon_context(context) and self._is_pyarrow_table(pyarrow_table):
 *             c_arrow_tb_shd_ptr = pyarrow_unwrap_table(pyarrow_table)             # <<<<<<<<<<<<<<
 *             self.sp_context = pycylon_unwrap_context(context)
 *             self.table_shd_ptr = make_shared[CTable](self.sp_context, c_arrow_tb_shd_ptr)
 */
    __pyx_v_c_arrow_tb_shd_ptr = __pyx_f_7pyarrow_3lib_pyarrow_unwrap_table(__pyx_v_pyarrow_table);

    /* "pycylon/data/table.pyx":108
 *         if self._is_pycylon_context(context) and self._is_pyarrow_table(pyarrow_table):
 *             c_arrow_tb_shd_ptr = pyarrow_unwrap_table(pyarrow_table)
 *             self.sp_context = pycylon_unwrap_context(context)             # <<<<<<<<<<<<<<
 *             self.table_shd_ptr = make_shared[CTable](self.sp_context, c_arrow_tb_shd_ptr)
 * 
 */
    __pyx_v_self->sp_context = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_context(__pyx_v_context);

    /* "pycylon/data/table.pyx":109
 *             c_arrow_tb_shd_ptr = pyarrow_unwrap_table(pyarrow_table)
 *             self.sp_context = pycylon_unwrap_context(context)
 *             self.table_shd_ptr = make_shared[CTable](self.sp_context, c_arrow_tb_shd_ptr)             # <<<<<<<<<<<<<<
 * 
 *     cdef void init(self, const shared_ptr[CTable]& table):
 */
    try {
      __pyx_t_6 = std::make_shared<cylon::Table>(__pyx_v_self->sp_context, __pyx_v_c_arrow_tb_shd_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 109, __pyx_L1_error)
    }
    __pyx_v_self->table_shd_ptr = __pyx_t_6;

    /* "pycylon/data/table.pyx":106
 *     def initialize(self, pyarrow_table=None, context=None):
 *         cdef shared_ptr[CArrowTable] c_arrow_tb_shd_ptr
 *         if self._is_pycylon_context(context) and self._is_pyarrow_table(pyarrow_table):             # <<<<<<<<<<<<<<
 *             c_arrow_tb_shd_ptr = pyarrow_unwrap_table(pyarrow_table)
 *             self.sp_context = pycylon_unwrap_context(context)
 */
  }

  /* "pycylon/data/table.pyx":104
 *         self._indexing_type = IndexingType.RANGE
 * 
 *     def initialize(self, pyarrow_table=None, context=None):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CArrowTable] c_arrow_tb_shd_ptr
 *         if self._is_pycylon_context(context) and self._is_pyarrow_table(pyarrow_table):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":111
 *             self.table_shd_ptr = make_shared[CTable](self.sp_context, c_arrow_tb_shd_ptr)
 * 
 *     cdef void init(self, const shared_ptr[CTable]& table):             # <<<<<<<<<<<<<<
 *         self.table_shd_ptr = table
 *         self._index = None
 */

static void __pyx_f_7pycylon_4data_5table_5Table_init(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, std::shared_ptr<cylon::Table>  const &__pyx_v_table) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "pycylon/data/table.pyx":112
 * 
 *     cdef void init(self, const shared_ptr[CTable]& table):
 *         self.table_shd_ptr = table             # <<<<<<<<<<<<<<
 *         self._index = None
 * 
 */
  __pyx_v_self->table_shd_ptr = __pyx_v_table;

  /* "pycylon/data/table.pyx":113
 *     cdef void init(self, const shared_ptr[CTable]& table):
 *         self.table_shd_ptr = table
 *         self._index = None             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index, Py_None) < 0) __PYX_ERR(0, 113, __pyx_L1_error)

  /* "pycylon/data/table.pyx":111
 *             self.table_shd_ptr = make_shared[CTable](self.sp_context, c_arrow_tb_shd_ptr)
 * 
 *     cdef void init(self, const shared_ptr[CTable]& table):             # <<<<<<<<<<<<<<
 *         self.table_shd_ptr = table
 *         self._index = None
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pycylon.data.table.Table.init", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pycylon/data/table.pyx":116
 * 
 *     @staticmethod
 *     def _is_pyarrow_table(pyarrow_table):             # <<<<<<<<<<<<<<
 *         return isinstance(pyarrow_table, pa.Table)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_7_is_pyarrow_table(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_6_is_pyarrow_table[] = "Table._is_pyarrow_table(pyarrow_table)";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_7_is_pyarrow_table = {"_is_pyarrow_table", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_7_is_pyarrow_table, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_6_is_pyarrow_table};
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_7_is_pyarrow_table(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pyarrow_table = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_pyarrow_table (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyarrow_table,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyarrow_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_is_pyarrow_table") < 0)) __PYX_ERR(0, 116, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_pyarrow_table = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_is_pyarrow_table", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 116, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table._is_pyarrow_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_6_is_pyarrow_table(__pyx_v_pyarrow_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_6_is_pyarrow_table(PyObject *__pyx_v_pyarrow_table) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_pyarrow_table", 0);

  /* "pycylon/data/table.pyx":117
 *     @staticmethod
 *     def _is_pyarrow_table(pyarrow_table):
 *         return isinstance(pyarrow_table, pa.Table)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pa); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_pyarrow_table, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":116
 * 
 *     @staticmethod
 *     def _is_pyarrow_table(pyarrow_table):             # <<<<<<<<<<<<<<
 *         return isinstance(pyarrow_table, pa.Table)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycylon.data.table.Table._is_pyarrow_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":120
 * 
 *     @staticmethod
 *     def _is_pycylon_table(pycylon_table):             # <<<<<<<<<<<<<<
 *         return isinstance(pycylon_table, Table)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_9_is_pycylon_table(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_8_is_pycylon_table[] = "Table._is_pycylon_table(pycylon_table)";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_9_is_pycylon_table = {"_is_pycylon_table", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_9_is_pycylon_table, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_8_is_pycylon_table};
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_9_is_pycylon_table(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pycylon_table = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_pycylon_table (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pycylon_table,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pycylon_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_is_pycylon_table") < 0)) __PYX_ERR(0, 120, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_pycylon_table = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_is_pycylon_table", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table._is_pycylon_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_8_is_pycylon_table(__pyx_v_pycylon_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_8_is_pycylon_table(PyObject *__pyx_v_pycylon_table) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_pycylon_table", 0);

  /* "pycylon/data/table.pyx":121
 *     @staticmethod
 *     def _is_pycylon_table(pycylon_table):
 *         return isinstance(pycylon_table, Table)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_pycylon_table, __pyx_ptype_7pycylon_4data_5table_Table); 
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":120
 * 
 *     @staticmethod
 *     def _is_pycylon_table(pycylon_table):             # <<<<<<<<<<<<<<
 *         return isinstance(pycylon_table, Table)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycylon.data.table.Table._is_pycylon_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":124
 * 
 *     @staticmethod
 *     def _is_pycylon_context(context):             # <<<<<<<<<<<<<<
 *         return isinstance(context, CylonContext)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_11_is_pycylon_context(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_10_is_pycylon_context[] = "Table._is_pycylon_context(context)";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_11_is_pycylon_context = {"_is_pycylon_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_11_is_pycylon_context, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_10_is_pycylon_context};
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_11_is_pycylon_context(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_context = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_pycylon_context (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_context,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_is_pycylon_context") < 0)) __PYX_ERR(0, 124, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_context = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_is_pycylon_context", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 124, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table._is_pycylon_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_10_is_pycylon_context(__pyx_v_context);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_10_is_pycylon_context(PyObject *__pyx_v_context) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_pycylon_context", 0);

  /* "pycylon/data/table.pyx":125
 *     @staticmethod
 *     def _is_pycylon_context(context):
 *         return isinstance(context, CylonContext)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, row1=-1, row2=-1, col1=-1, col2=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CylonContext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_context, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":124
 * 
 *     @staticmethod
 *     def _is_pycylon_context(context):             # <<<<<<<<<<<<<<
 *         return isinstance(context, CylonContext)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table._is_pycylon_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":127
 *         return isinstance(context, CylonContext)
 * 
 *     def show(self, row1=-1, row2=-1, col1=-1, col2=-1):             # <<<<<<<<<<<<<<
 *         '''
 *             prints the table in console from the Cylon C++ Table API
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_13show(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_12show[] = "Table.show(self, row1=-1, row2=-1, col1=-1, col2=-1)\n\n            prints the table in console from the Cylon C++ Table API\n            uses row range and column range\n            :param row1: starting row number as int\n            :param row2: ending row number as int\n            :param col1: starting column number as int\n            :param col2: ending column number as int\n            :return: None\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_13show(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_row1 = 0;
  PyObject *__pyx_v_row2 = 0;
  PyObject *__pyx_v_col1 = 0;
  PyObject *__pyx_v_col2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row1,&__pyx_n_s_row2,&__pyx_n_s_col1,&__pyx_n_s_col2,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)__pyx_int_neg_1);
    values[1] = ((PyObject *)__pyx_int_neg_1);
    values[2] = ((PyObject *)__pyx_int_neg_1);
    values[3] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row1);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col1);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col2);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show") < 0)) __PYX_ERR(0, 127, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_row1 = values[0];
    __pyx_v_row2 = values[1];
    __pyx_v_col1 = values[2];
    __pyx_v_col2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 127, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_12show(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_row1, __pyx_v_row2, __pyx_v_col1, __pyx_v_col2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_12show(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_row1, PyObject *__pyx_v_row2, PyObject *__pyx_v_col1, PyObject *__pyx_v_col2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pycylon/data/table.pyx":137
 *             :return: None
 *         '''
 *         if row1 == -1 and row2 == -1 and col1 == -1 and col2 == -1:             # <<<<<<<<<<<<<<
 *             self.table_shd_ptr.get().Print()
 *         else:
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_row1, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_row2, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_col1, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_col2, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":138
 *         '''
 *         if row1 == -1 and row2 == -1 and col1 == -1 and col2 == -1:
 *             self.table_shd_ptr.get().Print()             # <<<<<<<<<<<<<<
 *         else:
 *             self.table_shd_ptr.get().Print(row1, row2, col1, col2)
 */
    __pyx_v_self->table_shd_ptr.get()->Print();

    /* "pycylon/data/table.pyx":137
 *             :return: None
 *         '''
 *         if row1 == -1 and row2 == -1 and col1 == -1 and col2 == -1:             # <<<<<<<<<<<<<<
 *             self.table_shd_ptr.get().Print()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":140
 *             self.table_shd_ptr.get().Print()
 *         else:
 *             self.table_shd_ptr.get().Print(row1, row2, col1, col2)             # <<<<<<<<<<<<<<
 * 
 *     def sort(self, order_by, ascending=True) -> Table:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_row1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_row2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_col1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_col2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
    __pyx_v_self->table_shd_ptr.get()->Print(__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7);
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":127
 *         return isinstance(context, CylonContext)
 * 
 *     def show(self, row1=-1, row2=-1, col1=-1, col2=-1):             # <<<<<<<<<<<<<<
 *         '''
 *             prints the table in console from the Cylon C++ Table API
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycylon.data.table.Table.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":142
 *             self.table_shd_ptr.get().Print(row1, row2, col1, col2)
 * 
 *     def sort(self, order_by, ascending=True) -> Table:             # <<<<<<<<<<<<<<
 * 
 *         cdef shared_ptr[CTable] output
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_15sort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_14sort[] = "Table.sort(self, order_by, ascending=True) -> Table";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_15sort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order_by = 0;
  PyObject *__pyx_v_ascending = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_by,&__pyx_n_s_ascending,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_by)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ascending);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sort") < 0)) __PYX_ERR(0, 142, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_order_by = values[0];
    __pyx_v_ascending = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sort", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 142, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.sort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_14sort(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_order_by, __pyx_v_ascending);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_14sort(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_order_by, PyObject *__pyx_v_ascending) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::vector<int>  __pyx_v_sort_index;
  std::vector<bool>  __pyx_v_order_directions;
  PyObject *__pyx_v_b = NULL;
  std::vector<int> ::size_type __pyx_v_i;
  cylon::Status __pyx_v_status;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  std::vector<int> ::size_type __pyx_t_10;
  std::vector<int> ::size_type __pyx_t_11;
  std::vector<int> ::size_type __pyx_t_12;
  bool __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sort", 0);

  /* "pycylon/data/table.pyx":148
 *         cdef vector[cpp_bool] order_directions
 * 
 *         if isinstance(order_by, str):             # <<<<<<<<<<<<<<
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_order_by); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":149
 * 
 *         if isinstance(order_by, str):
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))             # <<<<<<<<<<<<<<
 *         elif isinstance(order_by, int):
 *             sort_index.push_back(order_by)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_order_by) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_order_by);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_sort_index.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 149, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":148
 *         cdef vector[cpp_bool] order_directions
 * 
 *         if isinstance(order_by, str):             # <<<<<<<<<<<<<<
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":150
 *         if isinstance(order_by, str):
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):             # <<<<<<<<<<<<<<
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_order_by); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":151
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):
 *             sort_index.push_back(order_by)             # <<<<<<<<<<<<<<
 *         elif isinstance(order_by, list):
 *             for b in order_by:
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_order_by); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
    try {
      __pyx_v_sort_index.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 151, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":150
 *         if isinstance(order_by, str):
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):             # <<<<<<<<<<<<<<
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":152
 *         elif isinstance(order_by, int):
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):             # <<<<<<<<<<<<<<
 *             for b in order_by:
 *                 if isinstance(b, str):
 */
  __pyx_t_1 = PyList_Check(__pyx_v_order_by); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":153
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):
 *             for b in order_by:             # <<<<<<<<<<<<<<
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 */
    if (likely(PyList_CheckExact(__pyx_v_order_by)) || PyTuple_CheckExact(__pyx_v_order_by)) {
      __pyx_t_3 = __pyx_v_order_by; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_order_by); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 153, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 153, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 153, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 153, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pycylon/data/table.pyx":154
 *         elif isinstance(order_by, list):
 *             for b in order_by:
 *                 if isinstance(b, str):             # <<<<<<<<<<<<<<
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):
 */
      __pyx_t_2 = PyUnicode_Check(__pyx_v_b); 
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "pycylon/data/table.pyx":155
 *             for b in order_by:
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))             # <<<<<<<<<<<<<<
 *                 elif isinstance(b, int):
 *                     sort_index.push_back(b)
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_9, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_b);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        try {
          __pyx_v_sort_index.push_back(__pyx_t_6);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 155, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":154
 *         elif isinstance(order_by, list):
 *             for b in order_by:
 *                 if isinstance(b, str):             # <<<<<<<<<<<<<<
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):
 */
        goto __pyx_L6;
      }

      /* "pycylon/data/table.pyx":156
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):             # <<<<<<<<<<<<<<
 *                     sort_index.push_back(b)
 *                 else:
 */
      __pyx_t_1 = PyInt_Check(__pyx_v_b); 
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (likely(__pyx_t_2)) {

        /* "pycylon/data/table.pyx":157
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):
 *                     sort_index.push_back(b)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise Exception(
 */
        __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_b); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L1_error)
        try {
          __pyx_v_sort_index.push_back(__pyx_t_6);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 157, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":156
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):             # <<<<<<<<<<<<<<
 *                     sort_index.push_back(b)
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "pycylon/data/table.pyx":159
 *                     sort_index.push_back(b)
 *                 else:
 *                     raise Exception(             # <<<<<<<<<<<<<<
 *                         'Unsupported type used to specify the sort by columns. Expected column name or index')
 *         else:
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 159, __pyx_L1_error)
      }
      __pyx_L6:;

      /* "pycylon/data/table.pyx":153
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):
 *             for b in order_by:             # <<<<<<<<<<<<<<
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":152
 *         elif isinstance(order_by, int):
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):             # <<<<<<<<<<<<<<
 *             for b in order_by:
 *                 if isinstance(b, str):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":162
 *                         'Unsupported type used to specify the sort by columns. Expected column name or index')
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 'Unsupported type used to specify the sort by columns. Expected column name or index')
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 162, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":165
 *                 'Unsupported type used to specify the sort by columns. Expected column name or index')
 * 
 *         if type(ascending) == type(True):             # <<<<<<<<<<<<<<
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)
 */
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_ascending)), ((PyObject *)Py_TYPE(Py_True)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":166
 * 
 *         if type(ascending) == type(True):
 *             for i in range(0, sort_index.size()):             # <<<<<<<<<<<<<<
 *                 order_directions.push_back(ascending)
 *         elif isinstance(ascending, list):
 */
    __pyx_t_10 = __pyx_v_sort_index.size();
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "pycylon/data/table.pyx":167
 *         if type(ascending) == type(True):
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)             # <<<<<<<<<<<<<<
 *         elif isinstance(ascending, list):
 *             for i in range(0, sort_index.size()):
 */
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_ascending); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L1_error)
      try {
        __pyx_v_order_directions.push_back(__pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 167, __pyx_L1_error)
      }
    }

    /* "pycylon/data/table.pyx":165
 *                 'Unsupported type used to specify the sort by columns. Expected column name or index')
 * 
 *         if type(ascending) == type(True):             # <<<<<<<<<<<<<<
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)
 */
    goto __pyx_L7;
  }

  /* "pycylon/data/table.pyx":168
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)
 *         elif isinstance(ascending, list):             # <<<<<<<<<<<<<<
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending[i])
 */
  __pyx_t_2 = PyList_Check(__pyx_v_ascending); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":169
 *                 order_directions.push_back(ascending)
 *         elif isinstance(ascending, list):
 *             for i in range(0, sort_index.size()):             # <<<<<<<<<<<<<<
 *                 order_directions.push_back(ascending[i])
 *         else:
 */
    __pyx_t_10 = __pyx_v_sort_index.size();
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "pycylon/data/table.pyx":170
 *         elif isinstance(ascending, list):
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending[i])             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ascending, __pyx_v_i, std::vector<int> ::size_type, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_v_order_directions.push_back(__pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 170, __pyx_L1_error)
      }
    }

    /* "pycylon/data/table.pyx":168
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)
 *         elif isinstance(ascending, list):             # <<<<<<<<<<<<<<
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending[i])
 */
    goto __pyx_L7;
  }

  /* "pycylon/data/table.pyx":172
 *                 order_directions.push_back(ascending[i])
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 'Unsupported format for ascending/descending order indication. Expected a boolean or a list of booleans')
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 172, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "pycylon/data/table.pyx":175
 *                 'Unsupported format for ascending/descending order indication. Expected a boolean or a list of booleans')
 * 
 *         cdef CStatus status = Sort(self.table_shd_ptr, sort_index, output, order_directions)             # <<<<<<<<<<<<<<
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)
 */
  __pyx_v_status = cylon::Sort(__pyx_v_self->table_shd_ptr, __pyx_v_sort_index, __pyx_v_output, __pyx_v_order_directions);

  /* "pycylon/data/table.pyx":176
 * 
 *         cdef CStatus status = Sort(self.table_shd_ptr, sort_index, output, order_directions)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":177
 *         cdef CStatus status = Sort(self.table_shd_ptr, sort_index, output, order_directions)
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(f"Table couldn't be sorted: {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_3 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 177, __pyx_L1_error)
    __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":176
 * 
 *         cdef CStatus status = Sort(self.table_shd_ptr, sort_index, output, order_directions)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":179
 *             return pycylon_wrap_table(output)
 *         else:
 *             raise Exception(f"Table couldn't be sorted: {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def retain_memory(self, retain):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Table_couldn_t_be_sorted, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 179, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":142
 *             self.table_shd_ptr.get().Print(row1, row2, col1, col2)
 * 
 *     def sort(self, order_by, ascending=True) -> Table:             # <<<<<<<<<<<<<<
 * 
 *         cdef shared_ptr[CTable] output
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table.sort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":181
 *             raise Exception(f"Table couldn't be sorted: {status.get_msg().decode()}")
 * 
 *     def retain_memory(self, retain):             # <<<<<<<<<<<<<<
 *         """
 *         Retain  memory for PyCylon table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_17retain_memory(PyObject *__pyx_v_self, PyObject *__pyx_v_retain); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_16retain_memory[] = "Table.retain_memory(self, retain)\n\n        Retain  memory for PyCylon table\n        @param retain: bool\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_17retain_memory(PyObject *__pyx_v_self, PyObject *__pyx_v_retain) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("retain_memory (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_16retain_memory(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_retain));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_16retain_memory(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_retain) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("retain_memory", 0);

  /* "pycylon/data/table.pyx":186
 *         @param retain: bool
 *         """
 *         self.table_shd_ptr.get().retainMemory(retain)             # <<<<<<<<<<<<<<
 * 
 *     def is_retain(self) -> bool:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_retain); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_v_self->table_shd_ptr.get()->retainMemory(__pyx_t_1);

  /* "pycylon/data/table.pyx":181
 *             raise Exception(f"Table couldn't be sorted: {status.get_msg().decode()}")
 * 
 *     def retain_memory(self, retain):             # <<<<<<<<<<<<<<
 *         """
 *         Retain  memory for PyCylon table
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.retain_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":188
 *         self.table_shd_ptr.get().retainMemory(retain)
 * 
 *     def is_retain(self) -> bool:             # <<<<<<<<<<<<<<
 *         """
 *         Checks if memory is retained in PyCylon Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_19is_retain(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_18is_retain[] = "Table.is_retain(self) -> bool\n\n        Checks if memory is retained in PyCylon Table\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_19is_retain(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_retain (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_18is_retain(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_18is_retain(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_retain", 0);

  /* "pycylon/data/table.pyx":192
 *         Checks if memory is retained in PyCylon Table
 *         """
 *         self.table_shd_ptr.get().IsRetain()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  (void)(__pyx_v_self->table_shd_ptr.get()->IsRetain());

  /* "pycylon/data/table.pyx":188
 *         self.table_shd_ptr.get().retainMemory(retain)
 * 
 *     def is_retain(self) -> bool:             # <<<<<<<<<<<<<<
 *         """
 *         Checks if memory is retained in PyCylon Table
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":195
 * 
 *     @staticmethod
 *     def merge(tables: List[Table]) -> Table:             # <<<<<<<<<<<<<<
 *         """
 *         Merging Two PyCylon tables
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_21merge(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_20merge[] = "Table.merge(tables: List[Table]) -> Table\n\n        Merging Two PyCylon tables\n        @param ctx: PyCylon context\n        @param tables: PyCylon table\n        @return: PyCylon table\n        ";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_21merge = {"merge", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_21merge, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_20merge};
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_21merge(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tables = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tables,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "merge") < 0)) __PYX_ERR(0, 195, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_tables = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 195, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_20merge(__pyx_v_tables);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_20merge(PyObject *__pyx_v_tables) {
  std::vector<std::shared_ptr<cylon::Table> >  __pyx_v_ctables;
  std::shared_ptr<cylon::Table>  __pyx_v_curTable;
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_v_table = NULL;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge", 0);

  /* "pycylon/data/table.pyx":206
 *         cdef shared_ptr[CTable] output
 *         cdef CStatus status
 *         if tables:             # <<<<<<<<<<<<<<
 *             for table in tables:
 *                 curTable = pycylon_unwrap_table(table)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_tables); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 206, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":207
 *         cdef CStatus status
 *         if tables:
 *             for table in tables:             # <<<<<<<<<<<<<<
 *                 curTable = pycylon_unwrap_table(table)
 *                 ctables.push_back(curTable)
 */
    if (likely(PyList_CheckExact(__pyx_v_tables)) || PyTuple_CheckExact(__pyx_v_tables)) {
      __pyx_t_2 = __pyx_v_tables; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_tables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 207, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_table, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pycylon/data/table.pyx":208
 *         if tables:
 *             for table in tables:
 *                 curTable = pycylon_unwrap_table(table)             # <<<<<<<<<<<<<<
 *                 ctables.push_back(curTable)
 *             status = Merge(ctables, output)
 */
      __pyx_v_curTable = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_table(__pyx_v_table);

      /* "pycylon/data/table.pyx":209
 *             for table in tables:
 *                 curTable = pycylon_unwrap_table(table)
 *                 ctables.push_back(curTable)             # <<<<<<<<<<<<<<
 *             status = Merge(ctables, output)
 *             if status.is_ok():
 */
      try {
        __pyx_v_ctables.push_back(__pyx_v_curTable);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 209, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":207
 *         cdef CStatus status
 *         if tables:
 *             for table in tables:             # <<<<<<<<<<<<<<
 *                 curTable = pycylon_unwrap_table(table)
 *                 ctables.push_back(curTable)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":210
 *                 curTable = pycylon_unwrap_table(table)
 *                 ctables.push_back(curTable)
 *             status = Merge(ctables, output)             # <<<<<<<<<<<<<<
 *             if status.is_ok():
 *                 return pycylon_wrap_table(output)
 */
    __pyx_v_status = cylon::Merge(__pyx_v_ctables, __pyx_v_output);

    /* "pycylon/data/table.pyx":211
 *                 ctables.push_back(curTable)
 *             status = Merge(ctables, output)
 *             if status.is_ok():             # <<<<<<<<<<<<<<
 *                 return pycylon_wrap_table(output)
 *             else:
 */
    __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
    if (likely(__pyx_t_1)) {

      /* "pycylon/data/table.pyx":212
 *             status = Merge(ctables, output)
 *             if status.is_ok():
 *                 return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception(f"Tables couldn't be merged: {status.get_msg().decode()}")
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 212, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_2);
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":211
 *                 ctables.push_back(curTable)
 *             status = Merge(ctables, output)
 *             if status.is_ok():             # <<<<<<<<<<<<<<
 *                 return pycylon_wrap_table(output)
 *             else:
 */
    }

    /* "pycylon/data/table.pyx":214
 *                 return pycylon_wrap_table(output)
 *             else:
 *                 raise Exception(f"Tables couldn't be merged: {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Tables are not parsed for merge")
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Tables_couldn_t_be_merged, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 214, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":206
 *         cdef shared_ptr[CTable] output
 *         cdef CStatus status
 *         if tables:             # <<<<<<<<<<<<<<
 *             for table in tables:
 *                 curTable = pycylon_unwrap_table(table)
 */
  }

  /* "pycylon/data/table.pyx":216
 *                 raise Exception(f"Tables couldn't be merged: {status.get_msg().decode()}")
 *         else:
 *             raise ValueError("Tables are not parsed for merge")             # <<<<<<<<<<<<<<
 * 
 *     def _resolve_column_index_from_column_name(self, column_name) -> int:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 216, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":195
 * 
 *     @staticmethod
 *     def merge(tables: List[Table]) -> Table:             # <<<<<<<<<<<<<<
 *         """
 *         Merging Two PyCylon tables
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_table);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":218
 *             raise ValueError("Tables are not parsed for merge")
 * 
 *     def _resolve_column_index_from_column_name(self, column_name) -> int:             # <<<<<<<<<<<<<<
 *         index = None
 *         for idx, col_name in enumerate(self.column_names):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_23_resolve_column_index_from_column_name(PyObject *__pyx_v_self, PyObject *__pyx_v_column_name); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_22_resolve_column_index_from_column_name[] = "Table._resolve_column_index_from_column_name(self, column_name) -> int";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_23_resolve_column_index_from_column_name(PyObject *__pyx_v_self, PyObject *__pyx_v_column_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_resolve_column_index_from_column_name (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_22_resolve_column_index_from_column_name(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_column_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_22_resolve_column_index_from_column_name(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_name) {
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_col_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_resolve_column_index_from_column_name", 0);

  /* "pycylon/data/table.pyx":219
 * 
 *     def _resolve_column_index_from_column_name(self, column_name) -> int:
 *         index = None             # <<<<<<<<<<<<<<
 *         for idx, col_name in enumerate(self.column_names):
 *             if column_name == col_name:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_index = Py_None;

  /* "pycylon/data/table.pyx":220
 *     def _resolve_column_index_from_column_name(self, column_name) -> int:
 *         index = None
 *         for idx, col_name in enumerate(self.column_names):             # <<<<<<<<<<<<<<
 *             if column_name == col_name:
 *                 return idx
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 220, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 220, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 220, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 220, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_col_name, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":221
 *         index = None
 *         for idx, col_name in enumerate(self.column_names):
 *             if column_name == col_name:             # <<<<<<<<<<<<<<
 *                 return idx
 *         if index is None:
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_column_name, __pyx_v_col_name, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {

      /* "pycylon/data/table.pyx":222
 *         for idx, col_name in enumerate(self.column_names):
 *             if column_name == col_name:
 *                 return idx             # <<<<<<<<<<<<<<
 *         if index is None:
 *             raise ValueError(f"Column {column_name} does not exist in the table")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_idx);
      __pyx_r = __pyx_v_idx;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":221
 *         index = None
 *         for idx, col_name in enumerate(self.column_names):
 *             if column_name == col_name:             # <<<<<<<<<<<<<<
 *                 return idx
 *         if index is None:
 */
    }

    /* "pycylon/data/table.pyx":220
 *     def _resolve_column_index_from_column_name(self, column_name) -> int:
 *         index = None
 *         for idx, col_name in enumerate(self.column_names):             # <<<<<<<<<<<<<<
 *             if column_name == col_name:
 *                 return idx
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":223
 *             if column_name == col_name:
 *                 return idx
 *         if index is None:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Column {column_name} does not exist in the table")
 * 
 */
  __pyx_t_6 = (__pyx_v_index == Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (unlikely(__pyx_t_7)) {

    /* "pycylon/data/table.pyx":224
 *                 return idx
 *         if index is None:
 *             raise ValueError(f"Column {column_name} does not exist in the table")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u_Column);
    __pyx_t_4 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_Column);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Column);
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_column_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_8;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_does_not_exist_in_the_table);
    __pyx_t_4 += 28;
    __Pyx_GIVEREF(__pyx_kp_u_does_not_exist_in_the_table);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_does_not_exist_in_the_table);
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 224, __pyx_L1_error)

    /* "pycylon/data/table.pyx":223
 *             if column_name == col_name:
 *                 return idx
 *         if index is None:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Column {column_name} does not exist in the table")
 * 
 */
  }

  /* "pycylon/data/table.pyx":218
 *             raise ValueError("Tables are not parsed for merge")
 * 
 *     def _resolve_column_index_from_column_name(self, column_name) -> int:             # <<<<<<<<<<<<<<
 *         index = None
 *         for idx, col_name in enumerate(self.column_names):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table._resolve_column_index_from_column_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_col_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":227
 * 
 *     @property
 *     def column_count(self) -> int:             # <<<<<<<<<<<<<<
 *         """
 *         Produces column count
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_12column_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_12column_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_12column_count___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_12column_count___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":232
 *         @return: int
 *         """
 *         return self.table_shd_ptr.get().Columns()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->table_shd_ptr.get()->Columns()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":227
 * 
 *     @property
 *     def column_count(self) -> int:             # <<<<<<<<<<<<<<
 *         """
 *         Produces column count
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.column_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":235
 * 
 *     @property
 *     def row_count(self) -> int:             # <<<<<<<<<<<<<<
 *         """
 *         Produces row count
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_9row_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_9row_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_9row_count___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_9row_count___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":240
 *         @return: int
 *         """
 *         return self.table_shd_ptr.get().Rows()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->table_shd_ptr.get()->Rows()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":235
 * 
 *     @property
 *     def row_count(self) -> int:             # <<<<<<<<<<<<<<
 *         """
 *         Produces row count
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.row_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":243
 * 
 *     @property
 *     def context(self) -> CylonContext:             # <<<<<<<<<<<<<<
 *         """
 *         Get the CylonContext from PyCylon Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_7context_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_7context_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_7context___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_7context___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":248
 *         @rtype: CylonContext
 *         """
 *         return pycylon_wrap_context(self.table_shd_ptr.get().GetContext())             # <<<<<<<<<<<<<<
 * 
 *     def _resolve_join_column_indices_from_column_names(self, column_names: List[
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_context(__pyx_v_self->table_shd_ptr.get()->GetContext()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":243
 * 
 *     @property
 *     def context(self) -> CylonContext:             # <<<<<<<<<<<<<<
 *         """
 *         Get the CylonContext from PyCylon Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.context.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":250
 *         return pycylon_wrap_context(self.table_shd_ptr.get().GetContext())
 * 
 *     def _resolve_join_column_indices_from_column_names(self, column_names: List[             # <<<<<<<<<<<<<<
 *         str], op_column_names: List[str]) -> List[int]:
 *         resolve_col_ids = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_25_resolve_join_column_indices_from_column_names(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_24_resolve_join_column_indices_from_column_names[] = "Table._resolve_join_column_indices_from_column_names(self, column_names: List[str], op_column_names: List[str]) -> List[int]";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_25_resolve_join_column_indices_from_column_names(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_column_names = 0;
  PyObject *__pyx_v_op_column_names = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_resolve_join_column_indices_from_column_names (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_names,&__pyx_n_s_op_column_names,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_names)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_op_column_names)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_resolve_join_column_indices_from_column_names", 1, 2, 2, 1); __PYX_ERR(0, 250, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_resolve_join_column_indices_from_column_names") < 0)) __PYX_ERR(0, 250, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_column_names = values[0];
    __pyx_v_op_column_names = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_resolve_join_column_indices_from_column_names", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 250, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table._resolve_join_column_indices_from_column_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_24_resolve_join_column_indices_from_column_names(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_column_names, __pyx_v_op_column_names);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_24_resolve_join_column_indices_from_column_names(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_names, PyObject *__pyx_v_op_column_names) {
  PyObject *__pyx_v_resolve_col_ids = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_op_col_id = NULL;
  PyObject *__pyx_v_op_column_name = NULL;
  PyObject *__pyx_v_col_id = NULL;
  PyObject *__pyx_v_column_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_resolve_join_column_indices_from_column_names", 0);

  /* "pycylon/data/table.pyx":252
 *     def _resolve_join_column_indices_from_column_names(self, column_names: List[
 *         str], op_column_names: List[str]) -> List[int]:
 *         resolve_col_ids = []             # <<<<<<<<<<<<<<
 *         for op_col_id, op_column_name in enumerate(op_column_names):
 *             for col_id, column_name in enumerate(column_names):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_resolve_col_ids = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":253
 *         str], op_column_names: List[str]) -> List[int]:
 *         resolve_col_ids = []
 *         for op_col_id, op_column_name in enumerate(op_column_names):             # <<<<<<<<<<<<<<
 *             for col_id, column_name in enumerate(column_names):
 *                 if op_column_name == column_name:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_op_column_names)) || PyTuple_CheckExact(__pyx_v_op_column_names)) {
    __pyx_t_2 = __pyx_v_op_column_names; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_op_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 253, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 253, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 253, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 253, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_op_column_name, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_op_col_id, __pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pycylon/data/table.pyx":254
 *         resolve_col_ids = []
 *         for op_col_id, op_column_name in enumerate(op_column_names):
 *             for col_id, column_name in enumerate(column_names):             # <<<<<<<<<<<<<<
 *                 if op_column_name == column_name:
 *                     resolve_col_ids.append(col_id)
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_5 = __pyx_int_0;
    if (likely(PyList_CheckExact(__pyx_v_column_names)) || PyTuple_CheckExact(__pyx_v_column_names)) {
      __pyx_t_6 = __pyx_v_column_names; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_column_names); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 254, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 254, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 254, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_8(__pyx_t_6);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 254, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_v_column_name, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_col_id, __pyx_t_5);
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5);
      __pyx_t_5 = __pyx_t_9;
      __pyx_t_9 = 0;

      /* "pycylon/data/table.pyx":255
 *         for op_col_id, op_column_name in enumerate(op_column_names):
 *             for col_id, column_name in enumerate(column_names):
 *                 if op_column_name == column_name:             # <<<<<<<<<<<<<<
 *                     resolve_col_ids.append(col_id)
 *         return resolve_col_ids
 */
      __pyx_t_9 = PyObject_RichCompare(__pyx_v_op_column_name, __pyx_v_column_name, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 255, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_10) {

        /* "pycylon/data/table.pyx":256
 *             for col_id, column_name in enumerate(column_names):
 *                 if op_column_name == column_name:
 *                     resolve_col_ids.append(col_id)             # <<<<<<<<<<<<<<
 *         return resolve_col_ids
 * 
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_resolve_col_ids, __pyx_v_col_id); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 256, __pyx_L1_error)

        /* "pycylon/data/table.pyx":255
 *         for op_col_id, op_column_name in enumerate(op_column_names):
 *             for col_id, column_name in enumerate(column_names):
 *                 if op_column_name == column_name:             # <<<<<<<<<<<<<<
 *                     resolve_col_ids.append(col_id)
 *         return resolve_col_ids
 */
      }

      /* "pycylon/data/table.pyx":254
 *         resolve_col_ids = []
 *         for op_col_id, op_column_name in enumerate(op_column_names):
 *             for col_id, column_name in enumerate(column_names):             # <<<<<<<<<<<<<<
 *                 if op_column_name == column_name:
 *                     resolve_col_ids.append(col_id)
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pycylon/data/table.pyx":253
 *         str], op_column_names: List[str]) -> List[int]:
 *         resolve_col_ids = []
 *         for op_col_id, op_column_name in enumerate(op_column_names):             # <<<<<<<<<<<<<<
 *             for col_id, column_name in enumerate(column_names):
 *                 if op_column_name == column_name:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":257
 *                 if op_column_name == column_name:
 *                     resolve_col_ids.append(col_id)
 *         return resolve_col_ids             # <<<<<<<<<<<<<<
 * 
 *     def _get_join_column_indices(self, table: Table, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_resolve_col_ids);
  __pyx_r = __pyx_v_resolve_col_ids;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":250
 *         return pycylon_wrap_context(self.table_shd_ptr.get().GetContext())
 * 
 *     def _resolve_join_column_indices_from_column_names(self, column_names: List[             # <<<<<<<<<<<<<<
 *         str], op_column_names: List[str]) -> List[int]:
 *         resolve_col_ids = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table._resolve_join_column_indices_from_column_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resolve_col_ids);
  __Pyx_XDECREF(__pyx_v_op_col_id);
  __Pyx_XDECREF(__pyx_v_op_column_name);
  __Pyx_XDECREF(__pyx_v_col_id);
  __Pyx_XDECREF(__pyx_v_column_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":259
 *         return resolve_col_ids
 * 
 *     def _get_join_column_indices(self, table: Table, **kwargs):             # <<<<<<<<<<<<<<
 *         ## Check if Passed values are based on left and right column names or indices
 *         left_cols = kwargs.get('left_on')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_27_get_join_column_indices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_26_get_join_column_indices[] = "Table._get_join_column_indices(self, Table table: Table, **kwargs)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_27_get_join_column_indices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_join_column_indices (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_table,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "_get_join_column_indices") < 0)) __PYX_ERR(0, 259, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_table = ((struct __pyx_obj_7pycylon_4data_5table_Table *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_join_column_indices", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 259, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pycylon.data.table.Table._get_join_column_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_26_get_join_column_indices(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_table, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_26_get_join_column_indices(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_left_cols = NULL;
  PyObject *__pyx_v_right_cols = NULL;
  PyObject *__pyx_v_column_names = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_table_col_names_list = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_join_column_indices", 0);

  /* "pycylon/data/table.pyx":261
 *     def _get_join_column_indices(self, table: Table, **kwargs):
 *         ## Check if Passed values are based on left and right column names or indices
 *         left_cols = kwargs.get('left_on')             # <<<<<<<<<<<<<<
 *         right_cols = kwargs.get('right_on')
 *         column_names = kwargs.get('on')
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_left_on, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_left_cols = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":262
 *         ## Check if Passed values are based on left and right column names or indices
 *         left_cols = kwargs.get('left_on')
 *         right_cols = kwargs.get('right_on')             # <<<<<<<<<<<<<<
 *         column_names = kwargs.get('on')
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_right_on, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_right_cols = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":263
 *         left_cols = kwargs.get('left_on')
 *         right_cols = kwargs.get('right_on')
 *         column_names = kwargs.get('on')             # <<<<<<<<<<<<<<
 * 
 *         table_col_names_list = [self.column_names, table.column_names]
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_on, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_column_names = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":265
 *         column_names = kwargs.get('on')
 * 
 *         table_col_names_list = [self.column_names, table.column_names]             # <<<<<<<<<<<<<<
 * 
 *         if left_cols and right_cols and isinstance(left_cols, List) and isinstance(right_cols,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_table), __pyx_n_s_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_table_col_names_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":267
 *         table_col_names_list = [self.column_names, table.column_names]
 * 
 *         if left_cols and right_cols and isinstance(left_cols, List) and isinstance(right_cols,             # <<<<<<<<<<<<<<
 *                                                                                    List):
 *             if isinstance(left_cols[0], str) and isinstance(right_cols[0], str):
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_left_cols); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_right_cols); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_List); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_left_cols, __pyx_t_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }

  /* "pycylon/data/table.pyx":268
 * 
 *         if left_cols and right_cols and isinstance(left_cols, List) and isinstance(right_cols,
 *                                                                                    List):             # <<<<<<<<<<<<<<
 *             if isinstance(left_cols[0], str) and isinstance(right_cols[0], str):
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_List); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pycylon/data/table.pyx":267
 *         table_col_names_list = [self.column_names, table.column_names]
 * 
 *         if left_cols and right_cols and isinstance(left_cols, List) and isinstance(right_cols,             # <<<<<<<<<<<<<<
 *                                                                                    List):
 *             if isinstance(left_cols[0], str) and isinstance(right_cols[0], str):
 */
  __pyx_t_6 = PyObject_IsInstance(__pyx_v_right_cols, __pyx_t_3); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "pycylon/data/table.pyx":269
 *         if left_cols and right_cols and isinstance(left_cols, List) and isinstance(right_cols,
 *                                                                                    List):
 *             if isinstance(left_cols[0], str) and isinstance(right_cols[0], str):             # <<<<<<<<<<<<<<
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 *                                                                                 left_cols)
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_left_cols, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyUnicode_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_right_cols, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyUnicode_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_4) {

      /* "pycylon/data/table.pyx":270
 *                                                                                    List):
 *             if isinstance(left_cols[0], str) and isinstance(right_cols[0], str):
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,             # <<<<<<<<<<<<<<
 *                                                                                 left_cols)
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_join_column_indices_fro); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "pycylon/data/table.pyx":271
 *             if isinstance(left_cols[0], str) and isinstance(right_cols[0], str):
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 *                                                                                 left_cols)             # <<<<<<<<<<<<<<
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,
 *                                                                                  right_cols)
 */
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, __pyx_v_left_cols};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, __pyx_v_left_cols};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_1);
        __Pyx_INCREF(__pyx_v_left_cols);
        __Pyx_GIVEREF(__pyx_v_left_cols);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_left_cols);
        __pyx_t_1 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_left_cols, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":272
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 *                                                                                 left_cols)
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,             # <<<<<<<<<<<<<<
 *                                                                                  right_cols)
 *                 self._check_column_names_viable(left_cols, right_cols)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_join_column_indices_fro); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_table), __pyx_n_s_column_names); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);

      /* "pycylon/data/table.pyx":273
 *                                                                                 left_cols)
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,
 *                                                                                  right_cols)             # <<<<<<<<<<<<<<
 *                 self._check_column_names_viable(left_cols, right_cols)
 * 
 */
      __pyx_t_1 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_9, __pyx_v_right_cols};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_9, __pyx_v_right_cols};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
        __Pyx_INCREF(__pyx_v_right_cols);
        __Pyx_GIVEREF(__pyx_v_right_cols);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_v_right_cols);
        __pyx_t_9 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_right_cols, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":274
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,
 *                                                                                  right_cols)
 *                 self._check_column_names_viable(left_cols, right_cols)             # <<<<<<<<<<<<<<
 * 
 *                 return left_cols, right_cols
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_column_names_viable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_left_cols, __pyx_v_right_cols};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_left_cols, __pyx_v_right_cols};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_v_left_cols);
        __Pyx_GIVEREF(__pyx_v_left_cols);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_left_cols);
        __Pyx_INCREF(__pyx_v_right_cols);
        __Pyx_GIVEREF(__pyx_v_right_cols);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_right_cols);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":276
 *                 self._check_column_names_viable(left_cols, right_cols)
 * 
 *                 return left_cols, right_cols             # <<<<<<<<<<<<<<
 *             elif isinstance(left_cols[0], int) and isinstance(right_cols[0], int):
 *                 return left_cols, right_cols
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_left_cols);
      __Pyx_GIVEREF(__pyx_v_left_cols);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_left_cols);
      __Pyx_INCREF(__pyx_v_right_cols);
      __Pyx_GIVEREF(__pyx_v_right_cols);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_right_cols);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":269
 *         if left_cols and right_cols and isinstance(left_cols, List) and isinstance(right_cols,
 *                                                                                    List):
 *             if isinstance(left_cols[0], str) and isinstance(right_cols[0], str):             # <<<<<<<<<<<<<<
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 *                                                                                 left_cols)
 */
    }

    /* "pycylon/data/table.pyx":277
 * 
 *                 return left_cols, right_cols
 *             elif isinstance(left_cols[0], int) and isinstance(right_cols[0], int):             # <<<<<<<<<<<<<<
 *                 return left_cols, right_cols
 *         ## Check if Passed values are based on common column names in two tables
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_left_cols, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyInt_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_right_cols, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyInt_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_4) {

      /* "pycylon/data/table.pyx":278
 *                 return left_cols, right_cols
 *             elif isinstance(left_cols[0], int) and isinstance(right_cols[0], int):
 *                 return left_cols, right_cols             # <<<<<<<<<<<<<<
 *         ## Check if Passed values are based on common column names in two tables
 *         elif column_names and isinstance(column_names, List):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_left_cols);
      __Pyx_GIVEREF(__pyx_v_left_cols);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_left_cols);
      __Pyx_INCREF(__pyx_v_right_cols);
      __Pyx_GIVEREF(__pyx_v_right_cols);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_right_cols);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":277
 * 
 *                 return left_cols, right_cols
 *             elif isinstance(left_cols[0], int) and isinstance(right_cols[0], int):             # <<<<<<<<<<<<<<
 *                 return left_cols, right_cols
 *         ## Check if Passed values are based on common column names in two tables
 */
    }

    /* "pycylon/data/table.pyx":267
 *         table_col_names_list = [self.column_names, table.column_names]
 * 
 *         if left_cols and right_cols and isinstance(left_cols, List) and isinstance(right_cols,             # <<<<<<<<<<<<<<
 *                                                                                    List):
 *             if isinstance(left_cols[0], str) and isinstance(right_cols[0], str):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":280
 *                 return left_cols, right_cols
 *         ## Check if Passed values are based on common column names in two tables
 *         elif column_names and isinstance(column_names, List):             # <<<<<<<<<<<<<<
 *             if isinstance(column_names[0], str):
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_column_names); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L13_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_List); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_column_names, __pyx_t_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_4 = __pyx_t_6;
  __pyx_L13_bool_binop_done:;
  if (likely(__pyx_t_4)) {

    /* "pycylon/data/table.pyx":281
 *         ## Check if Passed values are based on common column names in two tables
 *         elif column_names and isinstance(column_names, List):
 *             if isinstance(column_names[0], str):             # <<<<<<<<<<<<<<
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 *                                                                                 column_names)
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_column_names, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyUnicode_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (__pyx_t_6) {

      /* "pycylon/data/table.pyx":282
 *         elif column_names and isinstance(column_names, List):
 *             if isinstance(column_names[0], str):
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,             # <<<<<<<<<<<<<<
 *                                                                                 column_names)
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_join_column_indices_fro); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);

      /* "pycylon/data/table.pyx":283
 *             if isinstance(column_names[0], str):
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 *                                                                                 column_names)             # <<<<<<<<<<<<<<
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,
 *                                                                                  column_names)
 */
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_9, __pyx_v_column_names};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_9, __pyx_v_column_names};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_t_9);
        __Pyx_INCREF(__pyx_v_column_names);
        __Pyx_GIVEREF(__pyx_v_column_names);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_column_names);
        __pyx_t_9 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_left_cols, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":284
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 *                                                                                 column_names)
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,             # <<<<<<<<<<<<<<
 *                                                                                  column_names)
 *                 self._check_column_names_viable(left_cols, right_cols)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_join_column_indices_fro); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_table), __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "pycylon/data/table.pyx":285
 *                                                                                 column_names)
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,
 *                                                                                  column_names)             # <<<<<<<<<<<<<<
 *                 self._check_column_names_viable(left_cols, right_cols)
 *                 return left_cols, right_cols
 */
      __pyx_t_9 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_1, __pyx_v_column_names};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_1, __pyx_v_column_names};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_1);
        __Pyx_INCREF(__pyx_v_column_names);
        __Pyx_GIVEREF(__pyx_v_column_names);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_v_column_names);
        __pyx_t_1 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_right_cols, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":286
 *                 right_cols = self._resolve_join_column_indices_from_column_names(table.column_names,
 *                                                                                  column_names)
 *                 self._check_column_names_viable(left_cols, right_cols)             # <<<<<<<<<<<<<<
 *                 return left_cols, right_cols
 *             if isinstance(column_names[0], int):
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_column_names_viable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_left_cols, __pyx_v_right_cols};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_left_cols, __pyx_v_right_cols};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_v_left_cols);
        __Pyx_GIVEREF(__pyx_v_left_cols);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_left_cols);
        __Pyx_INCREF(__pyx_v_right_cols);
        __Pyx_GIVEREF(__pyx_v_right_cols);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_right_cols);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":287
 *                                                                                  column_names)
 *                 self._check_column_names_viable(left_cols, right_cols)
 *                 return left_cols, right_cols             # <<<<<<<<<<<<<<
 *             if isinstance(column_names[0], int):
 *                 return column_names, column_names
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_left_cols);
      __Pyx_GIVEREF(__pyx_v_left_cols);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_left_cols);
      __Pyx_INCREF(__pyx_v_right_cols);
      __Pyx_GIVEREF(__pyx_v_right_cols);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_right_cols);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":281
 *         ## Check if Passed values are based on common column names in two tables
 *         elif column_names and isinstance(column_names, List):
 *             if isinstance(column_names[0], str):             # <<<<<<<<<<<<<<
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 *                                                                                 column_names)
 */
    }

    /* "pycylon/data/table.pyx":288
 *                 self._check_column_names_viable(left_cols, right_cols)
 *                 return left_cols, right_cols
 *             if isinstance(column_names[0], int):             # <<<<<<<<<<<<<<
 *                 return column_names, column_names
 *         else:
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_column_names, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyInt_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (__pyx_t_4) {

      /* "pycylon/data/table.pyx":289
 *                 return left_cols, right_cols
 *             if isinstance(column_names[0], int):
 *                 return column_names, column_names             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be provided")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_column_names);
      __Pyx_GIVEREF(__pyx_v_column_names);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_column_names);
      __Pyx_INCREF(__pyx_v_column_names);
      __Pyx_GIVEREF(__pyx_v_column_names);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_column_names);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":288
 *                 self._check_column_names_viable(left_cols, right_cols)
 *                 return left_cols, right_cols
 *             if isinstance(column_names[0], int):             # <<<<<<<<<<<<<<
 *                 return column_names, column_names
 *         else:
 */
    }

    /* "pycylon/data/table.pyx":280
 *                 return left_cols, right_cols
 *         ## Check if Passed values are based on common column names in two tables
 *         elif column_names and isinstance(column_names, List):             # <<<<<<<<<<<<<<
 *             if isinstance(column_names[0], str):
 *                 left_cols = self._resolve_join_column_indices_from_column_names(self.column_names,
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":291
 *                 return column_names, column_names
 *         else:
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be provided")             # <<<<<<<<<<<<<<
 * 
 *         if not (left_cols and isinstance(left_cols[0], int)) and not (right_cols and isinstance(
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 291, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":293
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be provided")
 * 
 *         if not (left_cols and isinstance(left_cols[0], int)) and not (right_cols and isinstance(             # <<<<<<<<<<<<<<
 *                 right_cols[0], int)):
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be type List and contain "
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_left_cols); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 293, __pyx_L1_error)
  if (__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_left_cols, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyInt_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = (__pyx_t_5 != 0);
  __pyx_t_6 = __pyx_t_10;
  __pyx_L20_bool_binop_done:;
  __pyx_t_10 = ((!__pyx_t_6) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_4 = __pyx_t_10;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_right_cols); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 293, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_10 = __pyx_t_6;
    goto __pyx_L22_bool_binop_done;
  }

  /* "pycylon/data/table.pyx":294
 * 
 *         if not (left_cols and isinstance(left_cols[0], int)) and not (right_cols and isinstance(
 *                 right_cols[0], int)):             # <<<<<<<<<<<<<<
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be type List and contain "
 *                             "int type or str type and cannot be None")
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_right_cols, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyInt_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":293
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be provided")
 * 
 *         if not (left_cols and isinstance(left_cols[0], int)) and not (right_cols and isinstance(             # <<<<<<<<<<<<<<
 *                 right_cols[0], int)):
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be type List and contain "
 */
  __pyx_t_5 = (__pyx_t_6 != 0);
  __pyx_t_10 = __pyx_t_5;
  __pyx_L22_bool_binop_done:;
  __pyx_t_5 = ((!__pyx_t_10) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L18_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pycylon/data/table.pyx":295
 *         if not (left_cols and isinstance(left_cols[0], int)) and not (right_cols and isinstance(
 *                 right_cols[0], int)):
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be type List and contain "             # <<<<<<<<<<<<<<
 *                             "int type or str type and cannot be None")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 295, __pyx_L1_error)

    /* "pycylon/data/table.pyx":293
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be provided")
 * 
 *         if not (left_cols and isinstance(left_cols[0], int)) and not (right_cols and isinstance(             # <<<<<<<<<<<<<<
 *                 right_cols[0], int)):
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be type List and contain "
 */
  }

  /* "pycylon/data/table.pyx":259
 *         return resolve_col_ids
 * 
 *     def _get_join_column_indices(self, table: Table, **kwargs):             # <<<<<<<<<<<<<<
 *         ## Check if Passed values are based on left and right column names or indices
 *         left_cols = kwargs.get('left_on')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table._get_join_column_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_left_cols);
  __Pyx_XDECREF(__pyx_v_right_cols);
  __Pyx_XDECREF(__pyx_v_column_names);
  __Pyx_XDECREF(__pyx_v_table_col_names_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":298
 *                             "int type or str type and cannot be None")
 * 
 *     def _is_column_indices_viable(self, left_cols, right_cols):             # <<<<<<<<<<<<<<
 *         return left_cols and right_cols
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_29_is_column_indices_viable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_28_is_column_indices_viable[] = "Table._is_column_indices_viable(self, left_cols, right_cols)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_29_is_column_indices_viable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_left_cols = 0;
  PyObject *__pyx_v_right_cols = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_column_indices_viable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_left_cols,&__pyx_n_s_right_cols,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_left_cols)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_right_cols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_is_column_indices_viable", 1, 2, 2, 1); __PYX_ERR(0, 298, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_is_column_indices_viable") < 0)) __PYX_ERR(0, 298, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_left_cols = values[0];
    __pyx_v_right_cols = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_is_column_indices_viable", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table._is_column_indices_viable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_28_is_column_indices_viable(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_left_cols, __pyx_v_right_cols);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_28_is_column_indices_viable(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_left_cols, PyObject *__pyx_v_right_cols) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_column_indices_viable", 0);

  /* "pycylon/data/table.pyx":299
 * 
 *     def _is_column_indices_viable(self, left_cols, right_cols):
 *         return left_cols and right_cols             # <<<<<<<<<<<<<<
 * 
 *     def _check_column_names_viable(self, left_cols, right_cols):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_left_cols); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 299, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __Pyx_INCREF(__pyx_v_left_cols);
    __pyx_t_1 = __pyx_v_left_cols;
    goto __pyx_L3_bool_binop_done;
  }
  __Pyx_INCREF(__pyx_v_right_cols);
  __pyx_t_1 = __pyx_v_right_cols;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":298
 *                             "int type or str type and cannot be None")
 * 
 *     def _is_column_indices_viable(self, left_cols, right_cols):             # <<<<<<<<<<<<<<
 *         return left_cols and right_cols
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table._is_column_indices_viable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":301
 *         return left_cols and right_cols
 * 
 *     def _check_column_names_viable(self, left_cols, right_cols):             # <<<<<<<<<<<<<<
 *         if not self._is_column_indices_viable(left_cols, right_cols):
 *             raise ValueError("Provided Column Names or Column Indices not valid.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_31_check_column_names_viable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_30_check_column_names_viable[] = "Table._check_column_names_viable(self, left_cols, right_cols)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_31_check_column_names_viable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_left_cols = 0;
  PyObject *__pyx_v_right_cols = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_check_column_names_viable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_left_cols,&__pyx_n_s_right_cols,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_left_cols)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_right_cols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_check_column_names_viable", 1, 2, 2, 1); __PYX_ERR(0, 301, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_check_column_names_viable") < 0)) __PYX_ERR(0, 301, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_left_cols = values[0];
    __pyx_v_right_cols = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_check_column_names_viable", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 301, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table._check_column_names_viable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_30_check_column_names_viable(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_left_cols, __pyx_v_right_cols);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_30_check_column_names_viable(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_left_cols, PyObject *__pyx_v_right_cols) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_column_names_viable", 0);

  /* "pycylon/data/table.pyx":302
 * 
 *     def _check_column_names_viable(self, left_cols, right_cols):
 *         if not self._is_column_indices_viable(left_cols, right_cols):             # <<<<<<<<<<<<<<
 *             raise ValueError("Provided Column Names or Column Indices not valid.")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_column_indices_viable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_left_cols, __pyx_v_right_cols};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_left_cols, __pyx_v_right_cols};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_left_cols);
    __Pyx_GIVEREF(__pyx_v_left_cols);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_left_cols);
    __Pyx_INCREF(__pyx_v_right_cols);
    __Pyx_GIVEREF(__pyx_v_right_cols);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_right_cols);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = ((!__pyx_t_6) != 0);
  if (unlikely(__pyx_t_7)) {

    /* "pycylon/data/table.pyx":303
 *     def _check_column_names_viable(self, left_cols, right_cols):
 *         if not self._is_column_indices_viable(left_cols, right_cols):
 *             raise ValueError("Provided Column Names or Column Indices not valid.")             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_join_ra_response(self, op_name, shared_ptr[CTable] output, CStatus status):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 303, __pyx_L1_error)

    /* "pycylon/data/table.pyx":302
 * 
 *     def _check_column_names_viable(self, left_cols, right_cols):
 *         if not self._is_column_indices_viable(left_cols, right_cols):             # <<<<<<<<<<<<<<
 *             raise ValueError("Provided Column Names or Column Indices not valid.")
 * 
 */
  }

  /* "pycylon/data/table.pyx":301
 *         return left_cols and right_cols
 * 
 *     def _check_column_names_viable(self, left_cols, right_cols):             # <<<<<<<<<<<<<<
 *         if not self._is_column_indices_viable(left_cols, right_cols):
 *             raise ValueError("Provided Column Names or Column Indices not valid.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table._check_column_names_viable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":305
 *             raise ValueError("Provided Column Names or Column Indices not valid.")
 * 
 *     cdef _get_join_ra_response(self, op_name, shared_ptr[CTable] output, CStatus status):             # <<<<<<<<<<<<<<
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)
 */

static PyObject *__pyx_f_7pycylon_4data_5table_5Table__get_join_ra_response(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_op_name, std::shared_ptr<cylon::Table>  __pyx_v_output, cylon::Status __pyx_v_status) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_join_ra_response", 0);

  /* "pycylon/data/table.pyx":306
 * 
 *     cdef _get_join_ra_response(self, op_name, shared_ptr[CTable] output, CStatus status):
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":307
 *     cdef _get_join_ra_response(self, op_name, shared_ptr[CTable] output, CStatus status):
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"{op_name} operation failed: : {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":306
 * 
 *     cdef _get_join_ra_response(self, op_name, shared_ptr[CTable] output, CStatus status):
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":309
 *             return pycylon_wrap_table(output)
 *         else:
 *             raise ValueError(f"{op_name} operation failed: : {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_ra_response(self, table, ra_op_name):
 */
  /*else*/ {
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_op_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_operation_failed);
    __pyx_t_3 += 21;
    __Pyx_GIVEREF(__pyx_kp_u_operation_failed);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_operation_failed);
    __pyx_t_5 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 309, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":305
 *             raise ValueError("Provided Column Names or Column Indices not valid.")
 * 
 *     cdef _get_join_ra_response(self, op_name, shared_ptr[CTable] output, CStatus status):             # <<<<<<<<<<<<<<
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table._get_join_ra_response", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":311
 *             raise ValueError(f"{op_name} operation failed: : {status.get_msg().decode()}")
 * 
 *     cdef _get_ra_response(self, table, ra_op_name):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CTable] output
 *         cdef shared_ptr[CTable] right = pycylon_unwrap_table(table)
 */

static PyObject *__pyx_f_7pycylon_4data_5table_5Table__get_ra_response(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_table, PyObject *__pyx_v_ra_op_name) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::shared_ptr<cylon::Table>  __pyx_v_right;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_ra_response", 0);

  /* "pycylon/data/table.pyx":313
 *     cdef _get_ra_response(self, table, ra_op_name):
 *         cdef shared_ptr[CTable] output
 *         cdef shared_ptr[CTable] right = pycylon_unwrap_table(table)             # <<<<<<<<<<<<<<
 *         cdef CStatus status
 *         # TODO: add callable for Cython functions via FPointers
 */
  __pyx_v_right = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_table(__pyx_v_table);

  /* "pycylon/data/table.pyx":317
 *         # TODO: add callable for Cython functions via FPointers
 * 
 *         if ra_op_name == 'union':             # <<<<<<<<<<<<<<
 *             status = Union(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_union':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_ra_op_name, __pyx_n_u_union, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":318
 * 
 *         if ra_op_name == 'union':
 *             status = Union(self.table_shd_ptr, right, output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == 'distributed_union':
 *             status = DistributedUnion(self.table_shd_ptr, right, output)
 */
    __pyx_v_status = cylon::Union(__pyx_v_self->table_shd_ptr, __pyx_v_right, __pyx_v_output);

    /* "pycylon/data/table.pyx":317
 *         # TODO: add callable for Cython functions via FPointers
 * 
 *         if ra_op_name == 'union':             # <<<<<<<<<<<<<<
 *             status = Union(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_union':
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":319
 *         if ra_op_name == 'union':
 *             status = Union(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_union':             # <<<<<<<<<<<<<<
 *             status = DistributedUnion(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'intersect':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_ra_op_name, __pyx_n_u_distributed_union, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 319, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":320
 *             status = Union(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_union':
 *             status = DistributedUnion(self.table_shd_ptr, right, output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == 'intersect':
 *             status = Intersect(self.table_shd_ptr, right, output)
 */
    __pyx_v_status = cylon::DistributedUnion(__pyx_v_self->table_shd_ptr, __pyx_v_right, __pyx_v_output);

    /* "pycylon/data/table.pyx":319
 *         if ra_op_name == 'union':
 *             status = Union(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_union':             # <<<<<<<<<<<<<<
 *             status = DistributedUnion(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'intersect':
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":321
 *         elif ra_op_name == 'distributed_union':
 *             status = DistributedUnion(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'intersect':             # <<<<<<<<<<<<<<
 *             status = Intersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_intersect':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_ra_op_name, __pyx_n_u_intersect, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 321, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":322
 *             status = DistributedUnion(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'intersect':
 *             status = Intersect(self.table_shd_ptr, right, output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == 'distributed_intersect':
 *             status = DistributedIntersect(self.table_shd_ptr, right, output)
 */
    __pyx_v_status = cylon::Intersect(__pyx_v_self->table_shd_ptr, __pyx_v_right, __pyx_v_output);

    /* "pycylon/data/table.pyx":321
 *         elif ra_op_name == 'distributed_union':
 *             status = DistributedUnion(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'intersect':             # <<<<<<<<<<<<<<
 *             status = Intersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_intersect':
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":323
 *         elif ra_op_name == 'intersect':
 *             status = Intersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_intersect':             # <<<<<<<<<<<<<<
 *             status = DistributedIntersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'subtract':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_ra_op_name, __pyx_n_u_distributed_intersect, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":324
 *             status = Intersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_intersect':
 *             status = DistributedIntersect(self.table_shd_ptr, right, output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == 'subtract':
 *             status = Subtract(self.table_shd_ptr, right, output)
 */
    __pyx_v_status = cylon::DistributedIntersect(__pyx_v_self->table_shd_ptr, __pyx_v_right, __pyx_v_output);

    /* "pycylon/data/table.pyx":323
 *         elif ra_op_name == 'intersect':
 *             status = Intersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_intersect':             # <<<<<<<<<<<<<<
 *             status = DistributedIntersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'subtract':
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":325
 *         elif ra_op_name == 'distributed_intersect':
 *             status = DistributedIntersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'subtract':             # <<<<<<<<<<<<<<
 *             status = Subtract(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_subtract':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_ra_op_name, __pyx_n_u_subtract, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 325, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":326
 *             status = DistributedIntersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'subtract':
 *             status = Subtract(self.table_shd_ptr, right, output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == 'distributed_subtract':
 *             status = DistributedSubtract(self.table_shd_ptr, right, output)
 */
    __pyx_v_status = cylon::Subtract(__pyx_v_self->table_shd_ptr, __pyx_v_right, __pyx_v_output);

    /* "pycylon/data/table.pyx":325
 *         elif ra_op_name == 'distributed_intersect':
 *             status = DistributedIntersect(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'subtract':             # <<<<<<<<<<<<<<
 *             status = Subtract(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_subtract':
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":327
 *         elif ra_op_name == 'subtract':
 *             status = Subtract(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_subtract':             # <<<<<<<<<<<<<<
 *             status = DistributedSubtract(self.table_shd_ptr, right, output)
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_ra_op_name, __pyx_n_u_distributed_subtract, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":328
 *             status = Subtract(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_subtract':
 *             status = DistributedSubtract(self.table_shd_ptr, right, output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"Unsupported relational algebra operator: {ra_op_name}")
 */
    __pyx_v_status = cylon::DistributedSubtract(__pyx_v_self->table_shd_ptr, __pyx_v_right, __pyx_v_output);

    /* "pycylon/data/table.pyx":327
 *         elif ra_op_name == 'subtract':
 *             status = Subtract(self.table_shd_ptr, right, output)
 *         elif ra_op_name == 'distributed_subtract':             # <<<<<<<<<<<<<<
 *             status = DistributedSubtract(self.table_shd_ptr, right, output)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":330
 *             status = DistributedSubtract(self.table_shd_ptr, right, output)
 *         else:
 *             raise ValueError(f"Unsupported relational algebra operator: {ra_op_name}")             # <<<<<<<<<<<<<<
 * 
 *         if status.is_ok():
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_ra_op_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_relational_algebra_o, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 330, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":332
 *             raise ValueError(f"Unsupported relational algebra operator: {ra_op_name}")
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":333
 * 
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"{ra_op_name} operation failed : {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":332
 *             raise ValueError(f"Unsupported relational algebra operator: {ra_op_name}")
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":335
 *             return pycylon_wrap_table(output)
 *         else:
 *             raise ValueError(f"{ra_op_name} operation failed : {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def join(self, table: Table, join_type: str,
 */
  /*else*/ {
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_ra_op_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_operation_failed_2);
    __pyx_t_4 += 20;
    __Pyx_GIVEREF(__pyx_kp_u_operation_failed_2);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_operation_failed_2);
    __pyx_t_3 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 335, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":311
 *             raise ValueError(f"{op_name} operation failed: : {status.get_msg().decode()}")
 * 
 *     cdef _get_ra_response(self, table, ra_op_name):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CTable] output
 *         cdef shared_ptr[CTable] right = pycylon_unwrap_table(table)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table._get_ra_response", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":337
 *             raise ValueError(f"{ra_op_name} operation failed : {status.get_msg().decode()}")
 * 
 *     def join(self, table: Table, join_type: str,             # <<<<<<<<<<<<<<
 *              algorithm: str, **kwargs) -> Table:
 *         """
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_33join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_32join[] = "Table.join(self, Table table: Table, unicode join_type: str, unicode algorithm: str, **kwargs) -> Table\n\n        Joins two PyCylon tables\n        :param table: PyCylon table on which the join is performed (becomes the left table)\n        :param join_type: Join Type as str [\"inner\", \"left\", \"right\", \"outer\"]\n        :param algorithm: Join Algorithm as str [\"hash\", \"sort\"]\n        :kwargs left_on: Join column of the left table as List[int] or List[str], right_on:\n        Join column of the right table as List[int] or List[str], on: Join column in common with\n        both tables as a List[int] or List[str].\n        :return: Joined PyCylon table\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_33join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table = 0;
  PyObject *__pyx_v_join_type = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("join (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_table,&__pyx_n_s_join_type,&__pyx_n_s_algorithm,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_join_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("join", 1, 3, 3, 1); __PYX_ERR(0, 337, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("join", 1, 3, 3, 2); __PYX_ERR(0, 337, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "join") < 0)) __PYX_ERR(0, 337, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_table = ((struct __pyx_obj_7pycylon_4data_5table_Table *)values[0]);
    __pyx_v_join_type = ((PyObject*)values[1]);
    __pyx_v_algorithm = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("join", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 337, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pycylon.data.table.Table.join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 337, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_join_type), (&PyUnicode_Type), 1, "join_type", 1))) __PYX_ERR(0, 337, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_algorithm), (&PyUnicode_Type), 1, "algorithm", 1))) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_32join(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_table, __pyx_v_join_type, __pyx_v_algorithm, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_32join(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_join_type, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_kwargs) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::shared_ptr<cylon::Table>  __pyx_v_right;
  cylon::join::config::JoinConfig *__pyx_v_jcptr;
  PyObject *__pyx_v_left_cols = NULL;
  PyObject *__pyx_v_right_cols = NULL;
  PyObject *__pyx_v_left_prefix = NULL;
  PyObject *__pyx_v_right_prefix = NULL;
  struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig *__pyx_v_pjc = NULL;
  cylon::Status __pyx_v_status;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("join", 0);

  /* "pycylon/data/table.pyx":350
 *         """
 *         cdef shared_ptr[CTable] output
 *         cdef shared_ptr[CTable] right = pycylon_unwrap_table(table)             # <<<<<<<<<<<<<<
 *         cdef CJoinConfig *jcptr
 * 
 */
  __pyx_v_right = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_table(((PyObject *)__pyx_v_table));

  /* "pycylon/data/table.pyx":353
 *         cdef CJoinConfig *jcptr
 * 
 *         left_cols, right_cols = self._get_join_column_indices(table=table, **kwargs)             # <<<<<<<<<<<<<<
 *         left_prefix = kwargs.get('left_prefix') if 'left_prefix' in kwargs else ""
 *         right_prefix = kwargs.get('right_prefix') if 'right_prefix' in kwargs else ""
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_join_column_indices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_table, ((PyObject *)__pyx_v_table)) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_3 = 0;
  if (__Pyx_MergeKeywords(__pyx_t_2, __pyx_v_kwargs) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 353, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_left_cols = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_right_cols = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":354
 * 
 *         left_cols, right_cols = self._get_join_column_indices(table=table, **kwargs)
 *         left_prefix = kwargs.get('left_prefix') if 'left_prefix' in kwargs else ""             # <<<<<<<<<<<<<<
 *         right_prefix = kwargs.get('right_prefix') if 'right_prefix' in kwargs else ""
 * 
 */
  __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_left_prefix, __pyx_v_kwargs, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 354, __pyx_L1_error)
  if ((__pyx_t_6 != 0)) {
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_left_prefix, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_t_3 = __pyx_kp_u__7;
  }
  __pyx_v_left_prefix = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":355
 *         left_cols, right_cols = self._get_join_column_indices(table=table, **kwargs)
 *         left_prefix = kwargs.get('left_prefix') if 'left_prefix' in kwargs else ""
 *         right_prefix = kwargs.get('right_prefix') if 'right_prefix' in kwargs else ""             # <<<<<<<<<<<<<<
 * 
 *         pjc = JoinConfig(join_type, algorithm, left_cols, right_cols, left_prefix, right_prefix)
 */
  __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_right_prefix, __pyx_v_kwargs, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 355, __pyx_L1_error)
  if ((__pyx_t_6 != 0)) {
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_right_prefix, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_t_3 = __pyx_kp_u__7;
  }
  __pyx_v_right_prefix = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":357
 *         right_prefix = kwargs.get('right_prefix') if 'right_prefix' in kwargs else ""
 * 
 *         pjc = JoinConfig(join_type, algorithm, left_cols, right_cols, left_prefix, right_prefix)             # <<<<<<<<<<<<<<
 *         jcptr = pycylon_unwrap_join_config(pjc)
 * 
 */
  __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_join_type);
  __Pyx_GIVEREF(__pyx_v_join_type);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_join_type);
  __Pyx_INCREF(__pyx_v_algorithm);
  __Pyx_GIVEREF(__pyx_v_algorithm);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_algorithm);
  __Pyx_INCREF(__pyx_v_left_cols);
  __Pyx_GIVEREF(__pyx_v_left_cols);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_left_cols);
  __Pyx_INCREF(__pyx_v_right_cols);
  __Pyx_GIVEREF(__pyx_v_right_cols);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_right_cols);
  __Pyx_INCREF(__pyx_v_left_prefix);
  __Pyx_GIVEREF(__pyx_v_left_prefix);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_left_prefix);
  __Pyx_INCREF(__pyx_v_right_prefix);
  __Pyx_GIVEREF(__pyx_v_right_prefix);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_right_prefix);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pycylon_6common_11join_config_JoinConfig), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pjc = ((struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":358
 * 
 *         pjc = JoinConfig(join_type, algorithm, left_cols, right_cols, left_prefix, right_prefix)
 *         jcptr = pycylon_unwrap_join_config(pjc)             # <<<<<<<<<<<<<<
 * 
 *         cdef CStatus status = Join(self.table_shd_ptr, right, jcptr[0], output)
 */
  __pyx_v_jcptr = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_join_config(((PyObject *)__pyx_v_pjc));

  /* "pycylon/data/table.pyx":360
 *         jcptr = pycylon_unwrap_join_config(pjc)
 * 
 *         cdef CStatus status = Join(self.table_shd_ptr, right, jcptr[0], output)             # <<<<<<<<<<<<<<
 *         return self._get_join_ra_response("Join", output, status)
 * 
 */
  __pyx_v_status = cylon::Join(__pyx_v_self->table_shd_ptr, __pyx_v_right, (__pyx_v_jcptr[0]), __pyx_v_output);

  /* "pycylon/data/table.pyx":361
 * 
 *         cdef CStatus status = Join(self.table_shd_ptr, right, jcptr[0], output)
 *         return self._get_join_ra_response("Join", output, status)             # <<<<<<<<<<<<<<
 * 
 *     def distributed_join(self, table: Table, join_type: str,
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_join_ra_response(__pyx_v_self, __pyx_n_u_Join, __pyx_v_output, __pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":337
 *             raise ValueError(f"{ra_op_name} operation failed : {status.get_msg().decode()}")
 * 
 *     def join(self, table: Table, join_type: str,             # <<<<<<<<<<<<<<
 *              algorithm: str, **kwargs) -> Table:
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table.join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_left_cols);
  __Pyx_XDECREF(__pyx_v_right_cols);
  __Pyx_XDECREF(__pyx_v_left_prefix);
  __Pyx_XDECREF(__pyx_v_right_prefix);
  __Pyx_XDECREF((PyObject *)__pyx_v_pjc);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":363
 *         return self._get_join_ra_response("Join", output, status)
 * 
 *     def distributed_join(self, table: Table, join_type: str,             # <<<<<<<<<<<<<<
 *                          algorithm: str, **kwargs) -> Table:
 *         """
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_35distributed_join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_34distributed_join[] = "Table.distributed_join(self, Table table: Table, unicode join_type: str, unicode algorithm: str, **kwargs) -> Table\n\n         Joins two PyCylon tables in distributed memory\n        :param table: PyCylon table on which the join is performed (becomes the left table)\n        :param join_type: Join Type as str [\"inner\", \"left\", \"right\", \"outer\"]\n        :param algorithm: Join Algorithm as str [\"hash\", \"sort\"]\n        :kwargs left_on: Join column of the left table as List[int] or List[str], right_on:\n        Join column of the right table as List[int] or List[str], on: Join column in common with\n        both tables as a List[int] or List[str].\n        :return: Joined PyCylon table\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_35distributed_join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table = 0;
  PyObject *__pyx_v_join_type = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distributed_join (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_table,&__pyx_n_s_join_type,&__pyx_n_s_algorithm,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_join_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distributed_join", 1, 3, 3, 1); __PYX_ERR(0, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distributed_join", 1, 3, 3, 2); __PYX_ERR(0, 363, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "distributed_join") < 0)) __PYX_ERR(0, 363, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_table = ((struct __pyx_obj_7pycylon_4data_5table_Table *)values[0]);
    __pyx_v_join_type = ((PyObject*)values[1]);
    __pyx_v_algorithm = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distributed_join", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 363, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 363, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_join_type), (&PyUnicode_Type), 1, "join_type", 1))) __PYX_ERR(0, 363, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_algorithm), (&PyUnicode_Type), 1, "algorithm", 1))) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_34distributed_join(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_table, __pyx_v_join_type, __pyx_v_algorithm, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_34distributed_join(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_join_type, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_kwargs) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::shared_ptr<cylon::Table>  __pyx_v_right;
  cylon::join::config::JoinConfig *__pyx_v_jcptr;
  PyObject *__pyx_v_left_cols = NULL;
  PyObject *__pyx_v_right_cols = NULL;
  PyObject *__pyx_v_left_prefix = NULL;
  PyObject *__pyx_v_right_prefix = NULL;
  struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig *__pyx_v_pjc = NULL;
  cylon::Status __pyx_v_status;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distributed_join", 0);

  /* "pycylon/data/table.pyx":376
 *         """
 *         cdef shared_ptr[CTable] output
 *         cdef shared_ptr[CTable] right = pycylon_unwrap_table(table)             # <<<<<<<<<<<<<<
 *         cdef CJoinConfig *jcptr
 * 
 */
  __pyx_v_right = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_table(((PyObject *)__pyx_v_table));

  /* "pycylon/data/table.pyx":379
 *         cdef CJoinConfig *jcptr
 * 
 *         left_cols, right_cols = self._get_join_column_indices(table=table, **kwargs)             # <<<<<<<<<<<<<<
 *         left_prefix = kwargs.get('left_prefix') if 'left_prefix' in kwargs else ""
 *         right_prefix = kwargs.get('right_prefix') if 'right_prefix' in kwargs else ""
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_join_column_indices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_table, ((PyObject *)__pyx_v_table)) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_3 = 0;
  if (__Pyx_MergeKeywords(__pyx_t_2, __pyx_v_kwargs) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 379, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 379, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_left_cols = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_right_cols = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":380
 * 
 *         left_cols, right_cols = self._get_join_column_indices(table=table, **kwargs)
 *         left_prefix = kwargs.get('left_prefix') if 'left_prefix' in kwargs else ""             # <<<<<<<<<<<<<<
 *         right_prefix = kwargs.get('right_prefix') if 'right_prefix' in kwargs else ""
 * 
 */
  __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_left_prefix, __pyx_v_kwargs, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
  if ((__pyx_t_6 != 0)) {
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_left_prefix, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_t_3 = __pyx_kp_u__7;
  }
  __pyx_v_left_prefix = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":381
 *         left_cols, right_cols = self._get_join_column_indices(table=table, **kwargs)
 *         left_prefix = kwargs.get('left_prefix') if 'left_prefix' in kwargs else ""
 *         right_prefix = kwargs.get('right_prefix') if 'right_prefix' in kwargs else ""             # <<<<<<<<<<<<<<
 * 
 *         pjc = JoinConfig(join_type, algorithm, left_cols, right_cols, left_prefix, right_prefix)
 */
  __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_right_prefix, __pyx_v_kwargs, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 381, __pyx_L1_error)
  if ((__pyx_t_6 != 0)) {
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_right_prefix, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_t_3 = __pyx_kp_u__7;
  }
  __pyx_v_right_prefix = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":383
 *         right_prefix = kwargs.get('right_prefix') if 'right_prefix' in kwargs else ""
 * 
 *         pjc = JoinConfig(join_type, algorithm, left_cols, right_cols, left_prefix, right_prefix)             # <<<<<<<<<<<<<<
 *         jcptr = pycylon_unwrap_join_config(pjc)
 * 
 */
  __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_join_type);
  __Pyx_GIVEREF(__pyx_v_join_type);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_join_type);
  __Pyx_INCREF(__pyx_v_algorithm);
  __Pyx_GIVEREF(__pyx_v_algorithm);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_algorithm);
  __Pyx_INCREF(__pyx_v_left_cols);
  __Pyx_GIVEREF(__pyx_v_left_cols);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_left_cols);
  __Pyx_INCREF(__pyx_v_right_cols);
  __Pyx_GIVEREF(__pyx_v_right_cols);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_right_cols);
  __Pyx_INCREF(__pyx_v_left_prefix);
  __Pyx_GIVEREF(__pyx_v_left_prefix);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_left_prefix);
  __Pyx_INCREF(__pyx_v_right_prefix);
  __Pyx_GIVEREF(__pyx_v_right_prefix);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_right_prefix);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pycylon_6common_11join_config_JoinConfig), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pjc = ((struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":384
 * 
 *         pjc = JoinConfig(join_type, algorithm, left_cols, right_cols, left_prefix, right_prefix)
 *         jcptr = pycylon_unwrap_join_config(pjc)             # <<<<<<<<<<<<<<
 * 
 *         cdef CStatus status = DistributedJoin(self.table_shd_ptr, right, jcptr[0], output)
 */
  __pyx_v_jcptr = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_join_config(((PyObject *)__pyx_v_pjc));

  /* "pycylon/data/table.pyx":386
 *         jcptr = pycylon_unwrap_join_config(pjc)
 * 
 *         cdef CStatus status = DistributedJoin(self.table_shd_ptr, right, jcptr[0], output)             # <<<<<<<<<<<<<<
 *         return self._get_join_ra_response("Distributed Join", output, status)
 * 
 */
  __pyx_v_status = cylon::DistributedJoin(__pyx_v_self->table_shd_ptr, __pyx_v_right, (__pyx_v_jcptr[0]), __pyx_v_output);

  /* "pycylon/data/table.pyx":387
 * 
 *         cdef CStatus status = DistributedJoin(self.table_shd_ptr, right, jcptr[0], output)
 *         return self._get_join_ra_response("Distributed Join", output, status)             # <<<<<<<<<<<<<<
 * 
 *     def union(self, table: Table) -> Table:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_join_ra_response(__pyx_v_self, __pyx_kp_u_Distributed_Join, __pyx_v_output, __pyx_v_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 387, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":363
 *         return self._get_join_ra_response("Join", output, status)
 * 
 *     def distributed_join(self, table: Table, join_type: str,             # <<<<<<<<<<<<<<
 *                          algorithm: str, **kwargs) -> Table:
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_left_cols);
  __Pyx_XDECREF(__pyx_v_right_cols);
  __Pyx_XDECREF(__pyx_v_left_prefix);
  __Pyx_XDECREF(__pyx_v_right_prefix);
  __Pyx_XDECREF((PyObject *)__pyx_v_pjc);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":389
 *         return self._get_join_ra_response("Distributed Join", output, status)
 * 
 *     def union(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Union two PyCylon tables
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_37union(PyObject *__pyx_v_self, PyObject *__pyx_v_table); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_36union[] = "Table.union(self, Table table: Table) -> Table\n\n        Union two PyCylon tables\n        :param table: PyCylon table on which the union is performed (becomes the left table)\n        :return: PyCylon table\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_37union(PyObject *__pyx_v_self, PyObject *__pyx_v_table) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("union (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_36union(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_table));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_36union(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("union", 0);

  /* "pycylon/data/table.pyx":395
 *         :return: PyCylon table
 *         '''
 *         return self._get_ra_response(table, 'union')             # <<<<<<<<<<<<<<
 * 
 *     def distributed_union(self, table: Table) -> Table:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_ra_response(__pyx_v_self, ((PyObject *)__pyx_v_table), __pyx_n_u_union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 395, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":389
 *         return self._get_join_ra_response("Distributed Join", output, status)
 * 
 *     def union(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Union two PyCylon tables
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":397
 *         return self._get_ra_response(table, 'union')
 * 
 *     def distributed_union(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Union two PyCylon tables in distributed memory
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_39distributed_union(PyObject *__pyx_v_self, PyObject *__pyx_v_table); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_38distributed_union[] = "Table.distributed_union(self, Table table: Table) -> Table\n\n        Union two PyCylon tables in distributed memory\n        :param table: PyCylon table on which the union is performed (becomes the left table)\n        :return: PyCylon table\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_39distributed_union(PyObject *__pyx_v_self, PyObject *__pyx_v_table) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distributed_union (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_38distributed_union(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_table));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_38distributed_union(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distributed_union", 0);

  /* "pycylon/data/table.pyx":403
 *         :return: PyCylon table
 *         '''
 *         return self._get_ra_response(table, 'distributed_union')             # <<<<<<<<<<<<<<
 * 
 *     def subtract(self, table: Table) -> Table:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_ra_response(__pyx_v_self, ((PyObject *)__pyx_v_table), __pyx_n_u_distributed_union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":397
 *         return self._get_ra_response(table, 'union')
 * 
 *     def distributed_union(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Union two PyCylon tables in distributed memory
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":405
 *         return self._get_ra_response(table, 'distributed_union')
 * 
 *     def subtract(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Subtract two PyCylon tables
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_41subtract(PyObject *__pyx_v_self, PyObject *__pyx_v_table); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_40subtract[] = "Table.subtract(self, Table table: Table) -> Table\n\n        Subtract two PyCylon tables\n        :param table: PyCylon table on which the subtract is performed (becomes the left table)\n        :return: PyCylon table\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_41subtract(PyObject *__pyx_v_self, PyObject *__pyx_v_table) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("subtract (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_40subtract(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_table));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_40subtract(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subtract", 0);

  /* "pycylon/data/table.pyx":411
 *         :return: PyCylon table
 *         '''
 *         return self._get_ra_response(table, 'subtract')             # <<<<<<<<<<<<<<
 * 
 *     def distributed_subtract(self, table: Table) -> Table:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_ra_response(__pyx_v_self, ((PyObject *)__pyx_v_table), __pyx_n_u_subtract); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 411, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":405
 *         return self._get_ra_response(table, 'distributed_union')
 * 
 *     def subtract(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Subtract two PyCylon tables
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.subtract", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":413
 *         return self._get_ra_response(table, 'subtract')
 * 
 *     def distributed_subtract(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Subtract two PyCylon tables in distributed memory
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_43distributed_subtract(PyObject *__pyx_v_self, PyObject *__pyx_v_table); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_42distributed_subtract[] = "Table.distributed_subtract(self, Table table: Table) -> Table\n\n        Subtract two PyCylon tables in distributed memory\n        :param table: PyCylon table on which the subtract is performed (becomes the left table)\n        :return: PyCylon table\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_43distributed_subtract(PyObject *__pyx_v_self, PyObject *__pyx_v_table) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distributed_subtract (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 413, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_42distributed_subtract(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_table));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_42distributed_subtract(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distributed_subtract", 0);

  /* "pycylon/data/table.pyx":419
 *         :return: PyCylon table
 *         '''
 *         return self._get_ra_response(table, 'distributed_subtract')             # <<<<<<<<<<<<<<
 * 
 *     def intersect(self, table: Table) -> Table:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_ra_response(__pyx_v_self, ((PyObject *)__pyx_v_table), __pyx_n_u_distributed_subtract); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 419, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":413
 *         return self._get_ra_response(table, 'subtract')
 * 
 *     def distributed_subtract(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Subtract two PyCylon tables in distributed memory
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_subtract", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":421
 *         return self._get_ra_response(table, 'distributed_subtract')
 * 
 *     def intersect(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Intersect two PyCylon tables
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_45intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_table); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_44intersect[] = "Table.intersect(self, Table table: Table) -> Table\n\n        Intersect two PyCylon tables\n        :param table: PyCylon table on which the intersect is performed (becomes the left table)\n        :return: PyCylon table\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_45intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_table) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 421, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_44intersect(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_table));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_44intersect(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "pycylon/data/table.pyx":427
 *         :return: PyCylon table
 *         '''
 *         return self._get_ra_response(table, 'intersect')             # <<<<<<<<<<<<<<
 * 
 *     def distributed_intersect(self, table: Table) -> Table:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_ra_response(__pyx_v_self, ((PyObject *)__pyx_v_table), __pyx_n_u_intersect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":421
 *         return self._get_ra_response(table, 'distributed_subtract')
 * 
 *     def intersect(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Intersect two PyCylon tables
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":429
 *         return self._get_ra_response(table, 'intersect')
 * 
 *     def distributed_intersect(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Intersect two PyCylon tables in distributed memory
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_47distributed_intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_table); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_46distributed_intersect[] = "Table.distributed_intersect(self, Table table: Table) -> Table\n\n        Intersect two PyCylon tables in distributed memory\n        :param table: PyCylon table on which the join is performed (becomes the left table)\n        :return: PyCylon table\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_47distributed_intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_table) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distributed_intersect (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 429, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_46distributed_intersect(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_table));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_46distributed_intersect(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distributed_intersect", 0);

  /* "pycylon/data/table.pyx":435
 *         :return: PyCylon table
 *         '''
 *         return self._get_ra_response(table, 'distributed_intersect')             # <<<<<<<<<<<<<<
 * 
 *     def project(self, columns: List):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_ra_response(__pyx_v_self, ((PyObject *)__pyx_v_table), __pyx_n_u_distributed_intersect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 435, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":429
 *         return self._get_ra_response(table, 'intersect')
 * 
 *     def distributed_intersect(self, table: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Intersect two PyCylon tables in distributed memory
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":437
 *         return self._get_ra_response(table, 'distributed_intersect')
 * 
 *     def project(self, columns: List):             # <<<<<<<<<<<<<<
 *         '''
 *         Project a PyCylon table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_49project(PyObject *__pyx_v_self, PyObject *__pyx_v_columns); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_48project[] = "Table.project(self, columns: List)\n\n        Project a PyCylon table\n        :param columns: List of columns to be projected\n        :return: PyCylon table\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_49project(PyObject *__pyx_v_self, PyObject *__pyx_v_columns) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_48project(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_columns));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_48project(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_columns) {
  std::vector<int>  __pyx_v_c_columns;
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_v_column = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pycylon/data/table.pyx":446
 *         cdef shared_ptr[CTable] output
 *         cdef CStatus status
 *         if columns:             # <<<<<<<<<<<<<<
 *             if isinstance(columns[0], int) or isinstance(columns[0], str):
 *                 for column in columns:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_columns); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 446, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":447
 *         cdef CStatus status
 *         if columns:
 *             if isinstance(columns[0], int) or isinstance(columns[0], str):             # <<<<<<<<<<<<<<
 *                 for column in columns:
 *                     if isinstance(column, str):
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_columns, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyInt_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_columns, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyUnicode_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (likely(__pyx_t_1)) {

      /* "pycylon/data/table.pyx":448
 *         if columns:
 *             if isinstance(columns[0], int) or isinstance(columns[0], str):
 *                 for column in columns:             # <<<<<<<<<<<<<<
 *                     if isinstance(column, str):
 *                         column = self._resolve_column_index_from_column_name(column)
 */
      if (likely(PyList_CheckExact(__pyx_v_columns)) || PyTuple_CheckExact(__pyx_v_columns)) {
        __pyx_t_2 = __pyx_v_columns; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_columns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 448, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 448, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 448, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_2);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 448, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_column, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "pycylon/data/table.pyx":449
 *             if isinstance(columns[0], int) or isinstance(columns[0], str):
 *                 for column in columns:
 *                     if isinstance(column, str):             # <<<<<<<<<<<<<<
 *                         column = self._resolve_column_index_from_column_name(column)
 *                     c_columns.push_back(column)
 */
        __pyx_t_1 = PyUnicode_Check(__pyx_v_column); 
        __pyx_t_3 = (__pyx_t_1 != 0);
        if (__pyx_t_3) {

          /* "pycylon/data/table.pyx":450
 *                 for column in columns:
 *                     if isinstance(column, str):
 *                         column = self._resolve_column_index_from_column_name(column)             # <<<<<<<<<<<<<<
 *                     c_columns.push_back(column)
 *                 status = Project(self.table_shd_ptr, c_columns, output)
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 450, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_v_column) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_column);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 450, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF_SET(__pyx_v_column, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "pycylon/data/table.pyx":449
 *             if isinstance(columns[0], int) or isinstance(columns[0], str):
 *                 for column in columns:
 *                     if isinstance(column, str):             # <<<<<<<<<<<<<<
 *                         column = self._resolve_column_index_from_column_name(column)
 *                     c_columns.push_back(column)
 */
        }

        /* "pycylon/data/table.pyx":451
 *                     if isinstance(column, str):
 *                         column = self._resolve_column_index_from_column_name(column)
 *                     c_columns.push_back(column)             # <<<<<<<<<<<<<<
 *                 status = Project(self.table_shd_ptr, c_columns, output)
 *                 if status.is_ok():
 */
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_column); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L1_error)
        try {
          __pyx_v_c_columns.push_back(__pyx_t_10);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 451, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":448
 *         if columns:
 *             if isinstance(columns[0], int) or isinstance(columns[0], str):
 *                 for column in columns:             # <<<<<<<<<<<<<<
 *                     if isinstance(column, str):
 *                         column = self._resolve_column_index_from_column_name(column)
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":452
 *                         column = self._resolve_column_index_from_column_name(column)
 *                     c_columns.push_back(column)
 *                 status = Project(self.table_shd_ptr, c_columns, output)             # <<<<<<<<<<<<<<
 *                 if status.is_ok():
 *                     return pycylon_wrap_table(output)
 */
      __pyx_v_status = cylon::Project(__pyx_v_self->table_shd_ptr, __pyx_v_c_columns, __pyx_v_output);

      /* "pycylon/data/table.pyx":453
 *                     c_columns.push_back(column)
 *                 status = Project(self.table_shd_ptr, c_columns, output)
 *                 if status.is_ok():             # <<<<<<<<<<<<<<
 *                     return pycylon_wrap_table(output)
 *                 else:
 */
      __pyx_t_3 = (__pyx_v_status.is_ok() != 0);
      if (likely(__pyx_t_3)) {

        /* "pycylon/data/table.pyx":454
 *                 status = Project(self.table_shd_ptr, c_columns, output)
 *                 if status.is_ok():
 *                     return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(f"Project operation failed : {status.get_msg().decode()}")
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "pycylon/data/table.pyx":453
 *                     c_columns.push_back(column)
 *                 status = Project(self.table_shd_ptr, c_columns, output)
 *                 if status.is_ok():             # <<<<<<<<<<<<<<
 *                     return pycylon_wrap_table(output)
 *                 else:
 */
      }

      /* "pycylon/data/table.pyx":456
 *                     return pycylon_wrap_table(output)
 *                 else:
 *                     raise ValueError(f"Project operation failed : {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Invalid column list, it must be column names in string or "
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Project_operation_failed, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 456, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":447
 *         cdef CStatus status
 *         if columns:
 *             if isinstance(columns[0], int) or isinstance(columns[0], str):             # <<<<<<<<<<<<<<
 *                 for column in columns:
 *                     if isinstance(column, str):
 */
    }

    /* "pycylon/data/table.pyx":458
 *                     raise ValueError(f"Project operation failed : {status.get_msg().decode()}")
 *             else:
 *                 raise ValueError("Invalid column list, it must be column names in string or "             # <<<<<<<<<<<<<<
 *                                  "column indices in int")
 *         else:
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 458, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":446
 *         cdef shared_ptr[CTable] output
 *         cdef CStatus status
 *         if columns:             # <<<<<<<<<<<<<<
 *             if isinstance(columns[0], int) or isinstance(columns[0], str):
 *                 for column in columns:
 */
  }

  /* "pycylon/data/table.pyx":461
 *                                  "column indices in int")
 *         else:
 *             raise ValueError("Columns not passed.")             # <<<<<<<<<<<<<<
 * 
 *     def distributed_sort(self, order_by, ascending = True,
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 461, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":437
 *         return self._get_ra_response(table, 'distributed_intersect')
 * 
 *     def project(self, columns: List):             # <<<<<<<<<<<<<<
 *         '''
 *         Project a PyCylon table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":463
 *             raise ValueError("Columns not passed.")
 * 
 *     def distributed_sort(self, order_by, ascending = True,             # <<<<<<<<<<<<<<
 *                          sort_options: SortOptions = None)-> Table:
 *         """
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_51distributed_sort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_50distributed_sort[] = "Table.distributed_sort(self, order_by, ascending=True, SortOptions sort_options: SortOptions = None) -> Table\n\n        Does a distributed sort on the table by re-partitioning the data to maintain the sort\n        order across all processes\n        Args:\n            sort_column: str or int\n            sort_options: SortOption\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> from pycylon.data.table import SortOptions\n        >>> s = SortOptions(num_bins=0, num_samples=0)\n        >>> tb1.distributed_sort(order_by='use_id', ascending=True, sort_options=s)\n\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_51distributed_sort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order_by = 0;
  PyObject *__pyx_v_ascending = 0;
  struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_sort_options = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distributed_sort (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_by,&__pyx_n_s_ascending,&__pyx_n_s_sort_options,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);

    /* "pycylon/data/table.pyx":464
 * 
 *     def distributed_sort(self, order_by, ascending = True,
 *                          sort_options: SortOptions = None)-> Table:             # <<<<<<<<<<<<<<
 *         """
 *         Does a distributed sort on the table by re-partitioning the data to maintain the sort
 */
    values[2] = (PyObject *)((struct __pyx_obj_7pycylon_4data_5table_SortOptions *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_by)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ascending);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort_options);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distributed_sort") < 0)) __PYX_ERR(0, 463, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_order_by = values[0];
    __pyx_v_ascending = values[1];
    __pyx_v_sort_options = ((struct __pyx_obj_7pycylon_4data_5table_SortOptions *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distributed_sort", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 463, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_sort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sort_options), __pyx_ptype_7pycylon_4data_5table_SortOptions, 1, "sort_options", 0))) __PYX_ERR(0, 464, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_50distributed_sort(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_order_by, __pyx_v_ascending, __pyx_v_sort_options);

  /* "pycylon/data/table.pyx":463
 *             raise ValueError("Columns not passed.")
 * 
 *     def distributed_sort(self, order_by, ascending = True,             # <<<<<<<<<<<<<<
 *                          sort_options: SortOptions = None)-> Table:
 *         """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_50distributed_sort(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_order_by, PyObject *__pyx_v_ascending, struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_sort_options) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::shared_ptr<cylon::SortOptions>  __pyx_v_csort_options;
  std::vector<int>  __pyx_v_sort_index;
  std::vector<bool>  __pyx_v_order_directions;
  PyObject *__pyx_v_b = NULL;
  std::vector<int> ::size_type __pyx_v_i;
  cylon::Status __pyx_v_status;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  std::vector<int> ::size_type __pyx_t_10;
  std::vector<int> ::size_type __pyx_t_11;
  std::vector<int> ::size_type __pyx_t_12;
  bool __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distributed_sort", 0);

  /* "pycylon/data/table.pyx":487
 *         cdef vector[cpp_bool] order_directions
 * 
 *         if isinstance(order_by, str):             # <<<<<<<<<<<<<<
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_order_by); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":488
 * 
 *         if isinstance(order_by, str):
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))             # <<<<<<<<<<<<<<
 *         elif isinstance(order_by, int):
 *             sort_index.push_back(order_by)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_order_by) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_order_by);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_sort_index.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 488, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":487
 *         cdef vector[cpp_bool] order_directions
 * 
 *         if isinstance(order_by, str):             # <<<<<<<<<<<<<<
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":489
 *         if isinstance(order_by, str):
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):             # <<<<<<<<<<<<<<
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_order_by); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":490
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):
 *             sort_index.push_back(order_by)             # <<<<<<<<<<<<<<
 *         elif isinstance(order_by, list):
 *             for b in order_by:
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_order_by); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L1_error)
    try {
      __pyx_v_sort_index.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 490, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":489
 *         if isinstance(order_by, str):
 *             sort_index.push_back(self._resolve_column_index_from_column_name(order_by))
 *         elif isinstance(order_by, int):             # <<<<<<<<<<<<<<
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":491
 *         elif isinstance(order_by, int):
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):             # <<<<<<<<<<<<<<
 *             for b in order_by:
 *                 if isinstance(b, str):
 */
  __pyx_t_1 = PyList_Check(__pyx_v_order_by); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":492
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):
 *             for b in order_by:             # <<<<<<<<<<<<<<
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 */
    if (likely(PyList_CheckExact(__pyx_v_order_by)) || PyTuple_CheckExact(__pyx_v_order_by)) {
      __pyx_t_3 = __pyx_v_order_by; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_order_by); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 492, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 492, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 492, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 492, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pycylon/data/table.pyx":493
 *         elif isinstance(order_by, list):
 *             for b in order_by:
 *                 if isinstance(b, str):             # <<<<<<<<<<<<<<
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):
 */
      __pyx_t_2 = PyUnicode_Check(__pyx_v_b); 
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "pycylon/data/table.pyx":494
 *             for b in order_by:
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))             # <<<<<<<<<<<<<<
 *                 elif isinstance(b, int):
 *                     sort_index.push_back(b)
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_9, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_b);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        try {
          __pyx_v_sort_index.push_back(__pyx_t_6);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 494, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":493
 *         elif isinstance(order_by, list):
 *             for b in order_by:
 *                 if isinstance(b, str):             # <<<<<<<<<<<<<<
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):
 */
        goto __pyx_L6;
      }

      /* "pycylon/data/table.pyx":495
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):             # <<<<<<<<<<<<<<
 *                     sort_index.push_back(b)
 *                 else:
 */
      __pyx_t_1 = PyInt_Check(__pyx_v_b); 
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (likely(__pyx_t_2)) {

        /* "pycylon/data/table.pyx":496
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):
 *                     sort_index.push_back(b)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise Exception(
 */
        __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_b); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L1_error)
        try {
          __pyx_v_sort_index.push_back(__pyx_t_6);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 496, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":495
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 *                 elif isinstance(b, int):             # <<<<<<<<<<<<<<
 *                     sort_index.push_back(b)
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "pycylon/data/table.pyx":498
 *                     sort_index.push_back(b)
 *                 else:
 *                     raise Exception(             # <<<<<<<<<<<<<<
 *                         'Unsupported type used to specify the sort by columns. Expected column name or index')
 *         else:
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 498, __pyx_L1_error)
      }
      __pyx_L6:;

      /* "pycylon/data/table.pyx":492
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):
 *             for b in order_by:             # <<<<<<<<<<<<<<
 *                 if isinstance(b, str):
 *                     sort_index.push_back(self._resolve_column_index_from_column_name(b))
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":491
 *         elif isinstance(order_by, int):
 *             sort_index.push_back(order_by)
 *         elif isinstance(order_by, list):             # <<<<<<<<<<<<<<
 *             for b in order_by:
 *                 if isinstance(b, str):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":501
 *                         'Unsupported type used to specify the sort by columns. Expected column name or index')
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 'Unsupported type used to specify the sort by columns. Expected column name or index')
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 501, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":504
 *                 'Unsupported type used to specify the sort by columns. Expected column name or index')
 * 
 *         if isinstance(ascending, type(True)):             # <<<<<<<<<<<<<<
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)
 */
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ascending, ((PyObject *)Py_TYPE(Py_True))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 504, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":505
 * 
 *         if isinstance(ascending, type(True)):
 *             for i in range(0, sort_index.size()):             # <<<<<<<<<<<<<<
 *                 order_directions.push_back(ascending)
 *         elif isinstance(ascending, list):
 */
    __pyx_t_10 = __pyx_v_sort_index.size();
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "pycylon/data/table.pyx":506
 *         if isinstance(ascending, type(True)):
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)             # <<<<<<<<<<<<<<
 *         elif isinstance(ascending, list):
 *             for i in range(0, sort_index.size()):
 */
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_ascending); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 506, __pyx_L1_error)
      try {
        __pyx_v_order_directions.push_back(__pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 506, __pyx_L1_error)
      }
    }

    /* "pycylon/data/table.pyx":504
 *                 'Unsupported type used to specify the sort by columns. Expected column name or index')
 * 
 *         if isinstance(ascending, type(True)):             # <<<<<<<<<<<<<<
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)
 */
    goto __pyx_L7;
  }

  /* "pycylon/data/table.pyx":507
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)
 *         elif isinstance(ascending, list):             # <<<<<<<<<<<<<<
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending[i])
 */
  __pyx_t_1 = PyList_Check(__pyx_v_ascending); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":508
 *                 order_directions.push_back(ascending)
 *         elif isinstance(ascending, list):
 *             for i in range(0, sort_index.size()):             # <<<<<<<<<<<<<<
 *                 order_directions.push_back(ascending[i])
 *         else:
 */
    __pyx_t_10 = __pyx_v_sort_index.size();
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "pycylon/data/table.pyx":509
 *         elif isinstance(ascending, list):
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending[i])             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ascending, __pyx_v_i, std::vector<int> ::size_type, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_v_order_directions.push_back(__pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 509, __pyx_L1_error)
      }
    }

    /* "pycylon/data/table.pyx":507
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending)
 *         elif isinstance(ascending, list):             # <<<<<<<<<<<<<<
 *             for i in range(0, sort_index.size()):
 *                 order_directions.push_back(ascending[i])
 */
    goto __pyx_L7;
  }

  /* "pycylon/data/table.pyx":511
 *                 order_directions.push_back(ascending[i])
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 'Unsupported format for ascending/descending order indication. Expected a boolean or a list of booleans')
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 511, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "pycylon/data/table.pyx":514
 *                 'Unsupported format for ascending/descending order indication. Expected a boolean or a list of booleans')
 * 
 *         if sort_options:             # <<<<<<<<<<<<<<
 *             csort_options = pycylon_unwrap_sort_options(sort_options)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_sort_options)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 514, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":515
 * 
 *         if sort_options:
 *             csort_options = pycylon_unwrap_sort_options(sort_options)             # <<<<<<<<<<<<<<
 *         else:
 *             csort_options = pycylon_unwrap_sort_options(SortOptions(0, 0))
 */
    __pyx_v_csort_options = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_sort_options(((PyObject *)__pyx_v_sort_options));

    /* "pycylon/data/table.pyx":514
 *                 'Unsupported format for ascending/descending order indication. Expected a boolean or a list of booleans')
 * 
 *         if sort_options:             # <<<<<<<<<<<<<<
 *             csort_options = pycylon_unwrap_sort_options(sort_options)
 *         else:
 */
    goto __pyx_L12;
  }

  /* "pycylon/data/table.pyx":517
 *             csort_options = pycylon_unwrap_sort_options(sort_options)
 *         else:
 *             csort_options = pycylon_unwrap_sort_options(SortOptions(0, 0))             # <<<<<<<<<<<<<<
 *         cdef CStatus status = DistributedSort(self.table_shd_ptr, sort_index, output,
 *                                               order_directions, csort_options.get()[0])
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pycylon_4data_5table_SortOptions), __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_csort_options = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_sort_options(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L12:;

  /* "pycylon/data/table.pyx":518
 *         else:
 *             csort_options = pycylon_unwrap_sort_options(SortOptions(0, 0))
 *         cdef CStatus status = DistributedSort(self.table_shd_ptr, sort_index, output,             # <<<<<<<<<<<<<<
 *                                               order_directions, csort_options.get()[0])
 *         if status.is_ok():
 */
  __pyx_v_status = cylon::DistributedSort(__pyx_v_self->table_shd_ptr, __pyx_v_sort_index, __pyx_v_output, __pyx_v_order_directions, (__pyx_v_csort_options.get()[0]));

  /* "pycylon/data/table.pyx":520
 *         cdef CStatus status = DistributedSort(self.table_shd_ptr, sort_index, output,
 *                                               order_directions, csort_options.get()[0])
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":521
 *                                               order_directions, csort_options.get()[0])
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"Operation failed: : {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_3 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 521, __pyx_L1_error)
    __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":520
 *         cdef CStatus status = DistributedSort(self.table_shd_ptr, sort_index, output,
 *                                               order_directions, csort_options.get()[0])
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":523
 *             return pycylon_wrap_table(output)
 *         else:
 *             raise ValueError(f"Operation failed: : {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def shuffle(self, hash_columns: List = None):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Operation_failed, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 523, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":463
 *             raise ValueError("Columns not passed.")
 * 
 *     def distributed_sort(self, order_by, ascending = True,             # <<<<<<<<<<<<<<
 *                          sort_options: SortOptions = None)-> Table:
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_sort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":525
 *             raise ValueError(f"Operation failed: : {status.get_msg().decode()}")
 * 
 *     def shuffle(self, hash_columns: List = None):             # <<<<<<<<<<<<<<
 *         '''
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_53shuffle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_52shuffle[] = "Table.shuffle(self, hash_columns: List = None)\n\n\n        Args:\n            hash_columns:\n\n        Returns:\n\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_53shuffle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hash_columns = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shuffle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hash_columns,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hash_columns);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "shuffle") < 0)) __PYX_ERR(0, 525, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_hash_columns = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shuffle", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 525, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.shuffle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_52shuffle(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_hash_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_52shuffle(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_hash_columns) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::vector<int>  __pyx_v_c_hash_columns;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_v_column = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shuffle", 0);

  /* "pycylon/data/table.pyx":538
 *         cdef CStatus status
 * 
 *         if hash_columns:             # <<<<<<<<<<<<<<
 *             if isinstance(hash_columns[0], int) or isinstance(hash_columns[0], str):
 *                 for column in hash_columns:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_hash_columns); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 538, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":539
 * 
 *         if hash_columns:
 *             if isinstance(hash_columns[0], int) or isinstance(hash_columns[0], str):             # <<<<<<<<<<<<<<
 *                 for column in hash_columns:
 *                     if isinstance(column, str):
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_hash_columns, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyInt_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_hash_columns, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyUnicode_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (likely(__pyx_t_1)) {

      /* "pycylon/data/table.pyx":540
 *         if hash_columns:
 *             if isinstance(hash_columns[0], int) or isinstance(hash_columns[0], str):
 *                 for column in hash_columns:             # <<<<<<<<<<<<<<
 *                     if isinstance(column, str):
 *                         column = self._resolve_column_index_from_column_name(column)
 */
      if (likely(PyList_CheckExact(__pyx_v_hash_columns)) || PyTuple_CheckExact(__pyx_v_hash_columns)) {
        __pyx_t_2 = __pyx_v_hash_columns; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_hash_columns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 540, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 540, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 540, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_2);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 540, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_column, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "pycylon/data/table.pyx":541
 *             if isinstance(hash_columns[0], int) or isinstance(hash_columns[0], str):
 *                 for column in hash_columns:
 *                     if isinstance(column, str):             # <<<<<<<<<<<<<<
 *                         column = self._resolve_column_index_from_column_name(column)
 *                     c_hash_columns.push_back(column)
 */
        __pyx_t_1 = PyUnicode_Check(__pyx_v_column); 
        __pyx_t_3 = (__pyx_t_1 != 0);
        if (__pyx_t_3) {

          /* "pycylon/data/table.pyx":542
 *                 for column in hash_columns:
 *                     if isinstance(column, str):
 *                         column = self._resolve_column_index_from_column_name(column)             # <<<<<<<<<<<<<<
 *                     c_hash_columns.push_back(column)
 *                 status = Shuffle(self.table_shd_ptr, c_hash_columns, output)
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_v_column) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_column);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF_SET(__pyx_v_column, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "pycylon/data/table.pyx":541
 *             if isinstance(hash_columns[0], int) or isinstance(hash_columns[0], str):
 *                 for column in hash_columns:
 *                     if isinstance(column, str):             # <<<<<<<<<<<<<<
 *                         column = self._resolve_column_index_from_column_name(column)
 *                     c_hash_columns.push_back(column)
 */
        }

        /* "pycylon/data/table.pyx":543
 *                     if isinstance(column, str):
 *                         column = self._resolve_column_index_from_column_name(column)
 *                     c_hash_columns.push_back(column)             # <<<<<<<<<<<<<<
 *                 status = Shuffle(self.table_shd_ptr, c_hash_columns, output)
 *                 if status.is_ok():
 */
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_column); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L1_error)
        try {
          __pyx_v_c_hash_columns.push_back(__pyx_t_10);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 543, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":540
 *         if hash_columns:
 *             if isinstance(hash_columns[0], int) or isinstance(hash_columns[0], str):
 *                 for column in hash_columns:             # <<<<<<<<<<<<<<
 *                     if isinstance(column, str):
 *                         column = self._resolve_column_index_from_column_name(column)
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":544
 *                         column = self._resolve_column_index_from_column_name(column)
 *                     c_hash_columns.push_back(column)
 *                 status = Shuffle(self.table_shd_ptr, c_hash_columns, output)             # <<<<<<<<<<<<<<
 *                 if status.is_ok():
 *                     return pycylon_wrap_table(output)
 */
      __pyx_v_status = cylon::Shuffle(__pyx_v_self->table_shd_ptr, __pyx_v_c_hash_columns, __pyx_v_output);

      /* "pycylon/data/table.pyx":545
 *                     c_hash_columns.push_back(column)
 *                 status = Shuffle(self.table_shd_ptr, c_hash_columns, output)
 *                 if status.is_ok():             # <<<<<<<<<<<<<<
 *                     return pycylon_wrap_table(output)
 *                 else:
 */
      __pyx_t_3 = (__pyx_v_status.is_ok() != 0);
      if (likely(__pyx_t_3)) {

        /* "pycylon/data/table.pyx":546
 *                 status = Shuffle(self.table_shd_ptr, c_hash_columns, output)
 *                 if status.is_ok():
 *                     return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(f"Shuffle operation failed : {status.get_msg().decode()}")
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "pycylon/data/table.pyx":545
 *                     c_hash_columns.push_back(column)
 *                 status = Shuffle(self.table_shd_ptr, c_hash_columns, output)
 *                 if status.is_ok():             # <<<<<<<<<<<<<<
 *                     return pycylon_wrap_table(output)
 *                 else:
 */
      }

      /* "pycylon/data/table.pyx":548
 *                     return pycylon_wrap_table(output)
 *                 else:
 *                     raise ValueError(f"Shuffle operation failed : {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError('Hash columns must be a List of integers or strings')
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Shuffle_operation_failed, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 548, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":539
 * 
 *         if hash_columns:
 *             if isinstance(hash_columns[0], int) or isinstance(hash_columns[0], str):             # <<<<<<<<<<<<<<
 *                 for column in hash_columns:
 *                     if isinstance(column, str):
 */
    }

    /* "pycylon/data/table.pyx":550
 *                     raise ValueError(f"Shuffle operation failed : {status.get_msg().decode()}")
 *             else:
 *                 raise ValueError('Hash columns must be a List of integers or strings')             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError('Hash columns are not provided')
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 550, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":538
 *         cdef CStatus status
 * 
 *         if hash_columns:             # <<<<<<<<<<<<<<
 *             if isinstance(hash_columns[0], int) or isinstance(hash_columns[0], str):
 *                 for column in hash_columns:
 */
  }

  /* "pycylon/data/table.pyx":552
 *                 raise ValueError('Hash columns must be a List of integers or strings')
 *         else:
 *             raise ValueError('Hash columns are not provided')             # <<<<<<<<<<<<<<
 * 
 *     def _agg_op(self, column, op):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 552, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":525
 *             raise ValueError(f"Operation failed: : {status.get_msg().decode()}")
 * 
 *     def shuffle(self, hash_columns: List = None):             # <<<<<<<<<<<<<<
 *         '''
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table.shuffle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":554
 *             raise ValueError('Hash columns are not provided')
 * 
 *     def _agg_op(self, column, op):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CTable] output
 *         cdef CStatus status
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_55_agg_op(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_54_agg_op[] = "Table._agg_op(self, column, op)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_55_agg_op(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_column = 0;
  PyObject *__pyx_v_op = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_agg_op (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column,&__pyx_n_s_op,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_op)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_agg_op", 1, 2, 2, 1); __PYX_ERR(0, 554, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_agg_op") < 0)) __PYX_ERR(0, 554, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_column = values[0];
    __pyx_v_op = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_agg_op", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 554, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table._agg_op", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_54_agg_op(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_column, __pyx_v_op);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_54_agg_op(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column, PyObject *__pyx_v_op) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_v_agg_index = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_agg_op", 0);

  /* "pycylon/data/table.pyx":557
 *         cdef shared_ptr[CTable] output
 *         cdef CStatus status
 *         agg_index = -1             # <<<<<<<<<<<<<<
 *         if isinstance(column, str):
 *             agg_index = self._resolve_column_index_from_column_name(column)
 */
  __Pyx_INCREF(__pyx_int_neg_1);
  __pyx_v_agg_index = __pyx_int_neg_1;

  /* "pycylon/data/table.pyx":558
 *         cdef CStatus status
 *         agg_index = -1
 *         if isinstance(column, str):             # <<<<<<<<<<<<<<
 *             agg_index = self._resolve_column_index_from_column_name(column)
 *         elif isinstance(column, int):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_column); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":559
 *         agg_index = -1
 *         if isinstance(column, str):
 *             agg_index = self._resolve_column_index_from_column_name(column)             # <<<<<<<<<<<<<<
 *         elif isinstance(column, int):
 *             agg_index = column
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_column) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_column);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_agg_index, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":558
 *         cdef CStatus status
 *         agg_index = -1
 *         if isinstance(column, str):             # <<<<<<<<<<<<<<
 *             agg_index = self._resolve_column_index_from_column_name(column)
 *         elif isinstance(column, int):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":560
 *         if isinstance(column, str):
 *             agg_index = self._resolve_column_index_from_column_name(column)
 *         elif isinstance(column, int):             # <<<<<<<<<<<<<<
 *             agg_index = column
 *         else:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_column); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":561
 *             agg_index = self._resolve_column_index_from_column_name(column)
 *         elif isinstance(column, int):
 *             agg_index = column             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("column must be str or int")
 */
    __Pyx_INCREF(__pyx_v_column);
    __Pyx_DECREF_SET(__pyx_v_agg_index, __pyx_v_column);

    /* "pycylon/data/table.pyx":560
 *         if isinstance(column, str):
 *             agg_index = self._resolve_column_index_from_column_name(column)
 *         elif isinstance(column, int):             # <<<<<<<<<<<<<<
 *             agg_index = column
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":563
 *             agg_index = column
 *         else:
 *             raise ValueError("column must be str or int")             # <<<<<<<<<<<<<<
 * 
 *         if op == AggregationOp.SUM:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 563, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":565
 *             raise ValueError("column must be str or int")
 * 
 *         if op == AggregationOp.SUM:             # <<<<<<<<<<<<<<
 *             status = Sum(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.COUNT:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SUM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_op, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":566
 * 
 *         if op == AggregationOp.SUM:
 *             status = Sum(self.table_shd_ptr, agg_index, output)             # <<<<<<<<<<<<<<
 *         elif op == AggregationOp.COUNT:
 *             status = Count(self.table_shd_ptr, agg_index, output)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_agg_index); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L1_error)
    __pyx_v_status = cylon::compute::Sum(__pyx_v_self->table_shd_ptr, __pyx_t_6, __pyx_v_output);

    /* "pycylon/data/table.pyx":565
 *             raise ValueError("column must be str or int")
 * 
 *         if op == AggregationOp.SUM:             # <<<<<<<<<<<<<<
 *             status = Sum(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.COUNT:
 */
    goto __pyx_L4;
  }

  /* "pycylon/data/table.pyx":567
 *         if op == AggregationOp.SUM:
 *             status = Sum(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.COUNT:             # <<<<<<<<<<<<<<
 *             status = Count(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MIN:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_COUNT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_op, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":568
 *             status = Sum(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.COUNT:
 *             status = Count(self.table_shd_ptr, agg_index, output)             # <<<<<<<<<<<<<<
 *         elif op == AggregationOp.MIN:
 *             status = Min(self.table_shd_ptr, agg_index, output)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_agg_index); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 568, __pyx_L1_error)
    __pyx_v_status = cylon::compute::Count(__pyx_v_self->table_shd_ptr, __pyx_t_6, __pyx_v_output);

    /* "pycylon/data/table.pyx":567
 *         if op == AggregationOp.SUM:
 *             status = Sum(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.COUNT:             # <<<<<<<<<<<<<<
 *             status = Count(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MIN:
 */
    goto __pyx_L4;
  }

  /* "pycylon/data/table.pyx":569
 *         elif op == AggregationOp.COUNT:
 *             status = Count(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MIN:             # <<<<<<<<<<<<<<
 *             status = Min(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MAX:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MIN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_op, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":570
 *             status = Count(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MIN:
 *             status = Min(self.table_shd_ptr, agg_index, output)             # <<<<<<<<<<<<<<
 *         elif op == AggregationOp.MAX:
 *             status = Max(self.table_shd_ptr, agg_index, output)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_agg_index); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L1_error)
    __pyx_v_status = cylon::compute::Min(__pyx_v_self->table_shd_ptr, __pyx_t_6, __pyx_v_output);

    /* "pycylon/data/table.pyx":569
 *         elif op == AggregationOp.COUNT:
 *             status = Count(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MIN:             # <<<<<<<<<<<<<<
 *             status = Min(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MAX:
 */
    goto __pyx_L4;
  }

  /* "pycylon/data/table.pyx":571
 *         elif op == AggregationOp.MIN:
 *             status = Min(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MAX:             # <<<<<<<<<<<<<<
 *             status = Max(self.table_shd_ptr, agg_index, output)
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_op, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":572
 *             status = Min(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MAX:
 *             status = Max(self.table_shd_ptr, agg_index, output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"Unsupported aggregation type {op}")
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_agg_index); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L1_error)
    __pyx_v_status = cylon::compute::Max(__pyx_v_self->table_shd_ptr, __pyx_t_6, __pyx_v_output);

    /* "pycylon/data/table.pyx":571
 *         elif op == AggregationOp.MIN:
 *             status = Min(self.table_shd_ptr, agg_index, output)
 *         elif op == AggregationOp.MAX:             # <<<<<<<<<<<<<<
 *             status = Max(self.table_shd_ptr, agg_index, output)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "pycylon/data/table.pyx":574
 *             status = Max(self.table_shd_ptr, agg_index, output)
 *         else:
 *             raise ValueError(f"Unsupported aggregation type {op}")             # <<<<<<<<<<<<<<
 * 
 *         if status.is_ok():
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_op, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_aggregation_type, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "pycylon/data/table.pyx":576
 *             raise ValueError(f"Unsupported aggregation type {op}")
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":577
 * 
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(f"Aggregate op {op.name} failed: {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":576
 *             raise ValueError(f"Unsupported aggregation type {op}")
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":579
 *             return pycylon_wrap_table(output)
 *         else:
 *             raise Exception(f"Aggregate op {op.name} failed: {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def sum(self, column):
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u_Aggregate_op);
    __pyx_t_7 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Aggregate_op);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Aggregate_op);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_op, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_failed);
    __pyx_t_7 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_failed);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_failed);
    __pyx_t_5 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 579, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":554
 *             raise ValueError('Hash columns are not provided')
 * 
 *     def _agg_op(self, column, op):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CTable] output
 *         cdef CStatus status
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table._agg_op", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_agg_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":581
 *             raise Exception(f"Aggregate op {op.name} failed: {status.get_msg().decode()}")
 * 
 *     def sum(self, column):             # <<<<<<<<<<<<<<
 *         return self._agg_op(column, AggregationOp.SUM)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_57sum(PyObject *__pyx_v_self, PyObject *__pyx_v_column); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_56sum[] = "Table.sum(self, column)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_57sum(PyObject *__pyx_v_self, PyObject *__pyx_v_column) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_56sum(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_column));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_56sum(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sum", 0);

  /* "pycylon/data/table.pyx":582
 * 
 *     def sum(self, column):
 *         return self._agg_op(column, AggregationOp.SUM)             # <<<<<<<<<<<<<<
 * 
 *     def count(self, column):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_agg_op); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SUM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_column, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_column, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_column);
    __Pyx_GIVEREF(__pyx_v_column);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_column);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":581
 *             raise Exception(f"Aggregate op {op.name} failed: {status.get_msg().decode()}")
 * 
 *     def sum(self, column):             # <<<<<<<<<<<<<<
 *         return self._agg_op(column, AggregationOp.SUM)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":584
 *         return self._agg_op(column, AggregationOp.SUM)
 * 
 *     def count(self, column):             # <<<<<<<<<<<<<<
 *         return self._agg_op(column, AggregationOp.COUNT)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_59count(PyObject *__pyx_v_self, PyObject *__pyx_v_column); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_58count[] = "Table.count(self, column)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_59count(PyObject *__pyx_v_self, PyObject *__pyx_v_column) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_58count(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_column));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_58count(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);

  /* "pycylon/data/table.pyx":585
 * 
 *     def count(self, column):
 *         return self._agg_op(column, AggregationOp.COUNT)             # <<<<<<<<<<<<<<
 * 
 *     def min(self, column):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_agg_op); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_COUNT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_column, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_column, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_column);
    __Pyx_GIVEREF(__pyx_v_column);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_column);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":584
 *         return self._agg_op(column, AggregationOp.SUM)
 * 
 *     def count(self, column):             # <<<<<<<<<<<<<<
 *         return self._agg_op(column, AggregationOp.COUNT)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":587
 *         return self._agg_op(column, AggregationOp.COUNT)
 * 
 *     def min(self, column):             # <<<<<<<<<<<<<<
 *         return self._agg_op(column, AggregationOp.MIN)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_61min(PyObject *__pyx_v_self, PyObject *__pyx_v_column); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_60min[] = "Table.min(self, column)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_61min(PyObject *__pyx_v_self, PyObject *__pyx_v_column) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_60min(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_column));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_60min(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min", 0);

  /* "pycylon/data/table.pyx":588
 * 
 *     def min(self, column):
 *         return self._agg_op(column, AggregationOp.MIN)             # <<<<<<<<<<<<<<
 * 
 *     def max(self, column):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_agg_op); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MIN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_column, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_column, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_column);
    __Pyx_GIVEREF(__pyx_v_column);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_column);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":587
 *         return self._agg_op(column, AggregationOp.COUNT)
 * 
 *     def min(self, column):             # <<<<<<<<<<<<<<
 *         return self._agg_op(column, AggregationOp.MIN)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":590
 *         return self._agg_op(column, AggregationOp.MIN)
 * 
 *     def max(self, column):             # <<<<<<<<<<<<<<
 *         return self._agg_op(column, AggregationOp.MAX)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_63max(PyObject *__pyx_v_self, PyObject *__pyx_v_column); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_62max[] = "Table.max(self, column)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_63max(PyObject *__pyx_v_self, PyObject *__pyx_v_column) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_62max(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_column));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_62max(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max", 0);

  /* "pycylon/data/table.pyx":591
 * 
 *     def max(self, column):
 *         return self._agg_op(column, AggregationOp.MAX)             # <<<<<<<<<<<<<<
 * 
 *     def groupby(self, index, agg: dict, groupby_type: str = 'hash'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_agg_op); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_column, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_column, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_column);
    __Pyx_GIVEREF(__pyx_v_column);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_column);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":590
 *         return self._agg_op(column, AggregationOp.MIN)
 * 
 *     def max(self, column):             # <<<<<<<<<<<<<<
 *         return self._agg_op(column, AggregationOp.MAX)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":593
 *         return self._agg_op(column, AggregationOp.MAX)
 * 
 *     def groupby(self, index, agg: dict, groupby_type: str = 'hash'):             # <<<<<<<<<<<<<<
 *         """
 *         :param groupby_type: 'hash' or 'mapred_hash'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_65groupby(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_64groupby[] = "Table.groupby(self, index, dict agg: dict, unicode groupby_type: str = u'hash')\n\n        :param groupby_type: 'hash' or 'mapred_hash'\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_65groupby(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_agg = 0;
  PyObject *__pyx_v_groupby_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupby (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index_2,&__pyx_n_s_agg,&__pyx_n_s_groupby_type,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject*)__pyx_n_u_hash);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_agg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("groupby", 0, 2, 3, 1); __PYX_ERR(0, 593, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_groupby_type);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "groupby") < 0)) __PYX_ERR(0, 593, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
    __pyx_v_agg = ((PyObject*)values[1]);
    __pyx_v_groupby_type = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("groupby", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 593, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.groupby", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_agg), (&PyDict_Type), 1, "agg", 1))) __PYX_ERR(0, 593, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_groupby_type), (&PyUnicode_Type), 1, "groupby_type", 1))) __PYX_ERR(0, 593, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_64groupby(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_index, __pyx_v_agg, __pyx_v_groupby_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_64groupby(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_agg, PyObject *__pyx_v_groupby_type) {
  cylon::Status __pyx_v_status;
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::vector<int>  __pyx_v_cindex_cols;
  std::vector<int>  __pyx_v_caggregate_cols;
  std::vector<enum cylon::compute::AggregationOpId>  __pyx_v_caggregate_ops;
  std::vector<std::pair<int,enum cylon::compute::AggregationOpId> >  __pyx_v_caggregate_ops_pair;
  PyObject *__pyx_v_agg_pair = NULL;
  PyObject *__pyx_v_col_idx = NULL;
  PyObject *__pyx_v_op = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  enum cylon::compute::AggregationOpId __pyx_t_13;
  std::pair<int,enum cylon::compute::AggregationOpId>  __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  Py_UCS4 __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupby", 0);

  /* "pycylon/data/table.pyx":604
 *         cdef vector[pair[int, CGroupByAggregationOp]] caggregate_ops_pair
 * 
 *         if not agg or not isinstance(agg, dict):             # <<<<<<<<<<<<<<
 *             raise ValueError("agg should be non-empty and dict type")
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_agg); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 604, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Check(__pyx_v_agg); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":605
 * 
 *         if not agg or not isinstance(agg, dict):
 *             raise ValueError("agg should be non-empty and dict type")             # <<<<<<<<<<<<<<
 *         else:
 *             # set aggregate col to c-vector
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 605, __pyx_L1_error)

    /* "pycylon/data/table.pyx":604
 *         cdef vector[pair[int, CGroupByAggregationOp]] caggregate_ops_pair
 * 
 *         if not agg or not isinstance(agg, dict):             # <<<<<<<<<<<<<<
 *             raise ValueError("agg should be non-empty and dict type")
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":608
 *         else:
 *             # set aggregate col to c-vector
 *             for agg_pair in agg.items():             # <<<<<<<<<<<<<<
 *                 if isinstance(agg_pair[0], str):
 *                     col_idx = self._resolve_column_index_from_column_name(agg_pair[0])
 */
  /*else*/ {
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_agg == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 608, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_agg, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_8;
    __pyx_t_8 = 0;
    while (1) {
      __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_6, &__pyx_t_5, NULL, NULL, &__pyx_t_8, __pyx_t_7);
      if (unlikely(__pyx_t_9 == 0)) break;
      if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_agg_pair, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "pycylon/data/table.pyx":609
 *             # set aggregate col to c-vector
 *             for agg_pair in agg.items():
 *                 if isinstance(agg_pair[0], str):             # <<<<<<<<<<<<<<
 *                     col_idx = self._resolve_column_index_from_column_name(agg_pair[0])
 *                 elif isinstance(agg_pair[0], int):
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_agg_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyUnicode_Check(__pyx_t_8); 
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "pycylon/data/table.pyx":610
 *             for agg_pair in agg.items():
 *                 if isinstance(agg_pair[0], str):
 *                     col_idx = self._resolve_column_index_from_column_name(agg_pair[0])             # <<<<<<<<<<<<<<
 *                 elif isinstance(agg_pair[0], int):
 *                     col_idx = agg_pair[0]
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_agg_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_12, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_col_idx, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "pycylon/data/table.pyx":609
 *             # set aggregate col to c-vector
 *             for agg_pair in agg.items():
 *                 if isinstance(agg_pair[0], str):             # <<<<<<<<<<<<<<
 *                     col_idx = self._resolve_column_index_from_column_name(agg_pair[0])
 *                 elif isinstance(agg_pair[0], int):
 */
        goto __pyx_L8;
      }

      /* "pycylon/data/table.pyx":611
 *                 if isinstance(agg_pair[0], str):
 *                     col_idx = self._resolve_column_index_from_column_name(agg_pair[0])
 *                 elif isinstance(agg_pair[0], int):             # <<<<<<<<<<<<<<
 *                     col_idx = agg_pair[0]
 *                 else:
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_agg_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PyInt_Check(__pyx_t_8); 
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (likely(__pyx_t_1)) {

        /* "pycylon/data/table.pyx":612
 *                     col_idx = self._resolve_column_index_from_column_name(agg_pair[0])
 *                 elif isinstance(agg_pair[0], int):
 *                     col_idx = agg_pair[0]             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError("Agg column must be either column name (str) or column "
 */
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_agg_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_v_col_idx, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "pycylon/data/table.pyx":611
 *                 if isinstance(agg_pair[0], str):
 *                     col_idx = self._resolve_column_index_from_column_name(agg_pair[0])
 *                 elif isinstance(agg_pair[0], int):             # <<<<<<<<<<<<<<
 *                     col_idx = agg_pair[0]
 *                 else:
 */
        goto __pyx_L8;
      }

      /* "pycylon/data/table.pyx":614
 *                     col_idx = agg_pair[0]
 *                 else:
 *                     raise ValueError("Agg column must be either column name (str) or column "             # <<<<<<<<<<<<<<
 *                                      "index (int)")
 * 
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 614, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 614, __pyx_L1_error)
      }
      __pyx_L8:;

      /* "pycylon/data/table.pyx":617
 *                                      "index (int)")
 * 
 *                 if isinstance(agg_pair[1], str):             # <<<<<<<<<<<<<<
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(AggregationOpString[agg_pair[1]])
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_agg_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyUnicode_Check(__pyx_t_8); 
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "pycylon/data/table.pyx":618
 * 
 *                 if isinstance(agg_pair[1], str):
 *                     caggregate_cols.push_back(col_idx)             # <<<<<<<<<<<<<<
 *                     caggregate_ops.push_back(AggregationOpString[agg_pair[1]])
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 */
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L1_error)
        try {
          __pyx_v_caggregate_cols.push_back(__pyx_t_9);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 618, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":619
 *                 if isinstance(agg_pair[1], str):
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(AggregationOpString[agg_pair[1]])             # <<<<<<<<<<<<<<
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 *                                                                                    AggregationOpString[agg_pair[1]]))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_AggregationOpString); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_agg_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_13 = ((enum cylon::compute::AggregationOpId)__Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(__pyx_t_11)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        try {
          __pyx_v_caggregate_ops.push_back(__pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 619, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":620
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(AggregationOpString[agg_pair[1]])
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,             # <<<<<<<<<<<<<<
 *                                                                                    AggregationOpString[agg_pair[1]]))
 *                 elif isinstance(agg_pair[1], AggregationOp):
 */
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L1_error)

        /* "pycylon/data/table.pyx":621
 *                     caggregate_ops.push_back(AggregationOpString[agg_pair[1]])
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 *                                                                                    AggregationOpString[agg_pair[1]]))             # <<<<<<<<<<<<<<
 *                 elif isinstance(agg_pair[1], AggregationOp):
 *                     caggregate_cols.push_back(col_idx)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_AggregationOpString); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 621, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_agg_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 621, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 621, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_13 = ((enum cylon::compute::AggregationOpId)__Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(__pyx_t_8)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "pycylon/data/table.pyx":620
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(AggregationOpString[agg_pair[1]])
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,             # <<<<<<<<<<<<<<
 *                                                                                    AggregationOpString[agg_pair[1]]))
 *                 elif isinstance(agg_pair[1], AggregationOp):
 */
        try {
          __pyx_t_14 = std::pair<int,enum cylon::compute::AggregationOpId> (__pyx_t_9, __pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 620, __pyx_L1_error)
        }
        try {
          __pyx_v_caggregate_ops_pair.push_back(__pyx_t_14);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 620, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":617
 *                                      "index (int)")
 * 
 *                 if isinstance(agg_pair[1], str):             # <<<<<<<<<<<<<<
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(AggregationOpString[agg_pair[1]])
 */
        goto __pyx_L9;
      }

      /* "pycylon/data/table.pyx":622
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 *                                                                                    AggregationOpString[agg_pair[1]]))
 *                 elif isinstance(agg_pair[1], AggregationOp):             # <<<<<<<<<<<<<<
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(agg_pair[1])
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_agg_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = PyObject_IsInstance(__pyx_t_8, __pyx_t_10); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "pycylon/data/table.pyx":623
 *                                                                                    AggregationOpString[agg_pair[1]]))
 *                 elif isinstance(agg_pair[1], AggregationOp):
 *                     caggregate_cols.push_back(col_idx)             # <<<<<<<<<<<<<<
 *                     caggregate_ops.push_back(agg_pair[1])
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, agg_pair[1]))
 */
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L1_error)
        try {
          __pyx_v_caggregate_cols.push_back(__pyx_t_9);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 623, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":624
 *                 elif isinstance(agg_pair[1], AggregationOp):
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(agg_pair[1])             # <<<<<<<<<<<<<<
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, agg_pair[1]))
 *                 elif isinstance(agg_pair[1], list):
 */
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_agg_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_13 = ((enum cylon::compute::AggregationOpId)__Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(__pyx_t_10)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        try {
          __pyx_v_caggregate_ops.push_back(__pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 624, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":625
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(agg_pair[1])
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, agg_pair[1]))             # <<<<<<<<<<<<<<
 *                 elif isinstance(agg_pair[1], list):
 *                     for op in agg_pair[1]:
 */
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L1_error)
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_agg_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 625, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_13 = ((enum cylon::compute::AggregationOpId)__Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(__pyx_t_10)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        try {
          __pyx_t_14 = std::pair<int,enum cylon::compute::AggregationOpId> (__pyx_t_9, __pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 625, __pyx_L1_error)
        }
        try {
          __pyx_v_caggregate_ops_pair.push_back(__pyx_t_14);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 625, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":622
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 *                                                                                    AggregationOpString[agg_pair[1]]))
 *                 elif isinstance(agg_pair[1], AggregationOp):             # <<<<<<<<<<<<<<
 *                     caggregate_cols.push_back(col_idx)
 *                     caggregate_ops.push_back(agg_pair[1])
 */
        goto __pyx_L9;
      }

      /* "pycylon/data/table.pyx":626
 *                     caggregate_ops.push_back(agg_pair[1])
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, agg_pair[1]))
 *                 elif isinstance(agg_pair[1], list):             # <<<<<<<<<<<<<<
 *                     for op in agg_pair[1]:
 *                         caggregate_cols.push_back(col_idx)
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_agg_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = PyList_Check(__pyx_t_10); 
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (likely(__pyx_t_2)) {

        /* "pycylon/data/table.pyx":627
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, agg_pair[1]))
 *                 elif isinstance(agg_pair[1], list):
 *                     for op in agg_pair[1]:             # <<<<<<<<<<<<<<
 *                         caggregate_cols.push_back(col_idx)
 *                         if isinstance(op, str):
 */
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_agg_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 627, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
          __pyx_t_8 = __pyx_t_10; __Pyx_INCREF(__pyx_t_8); __pyx_t_15 = 0;
          __pyx_t_16 = NULL;
        } else {
          __pyx_t_15 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 627, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_16 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 627, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        for (;;) {
          if (likely(!__pyx_t_16)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_10 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_15); __Pyx_INCREF(__pyx_t_10); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 627, __pyx_L1_error)
              #else
              __pyx_t_10 = PySequence_ITEM(__pyx_t_8, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 627, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              #endif
            } else {
              if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_15); __Pyx_INCREF(__pyx_t_10); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 627, __pyx_L1_error)
              #else
              __pyx_t_10 = PySequence_ITEM(__pyx_t_8, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 627, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              #endif
            }
          } else {
            __pyx_t_10 = __pyx_t_16(__pyx_t_8);
            if (unlikely(!__pyx_t_10)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 627, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_10);
          }
          __Pyx_XDECREF_SET(__pyx_v_op, __pyx_t_10);
          __pyx_t_10 = 0;

          /* "pycylon/data/table.pyx":628
 *                 elif isinstance(agg_pair[1], list):
 *                     for op in agg_pair[1]:
 *                         caggregate_cols.push_back(col_idx)             # <<<<<<<<<<<<<<
 *                         if isinstance(op, str):
 *                             caggregate_ops.push_back(AggregationOpString[op])
 */
          __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L1_error)
          try {
            __pyx_v_caggregate_cols.push_back(__pyx_t_9);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 628, __pyx_L1_error)
          }

          /* "pycylon/data/table.pyx":629
 *                     for op in agg_pair[1]:
 *                         caggregate_cols.push_back(col_idx)
 *                         if isinstance(op, str):             # <<<<<<<<<<<<<<
 *                             caggregate_ops.push_back(AggregationOpString[op])
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 */
          __pyx_t_2 = PyUnicode_Check(__pyx_v_op); 
          __pyx_t_1 = (__pyx_t_2 != 0);
          if (__pyx_t_1) {

            /* "pycylon/data/table.pyx":630
 *                         caggregate_cols.push_back(col_idx)
 *                         if isinstance(op, str):
 *                             caggregate_ops.push_back(AggregationOpString[op])             # <<<<<<<<<<<<<<
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 *                                                                                            AggregationOpString[op]))
 */
            __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_AggregationOpString); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 630, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_10, __pyx_v_op); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 630, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_13 = ((enum cylon::compute::AggregationOpId)__Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(__pyx_t_11)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            try {
              __pyx_v_caggregate_ops.push_back(__pyx_t_13);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 630, __pyx_L1_error)
            }

            /* "pycylon/data/table.pyx":631
 *                         if isinstance(op, str):
 *                             caggregate_ops.push_back(AggregationOpString[op])
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,             # <<<<<<<<<<<<<<
 *                                                                                            AggregationOpString[op]))
 *                         elif isinstance(op, AggregationOp):
 */
            __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L1_error)

            /* "pycylon/data/table.pyx":632
 *                             caggregate_ops.push_back(AggregationOpString[op])
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 *                                                                                            AggregationOpString[op]))             # <<<<<<<<<<<<<<
 *                         elif isinstance(op, AggregationOp):
 *                             caggregate_ops.push_back(op)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_AggregationOpString); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 632, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_v_op); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 632, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_13 = ((enum cylon::compute::AggregationOpId)__Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(__pyx_t_10)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

            /* "pycylon/data/table.pyx":631
 *                         if isinstance(op, str):
 *                             caggregate_ops.push_back(AggregationOpString[op])
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,             # <<<<<<<<<<<<<<
 *                                                                                            AggregationOpString[op]))
 *                         elif isinstance(op, AggregationOp):
 */
            try {
              __pyx_t_14 = std::pair<int,enum cylon::compute::AggregationOpId> (__pyx_t_9, __pyx_t_13);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 631, __pyx_L1_error)
            }
            try {
              __pyx_v_caggregate_ops_pair.push_back(__pyx_t_14);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 631, __pyx_L1_error)
            }

            /* "pycylon/data/table.pyx":629
 *                     for op in agg_pair[1]:
 *                         caggregate_cols.push_back(col_idx)
 *                         if isinstance(op, str):             # <<<<<<<<<<<<<<
 *                             caggregate_ops.push_back(AggregationOpString[op])
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 */
            goto __pyx_L12;
          }

          /* "pycylon/data/table.pyx":633
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 *                                                                                            AggregationOpString[op]))
 *                         elif isinstance(op, AggregationOp):             # <<<<<<<<<<<<<<
 *                             caggregate_ops.push_back(op)
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, op))
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_1 = PyObject_IsInstance(__pyx_v_op, __pyx_t_10); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_2 = (__pyx_t_1 != 0);
          if (__pyx_t_2) {

            /* "pycylon/data/table.pyx":634
 *                                                                                            AggregationOpString[op]))
 *                         elif isinstance(op, AggregationOp):
 *                             caggregate_ops.push_back(op)             # <<<<<<<<<<<<<<
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, op))
 *                 else:
 */
            __pyx_t_13 = ((enum cylon::compute::AggregationOpId)__Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(__pyx_v_op)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L1_error)
            try {
              __pyx_v_caggregate_ops.push_back(__pyx_t_13);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 634, __pyx_L1_error)
            }

            /* "pycylon/data/table.pyx":635
 *                         elif isinstance(op, AggregationOp):
 *                             caggregate_ops.push_back(op)
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, op))             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError("Agg op must be either op name (str) or AggregationOp enum or "
 */
            __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L1_error)
            __pyx_t_13 = ((enum cylon::compute::AggregationOpId)__Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(__pyx_v_op)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L1_error)
            try {
              __pyx_t_14 = std::pair<int,enum cylon::compute::AggregationOpId> (__pyx_t_9, __pyx_t_13);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 635, __pyx_L1_error)
            }
            try {
              __pyx_v_caggregate_ops_pair.push_back(__pyx_t_14);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 635, __pyx_L1_error)
            }

            /* "pycylon/data/table.pyx":633
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx,
 *                                                                                            AggregationOpString[op]))
 *                         elif isinstance(op, AggregationOp):             # <<<<<<<<<<<<<<
 *                             caggregate_ops.push_back(op)
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, op))
 */
          }
          __pyx_L12:;

          /* "pycylon/data/table.pyx":627
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, agg_pair[1]))
 *                 elif isinstance(agg_pair[1], list):
 *                     for op in agg_pair[1]:             # <<<<<<<<<<<<<<
 *                         caggregate_cols.push_back(col_idx)
 *                         if isinstance(op, str):
 */
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "pycylon/data/table.pyx":626
 *                     caggregate_ops.push_back(agg_pair[1])
 *                     caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, agg_pair[1]))
 *                 elif isinstance(agg_pair[1], list):             # <<<<<<<<<<<<<<
 *                     for op in agg_pair[1]:
 *                         caggregate_cols.push_back(col_idx)
 */
        goto __pyx_L9;
      }

      /* "pycylon/data/table.pyx":637
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, op))
 *                 else:
 *                     raise ValueError("Agg op must be either op name (str) or AggregationOp enum or "             # <<<<<<<<<<<<<<
 *                                      "a list of either of those")
 * 
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 637, __pyx_L1_error)
      }
      __pyx_L9:;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":640
 *                                      "a list of either of those")
 * 
 *             if isinstance(index, str):             # <<<<<<<<<<<<<<
 *                 cindex_cols.push_back(self._resolve_column_index_from_column_name(index))
 *             elif isinstance(index, int):
 */
    __pyx_t_2 = PyUnicode_Check(__pyx_v_index); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pycylon/data/table.pyx":641
 * 
 *             if isinstance(index, str):
 *                 cindex_cols.push_back(self._resolve_column_index_from_column_name(index))             # <<<<<<<<<<<<<<
 *             elif isinstance(index, int):
 *                 cindex_cols.push_back(index)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_10, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_index);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      try {
        __pyx_v_cindex_cols.push_back(__pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 641, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":640
 *                                      "a list of either of those")
 * 
 *             if isinstance(index, str):             # <<<<<<<<<<<<<<
 *                 cindex_cols.push_back(self._resolve_column_index_from_column_name(index))
 *             elif isinstance(index, int):
 */
      goto __pyx_L13;
    }

    /* "pycylon/data/table.pyx":642
 *             if isinstance(index, str):
 *                 cindex_cols.push_back(self._resolve_column_index_from_column_name(index))
 *             elif isinstance(index, int):             # <<<<<<<<<<<<<<
 *                 cindex_cols.push_back(index)
 *             elif isinstance(index, list):
 */
    __pyx_t_1 = PyInt_Check(__pyx_v_index); 
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "pycylon/data/table.pyx":643
 *                 cindex_cols.push_back(self._resolve_column_index_from_column_name(index))
 *             elif isinstance(index, int):
 *                 cindex_cols.push_back(index)             # <<<<<<<<<<<<<<
 *             elif isinstance(index, list):
 *                 for i in index:
 */
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)
      try {
        __pyx_v_cindex_cols.push_back(__pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 643, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":642
 *             if isinstance(index, str):
 *                 cindex_cols.push_back(self._resolve_column_index_from_column_name(index))
 *             elif isinstance(index, int):             # <<<<<<<<<<<<<<
 *                 cindex_cols.push_back(index)
 *             elif isinstance(index, list):
 */
      goto __pyx_L13;
    }

    /* "pycylon/data/table.pyx":644
 *             elif isinstance(index, int):
 *                 cindex_cols.push_back(index)
 *             elif isinstance(index, list):             # <<<<<<<<<<<<<<
 *                 for i in index:
 *                     if isinstance(i, str):
 */
    __pyx_t_2 = PyList_Check(__pyx_v_index); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (likely(__pyx_t_1)) {

      /* "pycylon/data/table.pyx":645
 *                 cindex_cols.push_back(index)
 *             elif isinstance(index, list):
 *                 for i in index:             # <<<<<<<<<<<<<<
 *                     if isinstance(i, str):
 *                         col_idx = self._resolve_column_index_from_column_name(i)
 */
      if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
        __pyx_t_4 = __pyx_v_index; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
        __pyx_t_16 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_16 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 645, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_16)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 645, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 645, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 645, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 645, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_16(__pyx_t_4);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 645, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "pycylon/data/table.pyx":646
 *             elif isinstance(index, list):
 *                 for i in index:
 *                     if isinstance(i, str):             # <<<<<<<<<<<<<<
 *                         col_idx = self._resolve_column_index_from_column_name(i)
 *                     elif isinstance(i, int):
 */
        __pyx_t_1 = PyUnicode_Check(__pyx_v_i); 
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "pycylon/data/table.pyx":647
 *                 for i in index:
 *                     if isinstance(i, str):
 *                         col_idx = self._resolve_column_index_from_column_name(i)             # <<<<<<<<<<<<<<
 *                     elif isinstance(i, int):
 *                         col_idx = i
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_v_i) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_i);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_col_idx, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "pycylon/data/table.pyx":646
 *             elif isinstance(index, list):
 *                 for i in index:
 *                     if isinstance(i, str):             # <<<<<<<<<<<<<<
 *                         col_idx = self._resolve_column_index_from_column_name(i)
 *                     elif isinstance(i, int):
 */
          goto __pyx_L16;
        }

        /* "pycylon/data/table.pyx":648
 *                     if isinstance(i, str):
 *                         col_idx = self._resolve_column_index_from_column_name(i)
 *                     elif isinstance(i, int):             # <<<<<<<<<<<<<<
 *                         col_idx = i
 *                     else:
 */
        __pyx_t_2 = PyInt_Check(__pyx_v_i); 
        __pyx_t_1 = (__pyx_t_2 != 0);
        if (likely(__pyx_t_1)) {

          /* "pycylon/data/table.pyx":649
 *                         col_idx = self._resolve_column_index_from_column_name(i)
 *                     elif isinstance(i, int):
 *                         col_idx = i             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise ValueError("Index column must be either column name (str) or column "
 */
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_XDECREF_SET(__pyx_v_col_idx, __pyx_v_i);

          /* "pycylon/data/table.pyx":648
 *                     if isinstance(i, str):
 *                         col_idx = self._resolve_column_index_from_column_name(i)
 *                     elif isinstance(i, int):             # <<<<<<<<<<<<<<
 *                         col_idx = i
 *                     else:
 */
          goto __pyx_L16;
        }

        /* "pycylon/data/table.pyx":651
 *                         col_idx = i
 *                     else:
 *                         raise ValueError("Index column must be either column name (str) or column "             # <<<<<<<<<<<<<<
 *                                          "index (int)")
 *                     cindex_cols.push_back(col_idx)
 */
        /*else*/ {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 651, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_Raise(__pyx_t_8, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __PYX_ERR(0, 651, __pyx_L1_error)
        }
        __pyx_L16:;

        /* "pycylon/data/table.pyx":653
 *                         raise ValueError("Index column must be either column name (str) or column "
 *                                          "index (int)")
 *                     cindex_cols.push_back(col_idx)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Index column must be either column name (str) or column "
 */
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 653, __pyx_L1_error)
        try {
          __pyx_v_cindex_cols.push_back(__pyx_t_7);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 653, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":645
 *                 cindex_cols.push_back(index)
 *             elif isinstance(index, list):
 *                 for i in index:             # <<<<<<<<<<<<<<
 *                     if isinstance(i, str):
 *                         col_idx = self._resolve_column_index_from_column_name(i)
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pycylon/data/table.pyx":644
 *             elif isinstance(index, int):
 *                 cindex_cols.push_back(index)
 *             elif isinstance(index, list):             # <<<<<<<<<<<<<<
 *                 for i in index:
 *                     if isinstance(i, str):
 */
      goto __pyx_L13;
    }

    /* "pycylon/data/table.pyx":655
 *                     cindex_cols.push_back(col_idx)
 *             else:
 *                 raise ValueError("Index column must be either column name (str) or column "             # <<<<<<<<<<<<<<
 *                                  "index (int)")
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 655, __pyx_L1_error)
    }
    __pyx_L13:;

    /* "pycylon/data/table.pyx":658
 *                                  "index (int)")
 * 
 *             if groupby_type.lower() == 'hash':             # <<<<<<<<<<<<<<
 *                 status = DistributedHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_cols,
 *                                                 caggregate_ops, output)
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_groupby_type, __pyx_n_s_lower); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_hash, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "pycylon/data/table.pyx":659
 * 
 *             if groupby_type.lower() == 'hash':
 *                 status = DistributedHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_cols,             # <<<<<<<<<<<<<<
 *                                                 caggregate_ops, output)
 *             elif groupby_type.lower() == 'mapred_hash':
 */
      __pyx_v_status = cylon::DistributedHashGroupBy(__pyx_v_self->table_shd_ptr, __pyx_v_cindex_cols, __pyx_v_caggregate_cols, __pyx_v_caggregate_ops, __pyx_v_output);

      /* "pycylon/data/table.pyx":658
 *                                  "index (int)")
 * 
 *             if groupby_type.lower() == 'hash':             # <<<<<<<<<<<<<<
 *                 status = DistributedHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_cols,
 *                                                 caggregate_ops, output)
 */
      goto __pyx_L17;
    }

    /* "pycylon/data/table.pyx":661
 *                 status = DistributedHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_cols,
 *                                                 caggregate_ops, output)
 *             elif groupby_type.lower() == 'mapred_hash':             # <<<<<<<<<<<<<<
 *                 status = MapredHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_ops_pair, &output)
 *             else:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_groupby_type, __pyx_n_s_lower); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_mapred_hash, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(__pyx_t_1)) {

      /* "pycylon/data/table.pyx":662
 *                                                 caggregate_ops, output)
 *             elif groupby_type.lower() == 'mapred_hash':
 *                 status = MapredHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_ops_pair, &output)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception(f"Unknown groupby type {groupby_type}. Available [hash, mapred_hash]")
 */
      __pyx_v_status = cylon::mapred::MapredHashGroupBy(__pyx_v_self->table_shd_ptr, __pyx_v_cindex_cols, __pyx_v_caggregate_ops_pair, (&__pyx_v_output));

      /* "pycylon/data/table.pyx":661
 *                 status = DistributedHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_cols,
 *                                                 caggregate_ops, output)
 *             elif groupby_type.lower() == 'mapred_hash':             # <<<<<<<<<<<<<<
 *                 status = MapredHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_ops_pair, &output)
 *             else:
 */
      goto __pyx_L17;
    }

    /* "pycylon/data/table.pyx":664
 *                 status = MapredHashGroupBy(self.table_shd_ptr, cindex_cols, caggregate_ops_pair, &output)
 *             else:
 *                 raise Exception(f"Unknown groupby type {groupby_type}. Available [hash, mapred_hash]")             # <<<<<<<<<<<<<<
 * 
 *             if status.is_ok():
 */
    /*else*/ {
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = 0;
      __pyx_t_17 = 127;
      __Pyx_INCREF(__pyx_kp_u_Unknown_groupby_type);
      __pyx_t_6 += 21;
      __Pyx_GIVEREF(__pyx_kp_u_Unknown_groupby_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Unknown_groupby_type);
      __pyx_t_8 = __Pyx_PyUnicode_Unicode(__pyx_v_groupby_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_17;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_kp_u_Available_hash_mapred_hash);
      __pyx_t_6 += 31;
      __Pyx_GIVEREF(__pyx_kp_u_Available_hash_mapred_hash);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Available_hash_mapred_hash);
      __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_6, __pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 664, __pyx_L1_error)
    }
    __pyx_L17:;

    /* "pycylon/data/table.pyx":666
 *                 raise Exception(f"Unknown groupby type {groupby_type}. Available [hash, mapred_hash]")
 * 
 *             if status.is_ok():             # <<<<<<<<<<<<<<
 *                 return pycylon_wrap_table(output)
 *             else:
 */
    __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
    if (likely(__pyx_t_1)) {

      /* "pycylon/data/table.pyx":667
 * 
 *             if status.is_ok():
 *                 return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception(f"Groupby operation failed {status.get_msg().decode()}")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 667, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":666
 *                 raise Exception(f"Unknown groupby type {groupby_type}. Available [hash, mapred_hash]")
 * 
 *             if status.is_ok():             # <<<<<<<<<<<<<<
 *                 return pycylon_wrap_table(output)
 *             else:
 */
    }

    /* "pycylon/data/table.pyx":669
 *                 return pycylon_wrap_table(output)
 *             else:
 *                 raise Exception(f"Groupby operation failed {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def unique(self, columns: List = None, keep: str = 'first', inplace=False) -> Table:
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 669, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Groupby_operation_failed, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 669, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 669, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 669, __pyx_L1_error)
    }
  }

  /* "pycylon/data/table.pyx":593
 *         return self._agg_op(column, AggregationOp.MAX)
 * 
 *     def groupby(self, index, agg: dict, groupby_type: str = 'hash'):             # <<<<<<<<<<<<<<
 *         """
 *         :param groupby_type: 'hash' or 'mapred_hash'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pycylon.data.table.Table.groupby", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_agg_pair);
  __Pyx_XDECREF(__pyx_v_col_idx);
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":671
 *                 raise Exception(f"Groupby operation failed {status.get_msg().decode()}")
 * 
 *     def unique(self, columns: List = None, keep: str = 'first', inplace=False) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Removes duplicates and returns a table with unique values
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_67unique(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_66unique[] = "Table.unique(self, columns: List = None, unicode keep: str = u'first', inplace=False) -> Table\n\n        Removes duplicates and returns a table with unique values\n        TODO: Fix the order of the records for time series.\n        Args:\n            columns: list of columns for which the unique operation applies\n            keep: 'first' or 'last', 'first' keeps the first record and drops the rest or the\n            opposite for 'last'.\n            inplace: default is False, if set to True, returns a copy of the unique table\n\n        Returns: PyCylon Table\n\n        Examples\n        ----------\n        >>> tb\n            a,b,c,d\n            4,5,6,1\n            1,2,3,2\n            7,8,9,3\n            10,11,12,4\n            15,20,21,5\n            10,11,24,6\n            27,23,24,7\n            1,2,13,8\n            4,5,21,9\n            39,23,24,10\n            10,11,13,11\n            123,11,12,12\n            25,13,12,13\n            30,21,22,14\n            35,1,2,15\n\n        >>> tb.unique(columns=['a', 'b'], keep='first')\n            25,13,12,13\n            39,23,24,10\n            15,20,21,5\n            35,1,2,15\n            10,11,12,4\n            7,8,9,3\n            30,21,22,14\n            123,11,12,12\n            1,2,3,2\n            27,23,24,7\n            4,5,6,1\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_67unique(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_columns = 0;
  PyObject *__pyx_v_keep = 0;
  PyObject *__pyx_v_inplace = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unique (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_columns,&__pyx_n_s_keep,&__pyx_n_s_inplace,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject*)__pyx_n_u_first);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keep);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inplace);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unique") < 0)) __PYX_ERR(0, 671, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_columns = values[0];
    __pyx_v_keep = ((PyObject*)values[1]);
    __pyx_v_inplace = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unique", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 671, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.unique", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_keep), (&PyUnicode_Type), 1, "keep", 1))) __PYX_ERR(0, 671, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_66unique(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_columns, __pyx_v_keep, __pyx_v_inplace);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_66unique(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_columns, PyObject *__pyx_v_keep, PyObject *__pyx_v_inplace) {
  cylon::Status __pyx_v_status;
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::vector<int>  __pyx_v_c_cols;
  bool __pyx_v_c_first;
  PyObject *__pyx_v_col = NULL;
  PyObject *__pyx_v_col_idx = NULL;
  PyObject *__pyx_v_cylon_table = NULL;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unique", 0);

  /* "pycylon/data/table.pyx":720
 *         cdef shared_ptr[CTable] output
 *         cdef vector[int] c_cols
 *         cdef cpp_bool c_first = False             # <<<<<<<<<<<<<<
 *         if keep == 'first':
 *             c_first = True
 */
  __pyx_v_c_first = 0;

  /* "pycylon/data/table.pyx":721
 *         cdef vector[int] c_cols
 *         cdef cpp_bool c_first = False
 *         if keep == 'first':             # <<<<<<<<<<<<<<
 *             c_first = True
 *         if columns:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_keep, __pyx_n_u_first, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 721, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":722
 *         cdef cpp_bool c_first = False
 *         if keep == 'first':
 *             c_first = True             # <<<<<<<<<<<<<<
 *         if columns:
 *             for col in columns:
 */
    __pyx_v_c_first = 1;

    /* "pycylon/data/table.pyx":721
 *         cdef vector[int] c_cols
 *         cdef cpp_bool c_first = False
 *         if keep == 'first':             # <<<<<<<<<<<<<<
 *             c_first = True
 *         if columns:
 */
  }

  /* "pycylon/data/table.pyx":723
 *         if keep == 'first':
 *             c_first = True
 *         if columns:             # <<<<<<<<<<<<<<
 *             for col in columns:
 *                 if isinstance(col, str):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_columns); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 723, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":724
 *             c_first = True
 *         if columns:
 *             for col in columns:             # <<<<<<<<<<<<<<
 *                 if isinstance(col, str):
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 */
    if (likely(PyList_CheckExact(__pyx_v_columns)) || PyTuple_CheckExact(__pyx_v_columns)) {
      __pyx_t_3 = __pyx_v_columns; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 724, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 724, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 724, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 724, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 724, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 724, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_col, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "pycylon/data/table.pyx":725
 *         if columns:
 *             for col in columns:
 *                 if isinstance(col, str):             # <<<<<<<<<<<<<<
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)
 */
      __pyx_t_2 = PyUnicode_Check(__pyx_v_col); 
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "pycylon/data/table.pyx":726
 *             for col in columns:
 *                 if isinstance(col, str):
 *                     col_idx = self._resolve_column_index_from_column_name(col)             # <<<<<<<<<<<<<<
 *                     c_cols.push_back(col_idx)
 *                 elif isinstance(col, int):
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_col) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_col);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_col_idx, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "pycylon/data/table.pyx":727
 *                 if isinstance(col, str):
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)             # <<<<<<<<<<<<<<
 *                 elif isinstance(col, int):
 *                     c_cols.push_back(col)
 */
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L1_error)
        try {
          __pyx_v_c_cols.push_back(__pyx_t_9);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 727, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":725
 *         if columns:
 *             for col in columns:
 *                 if isinstance(col, str):             # <<<<<<<<<<<<<<
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)
 */
        goto __pyx_L7;
      }

      /* "pycylon/data/table.pyx":728
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)
 *                 elif isinstance(col, int):             # <<<<<<<<<<<<<<
 *                     c_cols.push_back(col)
 *                 else:
 */
      __pyx_t_1 = PyInt_Check(__pyx_v_col); 
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (likely(__pyx_t_2)) {

        /* "pycylon/data/table.pyx":729
 *                     c_cols.push_back(col_idx)
 *                 elif isinstance(col, int):
 *                     c_cols.push_back(col)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(f"columns must be str or int, provided {columns}")
 */
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L1_error)
        try {
          __pyx_v_c_cols.push_back(__pyx_t_9);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 729, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":728
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)
 *                 elif isinstance(col, int):             # <<<<<<<<<<<<<<
 *                     c_cols.push_back(col)
 *                 else:
 */
        goto __pyx_L7;
      }

      /* "pycylon/data/table.pyx":731
 *                     c_cols.push_back(col)
 *                 else:
 *                     raise ValueError(f"columns must be str or int, provided {columns}")             # <<<<<<<<<<<<<<
 *         else:
 *             for col in self.column_names:
 */
      /*else*/ {
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_columns, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_columns_must_be_str_or_int_provi, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 731, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __PYX_ERR(0, 731, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "pycylon/data/table.pyx":724
 *             c_first = True
 *         if columns:
 *             for col in columns:             # <<<<<<<<<<<<<<
 *                 if isinstance(col, str):
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":723
 *         if keep == 'first':
 *             c_first = True
 *         if columns:             # <<<<<<<<<<<<<<
 *             for col in columns:
 *                 if isinstance(col, str):
 */
    goto __pyx_L4;
  }

  /* "pycylon/data/table.pyx":733
 *                     raise ValueError(f"columns must be str or int, provided {columns}")
 *         else:
 *             for col in self.column_names:             # <<<<<<<<<<<<<<
 *                 col_idx = self._resolve_column_index_from_column_name(col)
 *                 c_cols.push_back(col_idx)
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_6 = __pyx_t_3; __Pyx_INCREF(__pyx_t_6); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 733, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 733, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 733, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_5(__pyx_t_6);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 733, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_col, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":734
 *         else:
 *             for col in self.column_names:
 *                 col_idx = self._resolve_column_index_from_column_name(col)             # <<<<<<<<<<<<<<
 *                 c_cols.push_back(col_idx)
 *         status = Unique(self.table_shd_ptr, c_cols, output, c_first)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_col) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_col);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_col_idx, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":735
 *             for col in self.column_names:
 *                 col_idx = self._resolve_column_index_from_column_name(col)
 *                 c_cols.push_back(col_idx)             # <<<<<<<<<<<<<<
 *         status = Unique(self.table_shd_ptr, c_cols, output, c_first)
 *         if status.is_ok():
 */
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L1_error)
      try {
        __pyx_v_c_cols.push_back(__pyx_t_9);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 735, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":733
 *                     raise ValueError(f"columns must be str or int, provided {columns}")
 *         else:
 *             for col in self.column_names:             # <<<<<<<<<<<<<<
 *                 col_idx = self._resolve_column_index_from_column_name(col)
 *                 c_cols.push_back(col_idx)
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_L4:;

  /* "pycylon/data/table.pyx":736
 *                 col_idx = self._resolve_column_index_from_column_name(col)
 *                 c_cols.push_back(col_idx)
 *         status = Unique(self.table_shd_ptr, c_cols, output, c_first)             # <<<<<<<<<<<<<<
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)
 */
  __pyx_v_status = cylon::Unique(__pyx_v_self->table_shd_ptr, __pyx_v_c_cols, __pyx_v_output, __pyx_v_c_first);

  /* "pycylon/data/table.pyx":737
 *                 c_cols.push_back(col_idx)
 *         status = Unique(self.table_shd_ptr, c_cols, output, c_first)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:
 */
  __pyx_t_2 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":738
 *         status = Unique(self.table_shd_ptr, c_cols, output, c_first)
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *             if inplace:
 *                 self.initialize(cylon_table.to_arrow(), self.context)
 */
    __pyx_t_6 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_cylon_table = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "pycylon/data/table.pyx":739
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:             # <<<<<<<<<<<<<<
 *                 self.initialize(cylon_table.to_arrow(), self.context)
 *             else:
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_inplace); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 739, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "pycylon/data/table.pyx":740
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:
 *                 self.initialize(cylon_table.to_arrow(), self.context)             # <<<<<<<<<<<<<<
 *             else:
 *                 return cylon_table
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_cylon_table, __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_7, __pyx_t_8};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 740, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_7, __pyx_t_8};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 740, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 740, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_10) {
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_9, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_9, __pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 740, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pycylon/data/table.pyx":739
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:             # <<<<<<<<<<<<<<
 *                 self.initialize(cylon_table.to_arrow(), self.context)
 *             else:
 */
      goto __pyx_L11;
    }

    /* "pycylon/data/table.pyx":742
 *                 self.initialize(cylon_table.to_arrow(), self.context)
 *             else:
 *                 return cylon_table             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(f"Unique operation failed {status.get_msg().decode()}")
 */
    /*else*/ {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      if (!(likely(((__pyx_v_cylon_table) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cylon_table, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 742, __pyx_L1_error)
      __Pyx_INCREF(__pyx_v_cylon_table);
      __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_cylon_table);
      goto __pyx_L0;
    }
    __pyx_L11:;

    /* "pycylon/data/table.pyx":737
 *                 c_cols.push_back(col_idx)
 *         status = Unique(self.table_shd_ptr, c_cols, output, c_first)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:
 */
    goto __pyx_L10;
  }

  /* "pycylon/data/table.pyx":744
 *                 return cylon_table
 *         else:
 *             raise Exception(f"Unique operation failed {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def distributed_unique(self, columns: List = None, inplace=False):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unique_operation_failed, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "pycylon/data/table.pyx":671
 *                 raise Exception(f"Groupby operation failed {status.get_msg().decode()}")
 * 
 *     def unique(self, columns: List = None, keep: str = 'first', inplace=False) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Removes duplicates and returns a table with unique values
 */

  /* function exit code */
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pycylon.data.table.Table.unique", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_col);
  __Pyx_XDECREF(__pyx_v_col_idx);
  __Pyx_XDECREF(__pyx_v_cylon_table);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":746
 *             raise Exception(f"Unique operation failed {status.get_msg().decode()}")
 * 
 *     def distributed_unique(self, columns: List = None, inplace=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Removes duplicates and returns a table with unique values
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_69distributed_unique(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_68distributed_unique[] = "Table.distributed_unique(self, columns: List = None, inplace=False)\n\n        Removes duplicates and returns a table with unique values\n        TODO: Fix the order of the records for time series.\n        Args:\n            columns: list of columns for which the unique operation applies\n            inplace: default is False, if set to True, returns a copy of the unique table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb = tb.distributed_unique(['c1', 'c2', 'c3'])\n\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_69distributed_unique(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_columns = 0;
  PyObject *__pyx_v_inplace = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distributed_unique (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_columns,&__pyx_n_s_inplace,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inplace);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distributed_unique") < 0)) __PYX_ERR(0, 746, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_columns = values[0];
    __pyx_v_inplace = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distributed_unique", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 746, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_unique", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_68distributed_unique(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_columns, __pyx_v_inplace);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_68distributed_unique(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_columns, PyObject *__pyx_v_inplace) {
  cylon::Status __pyx_v_status;
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::vector<int>  __pyx_v_c_cols;
  PyObject *__pyx_v_col = NULL;
  PyObject *__pyx_v_col_idx = NULL;
  PyObject *__pyx_v_cylon_table = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distributed_unique", 0);

  /* "pycylon/data/table.pyx":766
 *         cdef shared_ptr[CTable] output
 *         cdef vector[int] c_cols
 *         if columns:             # <<<<<<<<<<<<<<
 *             for col in columns:
 *                 if isinstance(col, str):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_columns); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 766, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":767
 *         cdef vector[int] c_cols
 *         if columns:
 *             for col in columns:             # <<<<<<<<<<<<<<
 *                 if isinstance(col, str):
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 */
    if (likely(PyList_CheckExact(__pyx_v_columns)) || PyTuple_CheckExact(__pyx_v_columns)) {
      __pyx_t_2 = __pyx_v_columns; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_columns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 767, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 767, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 767, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 767, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_col, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pycylon/data/table.pyx":768
 *         if columns:
 *             for col in columns:
 *                 if isinstance(col, str):             # <<<<<<<<<<<<<<
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)
 */
      __pyx_t_1 = PyUnicode_Check(__pyx_v_col); 
      __pyx_t_6 = (__pyx_t_1 != 0);
      if (__pyx_t_6) {

        /* "pycylon/data/table.pyx":769
 *             for col in columns:
 *                 if isinstance(col, str):
 *                     col_idx = self._resolve_column_index_from_column_name(col)             # <<<<<<<<<<<<<<
 *                     c_cols.push_back(col_idx)
 *                 elif isinstance(col, int):
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 769, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_col) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_col);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 769, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_col_idx, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "pycylon/data/table.pyx":770
 *                 if isinstance(col, str):
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)             # <<<<<<<<<<<<<<
 *                 elif isinstance(col, int):
 *                     c_cols.push_back(col)
 */
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 770, __pyx_L1_error)
        try {
          __pyx_v_c_cols.push_back(__pyx_t_9);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 770, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":768
 *         if columns:
 *             for col in columns:
 *                 if isinstance(col, str):             # <<<<<<<<<<<<<<
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)
 */
        goto __pyx_L6;
      }

      /* "pycylon/data/table.pyx":771
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)
 *                 elif isinstance(col, int):             # <<<<<<<<<<<<<<
 *                     c_cols.push_back(col)
 *                 else:
 */
      __pyx_t_6 = PyInt_Check(__pyx_v_col); 
      __pyx_t_1 = (__pyx_t_6 != 0);
      if (likely(__pyx_t_1)) {

        /* "pycylon/data/table.pyx":772
 *                     c_cols.push_back(col_idx)
 *                 elif isinstance(col, int):
 *                     c_cols.push_back(col)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(f"columns must be str or int, provided {columns}")
 */
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L1_error)
        try {
          __pyx_v_c_cols.push_back(__pyx_t_9);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 772, __pyx_L1_error)
        }

        /* "pycylon/data/table.pyx":771
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 *                     c_cols.push_back(col_idx)
 *                 elif isinstance(col, int):             # <<<<<<<<<<<<<<
 *                     c_cols.push_back(col)
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "pycylon/data/table.pyx":774
 *                     c_cols.push_back(col)
 *                 else:
 *                     raise ValueError(f"columns must be str or int, provided {columns}")             # <<<<<<<<<<<<<<
 *         else:
 *             for col in self.column_names:
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_columns, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_columns_must_be_str_or_int_provi, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 774, __pyx_L1_error)
      }
      __pyx_L6:;

      /* "pycylon/data/table.pyx":767
 *         cdef vector[int] c_cols
 *         if columns:
 *             for col in columns:             # <<<<<<<<<<<<<<
 *                 if isinstance(col, str):
 *                     col_idx = self._resolve_column_index_from_column_name(col)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":766
 *         cdef shared_ptr[CTable] output
 *         cdef vector[int] c_cols
 *         if columns:             # <<<<<<<<<<<<<<
 *             for col in columns:
 *                 if isinstance(col, str):
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":776
 *                     raise ValueError(f"columns must be str or int, provided {columns}")
 *         else:
 *             for col in self.column_names:             # <<<<<<<<<<<<<<
 *                 col_idx = self._resolve_column_index_from_column_name(col)
 *                 c_cols.push_back(col_idx)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 776, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 776, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 776, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_4(__pyx_t_5);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 776, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_col, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":777
 *         else:
 *             for col in self.column_names:
 *                 col_idx = self._resolve_column_index_from_column_name(col)             # <<<<<<<<<<<<<<
 *                 c_cols.push_back(col_idx)
 *         status = DistributedUnique(self.table_shd_ptr, c_cols, output)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_col) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_col);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_col_idx, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":778
 *             for col in self.column_names:
 *                 col_idx = self._resolve_column_index_from_column_name(col)
 *                 c_cols.push_back(col_idx)             # <<<<<<<<<<<<<<
 *         status = DistributedUnique(self.table_shd_ptr, c_cols, output)
 *         if status.is_ok():
 */
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_col_idx); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 778, __pyx_L1_error)
      try {
        __pyx_v_c_cols.push_back(__pyx_t_9);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 778, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":776
 *                     raise ValueError(f"columns must be str or int, provided {columns}")
 *         else:
 *             for col in self.column_names:             # <<<<<<<<<<<<<<
 *                 col_idx = self._resolve_column_index_from_column_name(col)
 *                 c_cols.push_back(col_idx)
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":779
 *                 col_idx = self._resolve_column_index_from_column_name(col)
 *                 c_cols.push_back(col_idx)
 *         status = DistributedUnique(self.table_shd_ptr, c_cols, output)             # <<<<<<<<<<<<<<
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)
 */
  __pyx_v_status = cylon::DistributedUnique(__pyx_v_self->table_shd_ptr, __pyx_v_c_cols, __pyx_v_output);

  /* "pycylon/data/table.pyx":780
 *                 c_cols.push_back(col_idx)
 *         status = DistributedUnique(self.table_shd_ptr, c_cols, output)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:
 */
  __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":781
 *         status = DistributedUnique(self.table_shd_ptr, c_cols, output)
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *             if inplace:
 *                 self.initialize(cylon_table.to_arrow(), self.context)
 */
    __pyx_t_5 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_cylon_table = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pycylon/data/table.pyx":782
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:             # <<<<<<<<<<<<<<
 *                 self.initialize(cylon_table.to_arrow(), self.context)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_inplace); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 782, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "pycylon/data/table.pyx":783
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:
 *                 self.initialize(cylon_table.to_arrow(), self.context)             # <<<<<<<<<<<<<<
 *             else:
 *                 return cylon_table
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_cylon_table, __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_7, __pyx_t_8};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_7, __pyx_t_8};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_10) {
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_9, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_9, __pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pycylon/data/table.pyx":782
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:             # <<<<<<<<<<<<<<
 *                 self.initialize(cylon_table.to_arrow(), self.context)
 *             else:
 */
      goto __pyx_L10;
    }

    /* "pycylon/data/table.pyx":785
 *                 self.initialize(cylon_table.to_arrow(), self.context)
 *             else:
 *                 return cylon_table             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(f"Unique operation failed {status.get_msg().decode()}")
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_cylon_table);
      __pyx_r = __pyx_v_cylon_table;
      goto __pyx_L0;
    }
    __pyx_L10:;

    /* "pycylon/data/table.pyx":780
 *                 c_cols.push_back(col_idx)
 *         status = DistributedUnique(self.table_shd_ptr, c_cols, output)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             cylon_table = pycylon_wrap_table(output)
 *             if inplace:
 */
    goto __pyx_L9;
  }

  /* "pycylon/data/table.pyx":787
 *                 return cylon_table
 *         else:
 *             raise Exception(f"Unique operation failed {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def equals(self, table: Table, ordered=True) -> bool:
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unique_operation_failed, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 787, __pyx_L1_error)
  }
  __pyx_L9:;

  /* "pycylon/data/table.pyx":746
 *             raise Exception(f"Unique operation failed {status.get_msg().decode()}")
 * 
 *     def distributed_unique(self, columns: List = None, inplace=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Removes duplicates and returns a table with unique values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_unique", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_col);
  __Pyx_XDECREF(__pyx_v_col_idx);
  __Pyx_XDECREF(__pyx_v_cylon_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":789
 *             raise Exception(f"Unique operation failed {status.get_msg().decode()}")
 * 
 *     def equals(self, table: Table, ordered=True) -> bool:             # <<<<<<<<<<<<<<
 *         '''
 *         Determine whether two tables are equal.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_71equals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_70equals[] = "Table.equals(self, Table table: Table, ordered=True) -> bool\n\n        Determine whether two tables are equal.\n        Args:\n            table: the other table\n            ordered: whether we have to maintain the original order when \n            comparing two tables\n\n        Returns: boolean\n\n        Examples\n        ----------\n        >>> tb1\n            1,2\n            1,2\n            3,4\n            5,6\n\n        >>> tb2\n            1,2\n            1,2\n            5,6\n            3,4\n\n        >>> tb1.equals(tb2)\n            False\n        \n        >>> tb1.equals(tb2, false)\n            True\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_71equals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table = 0;
  PyObject *__pyx_v_ordered = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_table,&__pyx_n_s_ordered,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ordered);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "equals") < 0)) __PYX_ERR(0, 789, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_table = ((struct __pyx_obj_7pycylon_4data_5table_Table *)values[0]);
    __pyx_v_ordered = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("equals", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 789, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 789, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_70equals(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_table, __pyx_v_ordered);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_70equals(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_ordered) {
  cylon::Status __pyx_v_status;
  bool __pyx_v_output;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("equals", 0);

  /* "pycylon/data/table.pyx":821
 *         cdef CStatus status
 *         cdef cpp_bool output
 *         status = Equals(self.table_shd_ptr, table.table_shd_ptr, output, ordered)             # <<<<<<<<<<<<<<
 *         if status.is_ok():
 *             return output
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 821, __pyx_L1_error)
  __pyx_v_status = cylon::Equals(__pyx_v_self->table_shd_ptr, __pyx_v_table->table_shd_ptr, __pyx_v_output, __pyx_t_1);

  /* "pycylon/data/table.pyx":822
 *         cdef cpp_bool output
 *         status = Equals(self.table_shd_ptr, table.table_shd_ptr, output, ordered)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return output
 *         else:
 */
  __pyx_t_2 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":823
 *         status = Equals(self.table_shd_ptr, table.table_shd_ptr, output, ordered)
 *         if status.is_ok():
 *             return output             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(f"Equal operation failed {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_output); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":822
 *         cdef cpp_bool output
 *         status = Equals(self.table_shd_ptr, table.table_shd_ptr, output, ordered)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return output
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":825
 *             return output
 *         else:
 *             raise Exception(f"Equal operation failed {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def distributed_equals(self, table: Table, ordered=True) -> bool:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Equal_operation_failed, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 825, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":789
 *             raise Exception(f"Unique operation failed {status.get_msg().decode()}")
 * 
 *     def equals(self, table: Table, ordered=True) -> bool:             # <<<<<<<<<<<<<<
 *         '''
 *         Determine whether two tables are equal.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":827
 *             raise Exception(f"Equal operation failed {status.get_msg().decode()}")
 * 
 *     def distributed_equals(self, table: Table, ordered=True) -> bool:             # <<<<<<<<<<<<<<
 *         '''
 *         Determine whether two tables are equal.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_73distributed_equals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_72distributed_equals[] = "Table.distributed_equals(self, Table table: Table, ordered=True) -> bool\n\n        Determine whether two tables are equal.\n        Args:\n            table: the other table\n            ordered: whether we have to maintain the original order when \n            comparing two tables\n\n        Returns: boolean\n\n        Examples\n        ----------\n        >>> tb1\n            1,2\n            1,2\n            3,4\n            5,6\n\n        >>> tb2\n            1,2\n            1,2\n            5,6\n            3,4\n\n        >>> tb1.equals(tb2)\n            False\n        \n        >>> tb1.equals(tb2, false)\n            True\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_73distributed_equals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table = 0;
  PyObject *__pyx_v_ordered = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distributed_equals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_table,&__pyx_n_s_ordered,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ordered);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distributed_equals") < 0)) __PYX_ERR(0, 827, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_table = ((struct __pyx_obj_7pycylon_4data_5table_Table *)values[0]);
    __pyx_v_ordered = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distributed_equals", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 827, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_table), __pyx_ptype_7pycylon_4data_5table_Table, 1, "table", 0))) __PYX_ERR(0, 827, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_72distributed_equals(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_table, __pyx_v_ordered);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_72distributed_equals(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_table, PyObject *__pyx_v_ordered) {
  cylon::Status __pyx_v_status;
  bool __pyx_v_output;
  bool __pyx_v_ordered_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distributed_equals", 0);

  /* "pycylon/data/table.pyx":859
 *         cdef CStatus status
 *         cdef cpp_bool output
 *         cdef cpp_bool ordered_ = ordered             # <<<<<<<<<<<<<<
 *         status = DistributedEquals(self.table_shd_ptr, table.table_shd_ptr, output, ordered_)
 *         if status.is_ok():
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L1_error)
  __pyx_v_ordered_ = __pyx_t_1;

  /* "pycylon/data/table.pyx":860
 *         cdef cpp_bool output
 *         cdef cpp_bool ordered_ = ordered
 *         status = DistributedEquals(self.table_shd_ptr, table.table_shd_ptr, output, ordered_)             # <<<<<<<<<<<<<<
 *         if status.is_ok():
 *             return output
 */
  __pyx_v_status = cylon::DistributedEquals(__pyx_v_self->table_shd_ptr, __pyx_v_table->table_shd_ptr, __pyx_v_output, __pyx_v_ordered_);

  /* "pycylon/data/table.pyx":861
 *         cdef cpp_bool ordered_ = ordered
 *         status = DistributedEquals(self.table_shd_ptr, table.table_shd_ptr, output, ordered_)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return output
 *         else:
 */
  __pyx_t_2 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":862
 *         status = DistributedEquals(self.table_shd_ptr, table.table_shd_ptr, output, ordered_)
 *         if status.is_ok():
 *             return output             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(f"Equal operation failed {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_output); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":861
 *         cdef cpp_bool ordered_ = ordered
 *         status = DistributedEquals(self.table_shd_ptr, table.table_shd_ptr, output, ordered_)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return output
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":864
 *             return output
 *         else:
 *             raise Exception(f"Equal operation failed {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def repartition(self, rows_per_partition, receive_build_rank_order=None):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Equal_operation_failed, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 864, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":827
 *             raise Exception(f"Equal operation failed {status.get_msg().decode()}")
 * 
 *     def distributed_equals(self, table: Table, ordered=True) -> bool:             # <<<<<<<<<<<<<<
 *         '''
 *         Determine whether two tables are equal.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":866
 *             raise Exception(f"Equal operation failed {status.get_msg().decode()}")
 * 
 *     def repartition(self, rows_per_partition, receive_build_rank_order=None):             # <<<<<<<<<<<<<<
 *         '''
 *         Re-partition the table so that receive_build_rank_order[i]'th process contains rows_per_partition[i] elements.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_75repartition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_74repartition[] = "Table.repartition(self, rows_per_partition, receive_build_rank_order=None)\n\n        Re-partition the table so that receive_build_rank_order[i]'th process contains rows_per_partition[i] elements.\n        Args:\n            rows_per_partition: number rows that each partition should have\n            receive_build_rank_prder: the order of ranks for receiving the rows (which rank receives first, etc.), None if using default order (0th, 1th, 2th ...)\n\n        Returns: Table\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_75repartition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rows_per_partition = 0;
  PyObject *__pyx_v_receive_build_rank_order = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("repartition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rows_per_partition,&__pyx_n_s_receive_build_rank_order,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows_per_partition)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_receive_build_rank_order);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "repartition") < 0)) __PYX_ERR(0, 866, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rows_per_partition = values[0];
    __pyx_v_receive_build_rank_order = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("repartition", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 866, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.repartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_74repartition(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_rows_per_partition, __pyx_v_receive_build_rank_order);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_74repartition(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_rows_per_partition, PyObject *__pyx_v_receive_build_rank_order) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  std::vector<int64_t>  __pyx_v_c_rows_per_part;
  std::vector<int>  __pyx_v_c_receive_order;
  PyObject *__pyx_v_num_rows = NULL;
  PyObject *__pyx_v_rank = NULL;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_v_cylon_table = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int64_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("repartition", 0);

  /* "pycylon/data/table.pyx":879
 *         cdef vector[int] c_receive_order
 * 
 *         for num_rows in rows_per_partition:             # <<<<<<<<<<<<<<
 *             c_rows_per_part.push_back(num_rows)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_rows_per_partition)) || PyTuple_CheckExact(__pyx_v_rows_per_partition)) {
    __pyx_t_1 = __pyx_v_rows_per_partition; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_rows_per_partition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 879, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 879, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 879, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_num_rows, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":880
 * 
 *         for num_rows in rows_per_partition:
 *             c_rows_per_part.push_back(num_rows)             # <<<<<<<<<<<<<<
 * 
 *         if receive_build_rank_order != None:
 */
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_num_rows); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 880, __pyx_L1_error)
    try {
      __pyx_v_c_rows_per_part.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 880, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":879
 *         cdef vector[int] c_receive_order
 * 
 *         for num_rows in rows_per_partition:             # <<<<<<<<<<<<<<
 *             c_rows_per_part.push_back(num_rows)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":882
 *             c_rows_per_part.push_back(num_rows)
 * 
 *         if receive_build_rank_order != None:             # <<<<<<<<<<<<<<
 *             for rank in receive_build_rank_order:
 *                 c_receive_order.push_back(rank)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_receive_build_rank_order, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "pycylon/data/table.pyx":883
 * 
 *         if receive_build_rank_order != None:
 *             for rank in receive_build_rank_order:             # <<<<<<<<<<<<<<
 *                 c_receive_order.push_back(rank)
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, c_receive_order, &output)
 */
    if (likely(PyList_CheckExact(__pyx_v_receive_build_rank_order)) || PyTuple_CheckExact(__pyx_v_receive_build_rank_order)) {
      __pyx_t_1 = __pyx_v_receive_build_rank_order; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
      __pyx_t_3 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_receive_build_rank_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_3)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 883, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 883, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_3(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 883, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_rank, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pycylon/data/table.pyx":884
 *         if receive_build_rank_order != None:
 *             for rank in receive_build_rank_order:
 *                 c_receive_order.push_back(rank)             # <<<<<<<<<<<<<<
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, c_receive_order, &output)
 *         else:
 */
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_rank); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 884, __pyx_L1_error)
      try {
        __pyx_v_c_receive_order.push_back(__pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 884, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":883
 * 
 *         if receive_build_rank_order != None:
 *             for rank in receive_build_rank_order:             # <<<<<<<<<<<<<<
 *                 c_receive_order.push_back(rank)
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, c_receive_order, &output)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":885
 *             for rank in receive_build_rank_order:
 *                 c_receive_order.push_back(rank)
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, c_receive_order, &output)             # <<<<<<<<<<<<<<
 *         else:
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, &output)
 */
    __pyx_v_status = cylon::Repartition(__pyx_v_self->table_shd_ptr, __pyx_v_c_rows_per_part, __pyx_v_c_receive_order, (&__pyx_v_output));

    /* "pycylon/data/table.pyx":882
 *             c_rows_per_part.push_back(num_rows)
 * 
 *         if receive_build_rank_order != None:             # <<<<<<<<<<<<<<
 *             for rank in receive_build_rank_order:
 *                 c_receive_order.push_back(rank)
 */
    goto __pyx_L5;
  }

  /* "pycylon/data/table.pyx":887
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, c_receive_order, &output)
 *         else:
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, &output)             # <<<<<<<<<<<<<<
 * 
 *         if status.is_ok():
 */
  /*else*/ {
    __pyx_v_status = cylon::Repartition(__pyx_v_self->table_shd_ptr, __pyx_v_c_rows_per_part, (&__pyx_v_output));
  }
  __pyx_L5:;

  /* "pycylon/data/table.pyx":889
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, &output)
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             cylon_table = pycylon_wrap_table(output)
 *             return cylon_table
 */
  __pyx_t_6 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_6)) {

    /* "pycylon/data/table.pyx":890
 * 
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *             return cylon_table
 *         else:
 */
    __pyx_t_1 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_cylon_table = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":891
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)
 *             return cylon_table             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(f"Repartition failed {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_cylon_table);
    __pyx_r = __pyx_v_cylon_table;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":889
 *             status = Repartition(self.table_shd_ptr, c_rows_per_part, &output)
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             cylon_table = pycylon_wrap_table(output)
 *             return cylon_table
 */
  }

  /* "pycylon/data/table.pyx":893
 *             return cylon_table
 *         else:
 *             raise Exception(f"Repartition failed {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def evenly_partition(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Repartition_failed, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 893, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":866
 *             raise Exception(f"Equal operation failed {status.get_msg().decode()}")
 * 
 *     def repartition(self, rows_per_partition, receive_build_rank_order=None):             # <<<<<<<<<<<<<<
 *         '''
 *         Re-partition the table so that receive_build_rank_order[i]'th process contains rows_per_partition[i] elements.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table.repartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_num_rows);
  __Pyx_XDECREF(__pyx_v_rank);
  __Pyx_XDECREF(__pyx_v_cylon_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":895
 *             raise Exception(f"Repartition failed {status.get_msg().decode()}")
 * 
 *     def evenly_partition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Re-partition the table so that first ((# total rows) % (# partitions)) partitions will receive ceil((# total rows) / (# partitions)) rows, and the rest will receive floor((# total rows) / (# partitions)) rows.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_77evenly_partition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_76evenly_partition[] = "Table.evenly_partition(self)\n\n        Re-partition the table so that first ((# total rows) % (# partitions)) partitions will receive ceil((# total rows) / (# partitions)) rows, and the rest will receive floor((# total rows) / (# partitions)) rows.\n\n        Returns: Table\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_77evenly_partition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evenly_partition (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_76evenly_partition(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_76evenly_partition(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_v_cylon_table = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evenly_partition", 0);

  /* "pycylon/data/table.pyx":902
 *         '''
 *         cdef shared_ptr[CTable] output
 *         status = Repartition(self.table_shd_ptr, &output)             # <<<<<<<<<<<<<<
 * 
 *         if status.is_ok():
 */
  __pyx_v_status = cylon::Repartition(__pyx_v_self->table_shd_ptr, (&__pyx_v_output));

  /* "pycylon/data/table.pyx":904
 *         status = Repartition(self.table_shd_ptr, &output)
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             cylon_table = pycylon_wrap_table(output)
 *             return cylon_table
 */
  __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":905
 * 
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *             return cylon_table
 *         else:
 */
    __pyx_t_2 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_cylon_table = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":906
 *         if status.is_ok():
 *             cylon_table = pycylon_wrap_table(output)
 *             return cylon_table             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(f"Repartition failed {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_cylon_table);
    __pyx_r = __pyx_v_cylon_table;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":904
 *         status = Repartition(self.table_shd_ptr, &output)
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             cylon_table = pycylon_wrap_table(output)
 *             return cylon_table
 */
  }

  /* "pycylon/data/table.pyx":908
 *             return cylon_table
 *         else:
 *             raise Exception(f"Repartition failed {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Repartition_failed, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 908, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":895
 *             raise Exception(f"Repartition failed {status.get_msg().decode()}")
 * 
 *     def evenly_partition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Re-partition the table so that first ((# total rows) % (# partitions)) partitions will receive ceil((# total rows) / (# partitions)) rows, and the rest will receive floor((# total rows) / (# partitions)) rows.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.evenly_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cylon_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":911
 * 
 *     @staticmethod
 *     def from_arrow(context, pyarrow_table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from PyArrow Table
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_79from_arrow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_78from_arrow[] = "Table.from_arrow(context, pyarrow_table) -> Table\n\n        Creating a PyCylon table from PyArrow Table\n        Args:\n            context: pycylon.CylonContext\n            pyarrow_table: PyArrow Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> atb\n            pyarrow.Table\n            col-1: int64\n            col-2: int64\n            col-3: int64\n\n        >>> Table.from_arrow(ctx, atb)\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_79from_arrow = {"from_arrow", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_79from_arrow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_78from_arrow};
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_79from_arrow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_pyarrow_table = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_arrow (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_context,&__pyx_n_s_pyarrow_table,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyarrow_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_arrow", 1, 2, 2, 1); __PYX_ERR(0, 911, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_arrow") < 0)) __PYX_ERR(0, 911, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_context = values[0];
    __pyx_v_pyarrow_table = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_arrow", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 911, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.from_arrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_78from_arrow(__pyx_v_context, __pyx_v_pyarrow_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_78from_arrow(PyObject *__pyx_v_context, PyObject *__pyx_v_pyarrow_table) {
  std::shared_ptr<cylon::CylonContext>  __pyx_v_ctx;
  std::shared_ptr< arrow::Table>  __pyx_v_arw_table;
  std::shared_ptr<cylon::Table>  __pyx_v_cn_table;
  cylon::Status __pyx_v_status;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_arrow", 0);

  /* "pycylon/data/table.pyx":936
 *         '''
 * 
 *         cdef shared_ptr[CCylonContext] ctx = pycylon_unwrap_context(context)             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CArrowTable] arw_table = pyarrow_unwrap_table(pyarrow_table)
 *         cdef shared_ptr[CTable] cn_table
 */
  __pyx_v_ctx = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_context(__pyx_v_context);

  /* "pycylon/data/table.pyx":937
 * 
 *         cdef shared_ptr[CCylonContext] ctx = pycylon_unwrap_context(context)
 *         cdef shared_ptr[CArrowTable] arw_table = pyarrow_unwrap_table(pyarrow_table)             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CTable] cn_table
 *         cdef CStatus status = CTable.FromArrowTable(ctx, arw_table, cn_table)
 */
  __pyx_v_arw_table = __pyx_f_7pyarrow_3lib_pyarrow_unwrap_table(__pyx_v_pyarrow_table);

  /* "pycylon/data/table.pyx":939
 *         cdef shared_ptr[CArrowTable] arw_table = pyarrow_unwrap_table(pyarrow_table)
 *         cdef shared_ptr[CTable] cn_table
 *         cdef CStatus status = CTable.FromArrowTable(ctx, arw_table, cn_table)             # <<<<<<<<<<<<<<
 * 
 *         if status.is_ok():
 */
  __pyx_v_status = cylon::Table::FromArrowTable(__pyx_v_ctx, __pyx_v_arw_table, __pyx_v_cn_table);

  /* "pycylon/data/table.pyx":941
 *         cdef CStatus status = CTable.FromArrowTable(ctx, arw_table, cn_table)
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(cn_table)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":942
 * 
 *         if status.is_ok():
 *             return pycylon_wrap_table(cn_table)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_2 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_cn_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 942, __pyx_L1_error)
    __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":941
 *         cdef CStatus status = CTable.FromArrowTable(ctx, arw_table, cn_table)
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(cn_table)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":944
 *             return pycylon_wrap_table(cn_table)
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 f"Table couldn't be created from PyArrow Table: {status.get_msg().decode()}")
 * 
 */
  /*else*/ {

    /* "pycylon/data/table.pyx":945
 *         else:
 *             raise Exception(
 *                 f"Table couldn't be created from PyArrow Table: {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Table_couldn_t_be_created_from_P, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":944
 *             return pycylon_wrap_table(cn_table)
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 f"Table couldn't be created from PyArrow Table: {status.get_msg().decode()}")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 944, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":911
 * 
 *     @staticmethod
 *     def from_arrow(context, pyarrow_table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from PyArrow Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.from_arrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":948
 * 
 *     @staticmethod
 *     def from_numpy(context: CylonContext, col_names: List[str], ar_list: List[np.ndarray]) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from numpy arrays
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_81from_numpy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_80from_numpy[] = "Table.from_numpy(context: CylonContext, col_names: List[str], ar_list: List[np.ndarray]) -> Table\n\n        Creating a PyCylon table from numpy arrays\n        Args:\n            context: pycylon.CylonContext\n            col_names: column names as a List\n            ar_list: Numpy ndarrays as a list (one 1D array per column)\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> Table.from_numpy(ctx, ['c1', 'c2', 'c3'], [np.array([1, 2, 3, 4]), np.array([5, 6, 7, 8]), np.array([9, 10, 11, 12])])\n               c1  c2  c3\n            0   1   5   9\n            1   2   6  10\n            2   3   7  11\n            3   4   8  12\n        ";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_81from_numpy = {"from_numpy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_81from_numpy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_80from_numpy};
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_81from_numpy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_col_names = 0;
  PyObject *__pyx_v_ar_list = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_numpy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_context,&__pyx_n_s_col_names,&__pyx_n_s_ar_list,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_names)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_numpy", 1, 3, 3, 1); __PYX_ERR(0, 948, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ar_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_numpy", 1, 3, 3, 2); __PYX_ERR(0, 948, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_numpy") < 0)) __PYX_ERR(0, 948, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_context = values[0];
    __pyx_v_col_names = values[1];
    __pyx_v_ar_list = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_numpy", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 948, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.from_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_80from_numpy(__pyx_v_context, __pyx_v_col_names, __pyx_v_ar_list);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_80from_numpy(PyObject *__pyx_v_context, PyObject *__pyx_v_col_names, PyObject *__pyx_v_ar_list) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_numpy", 0);

  /* "pycylon/data/table.pyx":969
 *         '''
 * 
 *         return Table.from_arrow(context, pa.Table.from_arrays(ar_list, names=col_names))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pa); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Table); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_ar_list);
  __Pyx_GIVEREF(__pyx_v_ar_list);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ar_list);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_names, __pyx_v_col_names) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_context, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_context, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_context);
    __Pyx_GIVEREF(__pyx_v_context);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_context);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 969, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":948
 * 
 *     @staticmethod
 *     def from_numpy(context: CylonContext, col_names: List[str], ar_list: List[np.ndarray]) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from numpy arrays
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.from_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":972
 * 
 *     @staticmethod
 *     def from_list(context: CylonContext, col_names: List[str], data_list: List) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from a list
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_83from_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_82from_list[] = "Table.from_list(context: CylonContext, col_names: List[str], data_list: List) -> Table\n\n        Creating a PyCylon table from a list\n        Args:\n            context: pycylon.CylonContext\n            col_names: Column names as a List[str]\n            data_list: data as a List of List, (List per column)\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> Table.from_list(ctx, ['col-1', 'col-2', 'col-3'], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_83from_list = {"from_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_83from_list, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_82from_list};
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_83from_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_col_names = 0;
  PyObject *__pyx_v_data_list = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_context,&__pyx_n_s_col_names,&__pyx_n_s_data_list,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_names)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_list", 1, 3, 3, 1); __PYX_ERR(0, 972, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_list", 1, 3, 3, 2); __PYX_ERR(0, 972, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_list") < 0)) __PYX_ERR(0, 972, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_context = values[0];
    __pyx_v_col_names = values[1];
    __pyx_v_data_list = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_list", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 972, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.from_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_82from_list(__pyx_v_context, __pyx_v_col_names, __pyx_v_data_list);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_82from_list(PyObject *__pyx_v_context, PyObject *__pyx_v_col_names, PyObject *__pyx_v_data_list) {
  PyObject *__pyx_v_ar_list = NULL;
  PyObject *__pyx_v_data = NULL;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_list", 0);

  /* "pycylon/data/table.pyx":992
 *             3      4      8     12
 *         '''
 *         ar_list = []             # <<<<<<<<<<<<<<
 *         if len(col_names) == len(data_list):
 *             for data in data_list:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ar_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":993
 *         '''
 *         ar_list = []
 *         if len(col_names) == len(data_list):             # <<<<<<<<<<<<<<
 *             for data in data_list:
 *                 ar_list.append(data)
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_col_names); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_t_3 = PyObject_Length(__pyx_v_data_list); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_2 == __pyx_t_3) != 0);
  if (likely(__pyx_t_4)) {

    /* "pycylon/data/table.pyx":994
 *         ar_list = []
 *         if len(col_names) == len(data_list):
 *             for data in data_list:             # <<<<<<<<<<<<<<
 *                 ar_list.append(data)
 *             return Table.from_arrow(context, pa.Table.from_arrays(ar_list, names=col_names))
 */
    if (likely(PyList_CheckExact(__pyx_v_data_list)) || PyTuple_CheckExact(__pyx_v_data_list)) {
      __pyx_t_1 = __pyx_v_data_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_data_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 994, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 994, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 994, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 994, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 994, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 994, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_data, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "pycylon/data/table.pyx":995
 *         if len(col_names) == len(data_list):
 *             for data in data_list:
 *                 ar_list.append(data)             # <<<<<<<<<<<<<<
 *             return Table.from_arrow(context, pa.Table.from_arrays(ar_list, names=col_names))
 *         else:
 */
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ar_list, __pyx_v_data); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 995, __pyx_L1_error)

      /* "pycylon/data/table.pyx":994
 *         ar_list = []
 *         if len(col_names) == len(data_list):
 *             for data in data_list:             # <<<<<<<<<<<<<<
 *                 ar_list.append(data)
 *             return Table.from_arrow(context, pa.Table.from_arrays(ar_list, names=col_names))
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":996
 *             for data in data_list:
 *                 ar_list.append(data)
 *             return Table.from_arrow(context, pa.Table.from_arrays(ar_list, names=col_names))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Column Names count doesn't match data columns count")
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_pa); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_Table); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_ar_list);
    __Pyx_GIVEREF(__pyx_v_ar_list);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_ar_list);
    __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_names, __pyx_v_col_names) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_context, __pyx_t_11};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_context, __pyx_t_11};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 996, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_INCREF(__pyx_v_context);
      __Pyx_GIVEREF(__pyx_v_context);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_12, __pyx_v_context);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_12, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 996, __pyx_L1_error)
    __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":993
 *         '''
 *         ar_list = []
 *         if len(col_names) == len(data_list):             # <<<<<<<<<<<<<<
 *             for data in data_list:
 *                 ar_list.append(data)
 */
  }

  /* "pycylon/data/table.pyx":998
 *             return Table.from_arrow(context, pa.Table.from_arrays(ar_list, names=col_names))
 *         else:
 *             raise ValueError("Column Names count doesn't match data columns count")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 998, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":972
 * 
 *     @staticmethod
 *     def from_list(context: CylonContext, col_names: List[str], data_list: List) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from a list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pycylon.data.table.Table.from_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ar_list);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1001
 * 
 *     @staticmethod
 *     def from_pydict(context: CylonContext, dictionary: dict) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from a dictionary
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_85from_pydict(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_84from_pydict[] = "Table.from_pydict(context: CylonContext, dict dictionary: dict) -> Table\n\n        Creating a PyCylon table from a dictionary\n        Args:\n            context: pycylon.CylonContext\n            dictionary: dict object with key as column names and values as a List\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> Table.from_pydict(ctx, {'col-1': [1, 2, 3, 4], 'col-2': [5, 6, 7, 8], 'col-3': [9, 10, 11, 12]})\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        ";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_85from_pydict = {"from_pydict", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_85from_pydict, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_84from_pydict};
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_85from_pydict(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_dictionary = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_pydict (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_context,&__pyx_n_s_dictionary,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dictionary)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_pydict", 1, 2, 2, 1); __PYX_ERR(0, 1001, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_pydict") < 0)) __PYX_ERR(0, 1001, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_context = values[0];
    __pyx_v_dictionary = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_pydict", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1001, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.from_pydict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dictionary), (&PyDict_Type), 1, "dictionary", 1))) __PYX_ERR(0, 1001, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_84from_pydict(__pyx_v_context, __pyx_v_dictionary);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_84from_pydict(PyObject *__pyx_v_context, PyObject *__pyx_v_dictionary) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_pydict", 0);

  /* "pycylon/data/table.pyx":1021
 * 
 *         '''
 *         return Table.from_arrow(context, pa.Table.from_pydict(dictionary))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pa); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Table); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_from_pydict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_dictionary) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_dictionary);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_context, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_context, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1021, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_context);
    __Pyx_GIVEREF(__pyx_v_context);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_context);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 1021, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1001
 * 
 *     @staticmethod
 *     def from_pydict(context: CylonContext, dictionary: dict) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from a dictionary
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.from_pydict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1024
 * 
 *     @staticmethod
 *     def from_pandas(context: CylonContext = None, df: pd.DataFrame = None, preserve_index=False,             # <<<<<<<<<<<<<<
 *                     nthreads=None, columns=None, safe=False) -> Table:
 *         '''
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_87from_pandas(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_86from_pandas[] = "Table.from_pandas(context: CylonContext = None, df: pd.DataFrame = None, preserve_index=False, nthreads=None, columns=None, safe=False) -> Table\n\n        Creating a PyCylon table from Pandas DataFrame\n        Args:\n            context: cylon.CylonContext\n            df: pd.DataFrame\n            preserve_index: keep indexes as same as in original DF\n            nthreads: number of threads for the operation\n            columns: column names, if updated\n            safe: safe operation\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> Table.from_pandas(ctx, df)\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_87from_pandas = {"from_pandas", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_87from_pandas, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_86from_pandas};
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_87from_pandas(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_df = 0;
  PyObject *__pyx_v_preserve_index = 0;
  PyObject *__pyx_v_nthreads = 0;
  PyObject *__pyx_v_columns = 0;
  PyObject *__pyx_v_safe = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_pandas (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_context,&__pyx_n_s_df,&__pyx_n_s_preserve_index,&__pyx_n_s_nthreads,&__pyx_n_s_columns,&__pyx_n_s_safe,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);

    /* "pycylon/data/table.pyx":1025
 *     @staticmethod
 *     def from_pandas(context: CylonContext = None, df: pd.DataFrame = None, preserve_index=False,
 *                     nthreads=None, columns=None, safe=False) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from Pandas DataFrame
 */
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_df);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_preserve_index);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nthreads);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_safe);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_pandas") < 0)) __PYX_ERR(0, 1024, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_context = values[0];
    __pyx_v_df = values[1];
    __pyx_v_preserve_index = values[2];
    __pyx_v_nthreads = values[3];
    __pyx_v_columns = values[4];
    __pyx_v_safe = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_pandas", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1024, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.from_pandas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_86from_pandas(__pyx_v_context, __pyx_v_df, __pyx_v_preserve_index, __pyx_v_nthreads, __pyx_v_columns, __pyx_v_safe);

  /* "pycylon/data/table.pyx":1024
 * 
 *     @staticmethod
 *     def from_pandas(context: CylonContext = None, df: pd.DataFrame = None, preserve_index=False,             # <<<<<<<<<<<<<<
 *                     nthreads=None, columns=None, safe=False) -> Table:
 *         '''
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_86from_pandas(PyObject *__pyx_v_context, PyObject *__pyx_v_df, PyObject *__pyx_v_preserve_index, PyObject *__pyx_v_nthreads, PyObject *__pyx_v_columns, PyObject *__pyx_v_safe) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_pandas", 0);

  /* "pycylon/data/table.pyx":1048
 *             3      4      8     12
 *         '''
 *         return Table.from_arrow(context,             # <<<<<<<<<<<<<<
 *                                 pa.Table.from_pandas(df=df, schema=None,
 *                                                      preserve_index=preserve_index,
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pycylon/data/table.pyx":1049
 *         '''
 *         return Table.from_arrow(context,
 *                                 pa.Table.from_pandas(df=df, schema=None,             # <<<<<<<<<<<<<<
 *                                                      preserve_index=preserve_index,
 *                                                      nthreads=nthreads, columns=columns, safe=safe)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pa); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Table); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_from_pandas); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_df, __pyx_v_df) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_schema, Py_None) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)

  /* "pycylon/data/table.pyx":1050
 *         return Table.from_arrow(context,
 *                                 pa.Table.from_pandas(df=df, schema=None,
 *                                                      preserve_index=preserve_index,             # <<<<<<<<<<<<<<
 *                                                      nthreads=nthreads, columns=columns, safe=safe)
 *                                 )
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_preserve_index, __pyx_v_preserve_index) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)

  /* "pycylon/data/table.pyx":1051
 *                                 pa.Table.from_pandas(df=df, schema=None,
 *                                                      preserve_index=preserve_index,
 *                                                      nthreads=nthreads, columns=columns, safe=safe)             # <<<<<<<<<<<<<<
 *                                 )
 * 
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_nthreads, __pyx_v_nthreads) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_columns, __pyx_v_columns) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_safe, __pyx_v_safe) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)

  /* "pycylon/data/table.pyx":1049
 *         '''
 *         return Table.from_arrow(context,
 *                                 pa.Table.from_pandas(df=df, schema=None,             # <<<<<<<<<<<<<<
 *                                                      preserve_index=preserve_index,
 *                                                      nthreads=nthreads, columns=columns, safe=safe)
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_context, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_context, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_context);
    __Pyx_GIVEREF(__pyx_v_context);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_context);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":1048
 *             3      4      8     12
 *         '''
 *         return Table.from_arrow(context,             # <<<<<<<<<<<<<<
 *                                 pa.Table.from_pandas(df=df, schema=None,
 *                                                      preserve_index=preserve_index,
 */
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 1048, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1024
 * 
 *     @staticmethod
 *     def from_pandas(context: CylonContext = None, df: pd.DataFrame = None, preserve_index=False,             # <<<<<<<<<<<<<<
 *                     nthreads=None, columns=None, safe=False) -> Table:
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.from_pandas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1054
 *                                 )
 * 
 *     def to_pandas(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Creating Pandas Dataframe from PyCylon Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_89to_pandas(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_88to_pandas[] = "Table.to_pandas(self)\n\n        Creating Pandas Dataframe from PyCylon Table\n        Returns: pd.DataFrame\n\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_89to_pandas(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_pandas (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_88to_pandas(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_88to_pandas(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_pandas", 0);

  /* "pycylon/data/table.pyx":1060
 * 
 *         '''
 *         return self.to_arrow().to_pandas()             # <<<<<<<<<<<<<<
 * 
 *     def to_numpy(self, order: str = 'F', zero_copy_only: bool = True, writable: bool = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_pandas); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1054
 *                                 )
 * 
 *     def to_pandas(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Creating Pandas Dataframe from PyCylon Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table.to_pandas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1062
 *         return self.to_arrow().to_pandas()
 * 
 *     def to_numpy(self, order: str = 'F', zero_copy_only: bool = True, writable: bool = False):             # <<<<<<<<<<<<<<
 *         '''
 *         [Experimental]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_91to_numpy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_90to_numpy[] = "Table.to_numpy(self, unicode order: str = u'F', zero_copy_only: bool = True, writable: bool = False)\n\n        [Experimental]\n         This method converts a Cylon Table to a 2D numpy array.\n         In the conversion we stack each column in the Table and create a numpy array.\n         For Heterogeneous Tables, use the generated array with Caution.\n         :param order:\n        Args:\n            order: numpy array order. 'F': Fortran Style F_Contiguous or 'C' C Style C_Contiguous\n            zero_copy_only: bool to enable zero copy, and default is True\n            writable: config writable\n\n        Returns: Numpy NDArray\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_91to_numpy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order = 0;
  PyObject *__pyx_v_zero_copy_only = 0;
  PyObject *__pyx_v_writable = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_numpy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order,&__pyx_n_s_zero_copy_only,&__pyx_n_s_writable,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject*)__pyx_n_u_F);
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zero_copy_only);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_writable);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_numpy") < 0)) __PYX_ERR(0, 1062, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_order = ((PyObject*)values[0]);
    __pyx_v_zero_copy_only = values[1];
    __pyx_v_writable = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_numpy", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1062, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.to_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order), (&PyUnicode_Type), 1, "order", 1))) __PYX_ERR(0, 1062, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_90to_numpy(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_order, __pyx_v_zero_copy_only, __pyx_v_writable);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_90to_numpy(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_order, PyObject *__pyx_v_zero_copy_only, PyObject *__pyx_v_writable) {
  PyObject *__pyx_v_ar_lst = NULL;
  PyObject *__pyx_v__dtype = NULL;
  PyObject *__pyx_v_col = NULL;
  PyObject *__pyx_v_npr = NULL;
  PyObject *__pyx_v_npy = NULL;
  PyObject *__pyx_v_array = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_numpy", 0);

  /* "pycylon/data/table.pyx":1076
 *         Returns: Numpy NDArray
 *         '''
 *         ar_lst = []             # <<<<<<<<<<<<<<
 *         _dtype = None
 *         for col in self.to_arrow().combine_chunks().columns:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ar_lst = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1077
 *         '''
 *         ar_lst = []
 *         _dtype = None             # <<<<<<<<<<<<<<
 *         for col in self.to_arrow().combine_chunks().columns:
 *             npr = col.chunks[0].to_numpy(zero_copy_only=zero_copy_only, writable=writable)
 */
  __Pyx_INCREF(Py_None);
  __pyx_v__dtype = Py_None;

  /* "pycylon/data/table.pyx":1078
 *         ar_lst = []
 *         _dtype = None
 *         for col in self.to_arrow().combine_chunks().columns:             # <<<<<<<<<<<<<<
 *             npr = col.chunks[0].to_numpy(zero_copy_only=zero_copy_only, writable=writable)
 *             if None == _dtype:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1078, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1078, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1078, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1078, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_col, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":1079
 *         _dtype = None
 *         for col in self.to_arrow().combine_chunks().columns:
 *             npr = col.chunks[0].to_numpy(zero_copy_only=zero_copy_only, writable=writable)             # <<<<<<<<<<<<<<
 *             if None == _dtype:
 *                 _dtype = npr.dtype
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_col, __pyx_n_s_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_zero_copy_only, __pyx_v_zero_copy_only) < 0) __PYX_ERR(0, 1079, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_writable, __pyx_v_writable) < 0) __PYX_ERR(0, 1079, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_npr, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1080
 *         for col in self.to_arrow().combine_chunks().columns:
 *             npr = col.chunks[0].to_numpy(zero_copy_only=zero_copy_only, writable=writable)
 *             if None == _dtype:             # <<<<<<<<<<<<<<
 *                 _dtype = npr.dtype
 *             if _dtype != npr.dtype:
 */
    __pyx_t_4 = PyObject_RichCompare(Py_None, __pyx_v__dtype, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {

      /* "pycylon/data/table.pyx":1081
 *             npr = col.chunks[0].to_numpy(zero_copy_only=zero_copy_only, writable=writable)
 *             if None == _dtype:
 *                 _dtype = npr.dtype             # <<<<<<<<<<<<<<
 *             if _dtype != npr.dtype:
 *                 warnings.warn(
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_npr, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1081, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v__dtype, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pycylon/data/table.pyx":1080
 *         for col in self.to_arrow().combine_chunks().columns:
 *             npr = col.chunks[0].to_numpy(zero_copy_only=zero_copy_only, writable=writable)
 *             if None == _dtype:             # <<<<<<<<<<<<<<
 *                 _dtype = npr.dtype
 *             if _dtype != npr.dtype:
 */
    }

    /* "pycylon/data/table.pyx":1082
 *             if None == _dtype:
 *                 _dtype = npr.dtype
 *             if _dtype != npr.dtype:             # <<<<<<<<<<<<<<
 *                 warnings.warn(
 *                     "Heterogeneous Cylon Table Detected!. Use Numpy operations with Caution.")
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_npr, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v__dtype, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {

      /* "pycylon/data/table.pyx":1083
 *                 _dtype = npr.dtype
 *             if _dtype != npr.dtype:
 *                 warnings.warn(             # <<<<<<<<<<<<<<
 *                     "Heterogeneous Cylon Table Detected!. Use Numpy operations with Caution.")
 *             ar_lst.append(npr)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1083, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_u_Heterogeneous_Cylon_Table_Detect) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_Heterogeneous_Cylon_Table_Detect);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":1082
 *             if None == _dtype:
 *                 _dtype = npr.dtype
 *             if _dtype != npr.dtype:             # <<<<<<<<<<<<<<
 *                 warnings.warn(
 *                     "Heterogeneous Cylon Table Detected!. Use Numpy operations with Caution.")
 */
    }

    /* "pycylon/data/table.pyx":1085
 *                 warnings.warn(
 *                     "Heterogeneous Cylon Table Detected!. Use Numpy operations with Caution.")
 *             ar_lst.append(npr)             # <<<<<<<<<<<<<<
 *         npy = np.array(ar_lst).T
 *         array = np.asfortranarray(npy) if order == 'F' else np.ascontiguousarray(npy)
 */
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_ar_lst, __pyx_v_npr); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1085, __pyx_L1_error)

    /* "pycylon/data/table.pyx":1078
 *         ar_lst = []
 *         _dtype = None
 *         for col in self.to_arrow().combine_chunks().columns:             # <<<<<<<<<<<<<<
 *             npr = col.chunks[0].to_numpy(zero_copy_only=zero_copy_only, writable=writable)
 *             if None == _dtype:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1086
 *                     "Heterogeneous Cylon Table Detected!. Use Numpy operations with Caution.")
 *             ar_lst.append(npr)
 *         npy = np.array(ar_lst).T             # <<<<<<<<<<<<<<
 *         array = np.asfortranarray(npy) if order == 'F' else np.ascontiguousarray(npy)
 *         return array
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_ar_lst) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_ar_lst);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_npy = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":1087
 *             ar_lst.append(npr)
 *         npy = np.array(ar_lst).T
 *         array = np.asfortranarray(npy) if order == 'F' else np.ascontiguousarray(npy)             # <<<<<<<<<<<<<<
 *         return array
 * 
 */
  __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_order, __pyx_n_u_F, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1087, __pyx_L1_error)
  if ((__pyx_t_7 != 0)) {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asfortranarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_npy) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_npy);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v_npy) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_npy);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_v_array = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":1088
 *         npy = np.array(ar_lst).T
 *         array = np.asfortranarray(npy) if order == 'F' else np.ascontiguousarray(npy)
 *         return array             # <<<<<<<<<<<<<<
 * 
 *     def to_pydict(self, with_index=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_array);
  __pyx_r = __pyx_v_array;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1062
 *         return self.to_arrow().to_pandas()
 * 
 *     def to_numpy(self, order: str = 'F', zero_copy_only: bool = True, writable: bool = False):             # <<<<<<<<<<<<<<
 *         '''
 *         [Experimental]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table.to_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ar_lst);
  __Pyx_XDECREF(__pyx_v__dtype);
  __Pyx_XDECREF(__pyx_v_col);
  __Pyx_XDECREF(__pyx_v_npr);
  __Pyx_XDECREF(__pyx_v_npy);
  __Pyx_XDECREF(__pyx_v_array);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1090
 *         return array
 * 
 *     def to_pydict(self, with_index=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Args:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_93to_pydict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_92to_pydict[] = "Table.to_pydict(self, with_index=False)\n\n        Args:\n            with_index: bool value which includes or excludes index values to dictionary\n        Creating a dictionary from PyCylon table\n        Returns: dict object\n\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_93to_pydict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_with_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_pydict (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_with_index,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_with_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_pydict") < 0)) __PYX_ERR(0, 1090, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_with_index = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_pydict", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1090, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.to_pydict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_92to_pydict(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_with_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_92to_pydict(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_with_index) {
  int __pyx_v_col_idx;
  int __pyx_v_idx;
  PyObject *__pyx_v_ar_tb = NULL;
  PyObject *__pyx_v_cn_index = NULL;
  PyObject *__pyx_v_cn_column_names = NULL;
  PyObject *__pyx_v_pydict = NULL;
  PyObject *__pyx_v_chunk_arr = NULL;
  PyObject *__pyx_v_column_dict = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_pydict", 0);

  /* "pycylon/data/table.pyx":1100
 *         cdef int col_idx
 *         cdef int idx
 *         if with_index:             # <<<<<<<<<<<<<<
 *             ar_tb = self.to_arrow().combine_chunks()
 *             cn_index = self.index.values.tolist()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_with_index); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1100, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pycylon/data/table.pyx":1101
 *         cdef int idx
 *         if with_index:
 *             ar_tb = self.to_arrow().combine_chunks()             # <<<<<<<<<<<<<<
 *             cn_index = self.index.values.tolist()
 *             cn_column_names = self.column_names
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_ar_tb = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1102
 *         if with_index:
 *             ar_tb = self.to_arrow().combine_chunks()
 *             cn_index = self.index.values.tolist()             # <<<<<<<<<<<<<<
 *             cn_column_names = self.column_names
 *             pydict = {}
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tolist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_cn_index = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1103
 *             ar_tb = self.to_arrow().combine_chunks()
 *             cn_index = self.index.values.tolist()
 *             cn_column_names = self.column_names             # <<<<<<<<<<<<<<
 *             pydict = {}
 *             for col_idx, chunk_arr in enumerate(ar_tb.itercolumns()):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_cn_column_names = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1104
 *             cn_index = self.index.values.tolist()
 *             cn_column_names = self.column_names
 *             pydict = {}             # <<<<<<<<<<<<<<
 *             for col_idx, chunk_arr in enumerate(ar_tb.itercolumns()):
 *                 column_dict = {}
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_pydict = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1105
 *             cn_column_names = self.column_names
 *             pydict = {}
 *             for col_idx, chunk_arr in enumerate(ar_tb.itercolumns()):             # <<<<<<<<<<<<<<
 *                 column_dict = {}
 *                 for idx, value in enumerate(chunk_arr):
 */
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ar_tb, __pyx_n_s_itercolumns); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1105, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1105, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1105, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1105, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1105, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1105, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_chunk_arr, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_v_col_idx = __pyx_t_6;
      __pyx_t_6 = (__pyx_t_6 + 1);

      /* "pycylon/data/table.pyx":1106
 *             pydict = {}
 *             for col_idx, chunk_arr in enumerate(ar_tb.itercolumns()):
 *                 column_dict = {}             # <<<<<<<<<<<<<<
 *                 for idx, value in enumerate(chunk_arr):
 *                     column_dict[cn_index[idx]] = value.as_py()
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_column_dict, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":1107
 *             for col_idx, chunk_arr in enumerate(ar_tb.itercolumns()):
 *                 column_dict = {}
 *                 for idx, value in enumerate(chunk_arr):             # <<<<<<<<<<<<<<
 *                     column_dict[cn_index[idx]] = value.as_py()
 *                 pydict[cn_column_names[col_idx]] = column_dict
 */
      __pyx_t_9 = 0;
      if (likely(PyList_CheckExact(__pyx_v_chunk_arr)) || PyTuple_CheckExact(__pyx_v_chunk_arr)) {
        __pyx_t_2 = __pyx_v_chunk_arr; __Pyx_INCREF(__pyx_t_2); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_chunk_arr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1107, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1107, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1107, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1107, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1107, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_11(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1107, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_v_idx = __pyx_t_9;
        __pyx_t_9 = (__pyx_t_9 + 1);

        /* "pycylon/data/table.pyx":1108
 *                 column_dict = {}
 *                 for idx, value in enumerate(chunk_arr):
 *                     column_dict[cn_index[idx]] = value.as_py()             # <<<<<<<<<<<<<<
 *                 pydict[cn_column_names[col_idx]] = column_dict
 *             return pydict
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_as_py); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_3 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_cn_index, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(PyDict_SetItem(__pyx_v_column_dict, __pyx_t_5, __pyx_t_3) < 0)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "pycylon/data/table.pyx":1107
 *             for col_idx, chunk_arr in enumerate(ar_tb.itercolumns()):
 *                 column_dict = {}
 *                 for idx, value in enumerate(chunk_arr):             # <<<<<<<<<<<<<<
 *                     column_dict[cn_index[idx]] = value.as_py()
 *                 pydict[cn_column_names[col_idx]] = column_dict
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":1109
 *                 for idx, value in enumerate(chunk_arr):
 *                     column_dict[cn_index[idx]] = value.as_py()
 *                 pydict[cn_column_names[col_idx]] = column_dict             # <<<<<<<<<<<<<<
 *             return pydict
 *         else:
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_cn_column_names, __pyx_v_col_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyDict_SetItem(__pyx_v_pydict, __pyx_t_2, __pyx_v_column_dict) < 0)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":1105
 *             cn_column_names = self.column_names
 *             pydict = {}
 *             for col_idx, chunk_arr in enumerate(ar_tb.itercolumns()):             # <<<<<<<<<<<<<<
 *                 column_dict = {}
 *                 for idx, value in enumerate(chunk_arr):
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1110
 *                     column_dict[cn_index[idx]] = value.as_py()
 *                 pydict[cn_column_names[col_idx]] = column_dict
 *             return pydict             # <<<<<<<<<<<<<<
 *         else:
 *             return self.to_arrow().to_pydict()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pydict);
    __pyx_r = __pyx_v_pydict;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1100
 *         cdef int col_idx
 *         cdef int idx
 *         if with_index:             # <<<<<<<<<<<<<<
 *             ar_tb = self.to_arrow().combine_chunks()
 *             cn_index = self.index.values.tolist()
 */
  }

  /* "pycylon/data/table.pyx":1112
 *             return pydict
 *         else:
 *             return self.to_arrow().to_pydict()             # <<<<<<<<<<<<<<
 * 
 *     def to_csv(self, path, csv_write_options):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_pydict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "pycylon/data/table.pyx":1090
 *         return array
 * 
 *     def to_pydict(self, with_index=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Args:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pycylon.data.table.Table.to_pydict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ar_tb);
  __Pyx_XDECREF(__pyx_v_cn_index);
  __Pyx_XDECREF(__pyx_v_cn_column_names);
  __Pyx_XDECREF(__pyx_v_pydict);
  __Pyx_XDECREF(__pyx_v_chunk_arr);
  __Pyx_XDECREF(__pyx_v_column_dict);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1114
 *             return self.to_arrow().to_pydict()
 * 
 *     def to_csv(self, path, csv_write_options):             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a csv file with PyCylon table data
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_95to_csv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_94to_csv[] = "Table.to_csv(self, path, csv_write_options)\n\n        Creating a csv file with PyCylon table data\n        Args:\n            path: path to file\n            csv_write_options: pycylon.io.CSVWriteOptions\n\n        Returns: None\n\n        Examples\n        --------\n        >>> from pycylon.io import CSVWriteOptions\n        >>> csv_write_options = CSVWriteOptions().with_delimiter(',')\n        >>> tb.to_csv('/tmp/data.csv', csv_write_options)\n\n\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_95to_csv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_csv_write_options = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_csv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,&__pyx_n_s_csv_write_options,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csv_write_options)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("to_csv", 1, 2, 2, 1); __PYX_ERR(0, 1114, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_csv") < 0)) __PYX_ERR(0, 1114, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_path = values[0];
    __pyx_v_csv_write_options = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_csv", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1114, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.to_csv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_94to_csv(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_path, __pyx_v_csv_write_options);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_94to_csv(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_csv_write_options) {
  std::string __pyx_v_cpath;
  cylon::io::config::CSVWriteOptions __pyx_v_c_csv_write_options;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_csv", 0);

  /* "pycylon/data/table.pyx":1131
 * 
 *         '''
 *         cdef string cpath = path.encode()             # <<<<<<<<<<<<<<
 *         cdef CCSVWriteOptions c_csv_write_options = pycylon_unwrap_csv_write_options(
 *             csv_write_options)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpath = __pyx_t_4;

  /* "pycylon/data/table.pyx":1132
 *         '''
 *         cdef string cpath = path.encode()
 *         cdef CCSVWriteOptions c_csv_write_options = pycylon_unwrap_csv_write_options(             # <<<<<<<<<<<<<<
 *             csv_write_options)
 *         WriteCSV(self.table_shd_ptr, cpath, c_csv_write_options)
 */
  __pyx_v_c_csv_write_options = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_csv_write_options(__pyx_v_csv_write_options);

  /* "pycylon/data/table.pyx":1134
 *         cdef CCSVWriteOptions c_csv_write_options = pycylon_unwrap_csv_write_options(
 *             csv_write_options)
 *         WriteCSV(self.table_shd_ptr, cpath, c_csv_write_options)             # <<<<<<<<<<<<<<
 * 
 *     def to_arrow(self) -> pa.Table:
 */
  (void)(cylon::WriteCSV(__pyx_v_self->table_shd_ptr, __pyx_v_cpath, __pyx_v_c_csv_write_options));

  /* "pycylon/data/table.pyx":1114
 *             return self.to_arrow().to_pydict()
 * 
 *     def to_csv(self, path, csv_write_options):             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a csv file with PyCylon table data
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.to_csv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1136
 *         WriteCSV(self.table_shd_ptr, cpath, c_csv_write_options)
 * 
 *     def to_arrow(self) -> pa.Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Creating PyArrow Table from PyCylon table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_97to_arrow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_96to_arrow[] = "Table.to_arrow(self) -> pa.Table\n\n         Creating PyArrow Table from PyCylon table\n         :return: PyArrow Table\n         ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_97to_arrow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_arrow (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_96to_arrow(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_96to_arrow(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  std::shared_ptr< arrow::Table>  __pyx_v_converted_tb;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_arrow", 0);

  /* "pycylon/data/table.pyx":1142
 *          '''
 *         cdef shared_ptr[CArrowTable] converted_tb
 *         cdef CStatus status = self.table_shd_ptr.get().ToArrowTable(converted_tb)             # <<<<<<<<<<<<<<
 *         if status.is_ok():
 *             return pyarrow_wrap_table(converted_tb)
 */
  __pyx_v_status = __pyx_v_self->table_shd_ptr.get()->ToArrowTable(__pyx_v_converted_tb);

  /* "pycylon/data/table.pyx":1143
 *         cdef shared_ptr[CArrowTable] converted_tb
 *         cdef CStatus status = self.table_shd_ptr.get().ToArrowTable(converted_tb)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pyarrow_wrap_table(converted_tb)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_1)) {

    /* "pycylon/data/table.pyx":1144
 *         cdef CStatus status = self.table_shd_ptr.get().ToArrowTable(converted_tb)
 *         if status.is_ok():
 *             return pyarrow_wrap_table(converted_tb)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_7pyarrow_3lib_pyarrow_wrap_table(__pyx_v_converted_tb); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1143
 *         cdef shared_ptr[CArrowTable] converted_tb
 *         cdef CStatus status = self.table_shd_ptr.get().ToArrowTable(converted_tb)
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pyarrow_wrap_table(converted_tb)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":1146
 *             return pyarrow_wrap_table(converted_tb)
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 f"Table couldn't be converted to a PyArrow Table : {status.get_msg().decode()}")
 * 
 */
  /*else*/ {

    /* "pycylon/data/table.pyx":1147
 *         else:
 *             raise Exception(
 *                 f"Table couldn't be converted to a PyArrow Table : {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Table_couldn_t_be_converted_to_a, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1146
 *             return pyarrow_wrap_table(converted_tb)
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 f"Table couldn't be converted to a PyArrow Table : {status.get_msg().decode()}")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1146, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":1136
 *         WriteCSV(self.table_shd_ptr, cpath, c_csv_write_options)
 * 
 *     def to_arrow(self) -> pa.Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Creating PyArrow Table from PyCylon table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.to_arrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1150
 * 
 *     @property
 *     def column_names(self):             # <<<<<<<<<<<<<<
 *         """
 *         Produces column names from PyCylon Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_12column_names_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_12column_names_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_12column_names___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_12column_names___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":1155
 *         @return: list
 *         """
 *         return self.to_arrow().column_names             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1150
 * 
 *     @property
 *     def column_names(self):             # <<<<<<<<<<<<<<
 *         """
 *         Produces column names from PyCylon Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.column_names.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1158
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return self.to_arrow().shape
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_5shape___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_5shape___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":1159
 *     @property
 *     def shape(self):
 *         return self.to_arrow().shape             # <<<<<<<<<<<<<<
 * 
 *     # @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1158
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return self.to_arrow().shape
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1168
 *     #     """
 *     #     pass
 *     def filter(self, statement):             # <<<<<<<<<<<<<<
 *         # TODO: Supported Added via: https://github.com/cylondata/cylon/issues/211
 *         return statement
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_99filter(PyObject *__pyx_v_self, PyObject *__pyx_v_statement); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_98filter[] = "Table.filter(self, statement)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_99filter(PyObject *__pyx_v_self, PyObject *__pyx_v_statement) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_98filter(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_statement));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_98filter(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_statement) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter", 0);

  /* "pycylon/data/table.pyx":1170
 *     def filter(self, statement):
 *         # TODO: Supported Added via: https://github.com/cylondata/cylon/issues/211
 *         return statement             # <<<<<<<<<<<<<<
 * 
 *     def _table_from_mask(self, mask: Table) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_statement);
  __pyx_r = __pyx_v_statement;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1168
 *     #     """
 *     #     pass
 *     def filter(self, statement):             # <<<<<<<<<<<<<<
 *         # TODO: Supported Added via: https://github.com/cylondata/cylon/issues/211
 *         return statement
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1172
 *         return statement
 * 
 *     def _table_from_mask(self, mask: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creates a PyCylon Table from a mask of type PyCylon Table.
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_101_table_from_mask(PyObject *__pyx_v_self, PyObject *__pyx_v_mask); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_100_table_from_mask[] = "Table._table_from_mask(self, Table mask: Table) -> Table\n\n        Creates a PyCylon Table from a mask of type PyCylon Table.\n        Args:\n            mask: PyCylon Table\n\n        Returns: PyCylon Table\n\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_101_table_from_mask(PyObject *__pyx_v_self, PyObject *__pyx_v_mask) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_table_from_mask (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_ptype_7pycylon_4data_5table_Table, 1, "mask", 0))) __PYX_ERR(0, 1172, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_100_table_from_mask(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_mask));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_100_table_from_mask(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_mask) {
  PyObject *__pyx_v_mask_batches = NULL;
  PyObject *__pyx_v_masked_table = NULL;
  PyObject *__pyx_v_filtered_all_data = NULL;
  PyObject *__pyx_v_table_record_batches = NULL;
  PyObject *__pyx_v_mask_batch = NULL;
  PyObject *__pyx_v_table_batch = NULL;
  PyObject *__pyx_v_filtered_data = NULL;
  PyObject *__pyx_v_mask_value = NULL;
  PyObject *__pyx_v_table_value = NULL;
  PyObject *__pyx_v_col_names = NULL;
  PyObject *__pyx_v_final_table = NULL;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_table_from_mask", 0);

  /* "pycylon/data/table.pyx":1182
 *         '''
 * 
 *         mask_batches = mask.to_arrow().combine_chunks().to_batches()             # <<<<<<<<<<<<<<
 * 
 *         if mask.column_count == 1:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mask), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_batches); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_mask_batches = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1184
 *         mask_batches = mask.to_arrow().combine_chunks().to_batches()
 * 
 *         if mask.column_count == 1:             # <<<<<<<<<<<<<<
 *             # Handle when masking is done based on a single column data
 *             self.reset_index()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mask), __pyx_n_s_column_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "pycylon/data/table.pyx":1186
 *         if mask.column_count == 1:
 *             # Handle when masking is done based on a single column data
 *             self.reset_index()             # <<<<<<<<<<<<<<
 *             masked_table = self.from_arrow(self.context, self.to_arrow().filter(mask_batches[0][0]))
 *             masked_table.set_index(masked_table.column_names[0], drop=True)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1187
 *             # Handle when masking is done based on a single column data
 *             self.reset_index()
 *             masked_table = self.from_arrow(self.context, self.to_arrow().filter(mask_batches[0][0]))             # <<<<<<<<<<<<<<
 *             masked_table.set_index(masked_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_filter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_mask_batches, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1187, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1187, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_masked_table = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1188
 *             self.reset_index()
 *             masked_table = self.from_arrow(self.context, self.to_arrow().filter(mask_batches[0][0]))
 *             masked_table.set_index(masked_table.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *             self.set_index(self.column_names[0], drop=True)
 *             return masked_table
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_masked_table, __pyx_n_s_set_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_masked_table, __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 1188, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":1189
 *             masked_table = self.from_arrow(self.context, self.to_arrow().filter(mask_batches[0][0]))
 *             masked_table.set_index(masked_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *             return masked_table
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 1189, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1190
 *             masked_table.set_index(masked_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)
 *             return masked_table             # <<<<<<<<<<<<<<
 *         else:
 *             # Handle when masking is done on whole table
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    if (!(likely(((__pyx_v_masked_table) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_masked_table, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_masked_table);
    __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_masked_table);
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1184
 *         mask_batches = mask.to_arrow().combine_chunks().to_batches()
 * 
 *         if mask.column_count == 1:             # <<<<<<<<<<<<<<
 *             # Handle when masking is done based on a single column data
 *             self.reset_index()
 */
  }

  /* "pycylon/data/table.pyx":1193
 *         else:
 *             # Handle when masking is done on whole table
 *             filtered_all_data = []             # <<<<<<<<<<<<<<
 *             table_record_batches = self.to_arrow().combine_chunks().to_batches()
 *             for mask_batch, table_batch in zip(mask_batches[0], table_record_batches[0]):
 */
  /*else*/ {
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_filtered_all_data = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1194
 *             # Handle when masking is done on whole table
 *             filtered_all_data = []
 *             table_record_batches = self.to_arrow().combine_chunks().to_batches()             # <<<<<<<<<<<<<<
 *             for mask_batch, table_batch in zip(mask_batches[0], table_record_batches[0]):
 *                 filtered_data = []
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_8 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_to_batches); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_table_record_batches = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1195
 *             filtered_all_data = []
 *             table_record_batches = self.to_arrow().combine_chunks().to_batches()
 *             for mask_batch, table_batch in zip(mask_batches[0], table_record_batches[0]):             # <<<<<<<<<<<<<<
 *                 filtered_data = []
 *                 for mask_value, table_value in zip(mask_batch, table_batch):
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_mask_batches, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_table_record_batches, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1195, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1195, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1195, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_11(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1195, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1195, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_2)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_12(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_8 = __pyx_t_12(__pyx_t_2); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1195, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1195, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_mask_batch, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_table_batch, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "pycylon/data/table.pyx":1196
 *             table_record_batches = self.to_arrow().combine_chunks().to_batches()
 *             for mask_batch, table_batch in zip(mask_batches[0], table_record_batches[0]):
 *                 filtered_data = []             # <<<<<<<<<<<<<<
 *                 for mask_value, table_value in zip(mask_batch, table_batch):
 *                     if mask_value.as_py():
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_filtered_data, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":1197
 *             for mask_batch, table_batch in zip(mask_batches[0], table_record_batches[0]):
 *                 filtered_data = []
 *                 for mask_value, table_value in zip(mask_batch, table_batch):             # <<<<<<<<<<<<<<
 *                     if mask_value.as_py():
 *                         filtered_data.append(table_value.as_py())
 */
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_mask_batch);
      __Pyx_GIVEREF(__pyx_v_mask_batch);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_mask_batch);
      __Pyx_INCREF(__pyx_v_table_batch);
      __Pyx_GIVEREF(__pyx_v_table_batch);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_table_batch);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_3 = __pyx_t_8; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1197, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1197, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1197, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1197, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1197, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1197, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_14(__pyx_t_3);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1197, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
          PyObject* sequence = __pyx_t_8;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1197, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          #else
          __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1197, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1197, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_7 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1197, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_12 = Py_TYPE(__pyx_t_7)->tp_iternext;
          index = 0; __pyx_t_4 = __pyx_t_12(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L10_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          index = 1; __pyx_t_2 = __pyx_t_12(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L10_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_2);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_7), 2) < 0) __PYX_ERR(0, 1197, __pyx_L1_error)
          __pyx_t_12 = NULL;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L11_unpacking_done;
          __pyx_L10_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_12 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1197, __pyx_L1_error)
          __pyx_L11_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_mask_value, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_table_value, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pycylon/data/table.pyx":1198
 *                 filtered_data = []
 *                 for mask_value, table_value in zip(mask_batch, table_batch):
 *                     if mask_value.as_py():             # <<<<<<<<<<<<<<
 *                         filtered_data.append(table_value.as_py())
 *                     else:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mask_value, __pyx_n_s_as_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1198, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_6) {

          /* "pycylon/data/table.pyx":1199
 *                 for mask_value, table_value in zip(mask_batch, table_batch):
 *                     if mask_value.as_py():
 *                         filtered_data.append(table_value.as_py())             # <<<<<<<<<<<<<<
 *                     else:
 *                         filtered_data.append(math.nan)
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_table_value, __pyx_n_s_as_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1199, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1199, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_filtered_data, __pyx_t_8); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1199, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "pycylon/data/table.pyx":1198
 *                 filtered_data = []
 *                 for mask_value, table_value in zip(mask_batch, table_batch):
 *                     if mask_value.as_py():             # <<<<<<<<<<<<<<
 *                         filtered_data.append(table_value.as_py())
 *                     else:
 */
          goto __pyx_L12;
        }

        /* "pycylon/data/table.pyx":1201
 *                         filtered_data.append(table_value.as_py())
 *                     else:
 *                         filtered_data.append(math.nan)             # <<<<<<<<<<<<<<
 *                 filtered_all_data.append(filtered_data)
 * 
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_math); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1201, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1201, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_filtered_data, __pyx_t_2); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1201, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_L12:;

        /* "pycylon/data/table.pyx":1197
 *             for mask_batch, table_batch in zip(mask_batches[0], table_record_batches[0]):
 *                 filtered_data = []
 *                 for mask_value, table_value in zip(mask_batch, table_batch):             # <<<<<<<<<<<<<<
 *                     if mask_value.as_py():
 *                         filtered_data.append(table_value.as_py())
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":1202
 *                     else:
 *                         filtered_data.append(math.nan)
 *                 filtered_all_data.append(filtered_data)             # <<<<<<<<<<<<<<
 * 
 *             col_names = self.column_names
 */
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_filtered_all_data, __pyx_v_filtered_data); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1202, __pyx_L1_error)

      /* "pycylon/data/table.pyx":1195
 *             filtered_all_data = []
 *             table_record_batches = self.to_arrow().combine_chunks().to_batches()
 *             for mask_batch, table_batch in zip(mask_batches[0], table_record_batches[0]):             # <<<<<<<<<<<<<<
 *                 filtered_data = []
 *                 for mask_value, table_value in zip(mask_batch, table_batch):
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1204
 *                 filtered_all_data.append(filtered_data)
 * 
 *             col_names = self.column_names             # <<<<<<<<<<<<<<
 *             print(len(col_names), len(filtered_all_data))
 *             final_table = Table.from_list(self.context, col_names, filtered_all_data)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_col_names = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1205
 * 
 *             col_names = self.column_names
 *             print(len(col_names), len(filtered_all_data))             # <<<<<<<<<<<<<<
 *             final_table = Table.from_list(self.context, col_names, filtered_all_data)
 *             return final_table
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_col_names); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1205, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyList_GET_SIZE(__pyx_v_filtered_all_data); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1205, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":1206
 *             col_names = self.column_names
 *             print(len(col_names), len(filtered_all_data))
 *             final_table = Table.from_list(self.context, col_names, filtered_all_data)             # <<<<<<<<<<<<<<
 *             return final_table
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_1, __pyx_v_col_names, __pyx_v_filtered_all_data};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_1, __pyx_v_col_names, __pyx_v_filtered_all_data};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_9, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_col_names);
      __Pyx_GIVEREF(__pyx_v_col_names);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_9, __pyx_v_col_names);
      __Pyx_INCREF(__pyx_v_filtered_all_data);
      __Pyx_GIVEREF(__pyx_v_filtered_all_data);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_9, __pyx_v_filtered_all_data);
      __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_final_table = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":1207
 *             print(len(col_names), len(filtered_all_data))
 *             final_table = Table.from_list(self.context, col_names, filtered_all_data)
 *             return final_table             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_slice_ra_response(self, offset, length, ra_op_name):
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    if (!(likely(((__pyx_v_final_table) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_final_table, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_final_table);
    __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_final_table);
    goto __pyx_L0;
  }

  /* "pycylon/data/table.pyx":1172
 *         return statement
 * 
 *     def _table_from_mask(self, mask: Table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creates a PyCylon Table from a mask of type PyCylon Table.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pycylon.data.table.Table._table_from_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mask_batches);
  __Pyx_XDECREF(__pyx_v_masked_table);
  __Pyx_XDECREF(__pyx_v_filtered_all_data);
  __Pyx_XDECREF(__pyx_v_table_record_batches);
  __Pyx_XDECREF(__pyx_v_mask_batch);
  __Pyx_XDECREF(__pyx_v_table_batch);
  __Pyx_XDECREF(__pyx_v_filtered_data);
  __Pyx_XDECREF(__pyx_v_mask_value);
  __Pyx_XDECREF(__pyx_v_table_value);
  __Pyx_XDECREF(__pyx_v_col_names);
  __Pyx_XDECREF(__pyx_v_final_table);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1209
 *             return final_table
 * 
 *     cdef _get_slice_ra_response(self, offset, length, ra_op_name):             # <<<<<<<<<<<<<<
 *         cdef:
 *             shared_ptr[CTable] output
 */

static PyObject *__pyx_f_7pycylon_4data_5table_5Table__get_slice_ra_response(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_offset, PyObject *__pyx_v_length, PyObject *__pyx_v_ra_op_name) {
  std::shared_ptr<cylon::Table>  __pyx_v_output;
  cylon::Status __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int64_t __pyx_t_4;
  int64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_slice_ra_response", 0);

  /* "pycylon/data/table.pyx":1214
 *             CStatus status
 * 
 *         if ra_op_name == DISTRIBUTED_SLICE:             # <<<<<<<<<<<<<<
 *             status = DistributedSlice(self.table_shd_ptr, offset, length, &output)
 *         elif ra_op_name == DISTRIBUTED_HEAD:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_e_7pycylon_4data_5table_DISTRIBUTED_SLICE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_ra_op_name, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pycylon/data/table.pyx":1215
 * 
 *         if ra_op_name == DISTRIBUTED_SLICE:
 *             status = DistributedSlice(self.table_shd_ptr, offset, length, &output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == DISTRIBUTED_HEAD:
 *             status = DistributedHead(self.table_shd_ptr, length, &output)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_v_offset); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1215, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_length); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1215, __pyx_L1_error)
    __pyx_v_status = cylon::DistributedSlice(__pyx_v_self->table_shd_ptr, __pyx_t_4, __pyx_t_5, (&__pyx_v_output));

    /* "pycylon/data/table.pyx":1214
 *             CStatus status
 * 
 *         if ra_op_name == DISTRIBUTED_SLICE:             # <<<<<<<<<<<<<<
 *             status = DistributedSlice(self.table_shd_ptr, offset, length, &output)
 *         elif ra_op_name == DISTRIBUTED_HEAD:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":1216
 *         if ra_op_name == DISTRIBUTED_SLICE:
 *             status = DistributedSlice(self.table_shd_ptr, offset, length, &output)
 *         elif ra_op_name == DISTRIBUTED_HEAD:             # <<<<<<<<<<<<<<
 *             status = DistributedHead(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == DISTRIBUTED_TAIL:
 */
  __pyx_t_2 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_e_7pycylon_4data_5table_DISTRIBUTED_HEAD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_ra_op_name, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "pycylon/data/table.pyx":1217
 *             status = DistributedSlice(self.table_shd_ptr, offset, length, &output)
 *         elif ra_op_name == DISTRIBUTED_HEAD:
 *             status = DistributedHead(self.table_shd_ptr, length, &output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == DISTRIBUTED_TAIL:
 *             status = DistributedTail(self.table_shd_ptr, length, &output)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_length); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1217, __pyx_L1_error)
    __pyx_v_status = cylon::DistributedHead(__pyx_v_self->table_shd_ptr, __pyx_t_5, (&__pyx_v_output));

    /* "pycylon/data/table.pyx":1216
 *         if ra_op_name == DISTRIBUTED_SLICE:
 *             status = DistributedSlice(self.table_shd_ptr, offset, length, &output)
 *         elif ra_op_name == DISTRIBUTED_HEAD:             # <<<<<<<<<<<<<<
 *             status = DistributedHead(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == DISTRIBUTED_TAIL:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":1218
 *         elif ra_op_name == DISTRIBUTED_HEAD:
 *             status = DistributedHead(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == DISTRIBUTED_TAIL:             # <<<<<<<<<<<<<<
 *             status = DistributedTail(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == HEAD:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_e_7pycylon_4data_5table_DISTRIBUTED_TAIL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_ra_op_name, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pycylon/data/table.pyx":1219
 *             status = DistributedHead(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == DISTRIBUTED_TAIL:
 *             status = DistributedTail(self.table_shd_ptr, length, &output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == HEAD:
 *             status = Head(self.table_shd_ptr, length, &output)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_length); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1219, __pyx_L1_error)
    __pyx_v_status = cylon::DistributedTail(__pyx_v_self->table_shd_ptr, __pyx_t_5, (&__pyx_v_output));

    /* "pycylon/data/table.pyx":1218
 *         elif ra_op_name == DISTRIBUTED_HEAD:
 *             status = DistributedHead(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == DISTRIBUTED_TAIL:             # <<<<<<<<<<<<<<
 *             status = DistributedTail(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == HEAD:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":1220
 *         elif ra_op_name == DISTRIBUTED_TAIL:
 *             status = DistributedTail(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == HEAD:             # <<<<<<<<<<<<<<
 *             status = Head(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == TAIL:
 */
  __pyx_t_2 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_e_7pycylon_4data_5table_HEAD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_ra_op_name, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "pycylon/data/table.pyx":1221
 *             status = DistributedTail(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == HEAD:
 *             status = Head(self.table_shd_ptr, length, &output)             # <<<<<<<<<<<<<<
 *         elif ra_op_name == TAIL:
 *             status = Tail(self.table_shd_ptr, length, &output)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_length); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1221, __pyx_L1_error)
    __pyx_v_status = cylon::Head(__pyx_v_self->table_shd_ptr, __pyx_t_5, (&__pyx_v_output));

    /* "pycylon/data/table.pyx":1220
 *         elif ra_op_name == DISTRIBUTED_TAIL:
 *             status = DistributedTail(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == HEAD:             # <<<<<<<<<<<<<<
 *             status = Head(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == TAIL:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":1222
 *         elif ra_op_name == HEAD:
 *             status = Head(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == TAIL:             # <<<<<<<<<<<<<<
 *             status = Tail(self.table_shd_ptr, length, &output)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_e_7pycylon_4data_5table_TAIL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_ra_op_name, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_3)) {

    /* "pycylon/data/table.pyx":1223
 *             status = Head(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == TAIL:
 *             status = Tail(self.table_shd_ptr, length, &output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"Unsupported relational algebra operator: {ra_op_name}")
 */
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_length); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1223, __pyx_L1_error)
    __pyx_v_status = cylon::Tail(__pyx_v_self->table_shd_ptr, __pyx_t_5, (&__pyx_v_output));

    /* "pycylon/data/table.pyx":1222
 *         elif ra_op_name == HEAD:
 *             status = Head(self.table_shd_ptr, length, &output)
 *         elif ra_op_name == TAIL:             # <<<<<<<<<<<<<<
 *             status = Tail(self.table_shd_ptr, length, &output)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":1225
 *             status = Tail(self.table_shd_ptr, length, &output)
 *         else:
 *             raise ValueError(f"Unsupported relational algebra operator: {ra_op_name}")             # <<<<<<<<<<<<<<
 * 
 *         if status.is_ok():
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_ra_op_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_relational_algebra_o, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1225, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":1227
 *             raise ValueError(f"Unsupported relational algebra operator: {ra_op_name}")
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  __pyx_t_3 = (__pyx_v_status.is_ok() != 0);
  if (likely(__pyx_t_3)) {

    /* "pycylon/data/table.pyx":1228
 * 
 *         if status.is_ok():
 *             return pycylon_wrap_table(output)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"Head operation failed : {status.get_msg().decode()}")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_table(__pyx_v_output); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1227
 *             raise ValueError(f"Unsupported relational algebra operator: {ra_op_name}")
 * 
 *         if status.is_ok():             # <<<<<<<<<<<<<<
 *             return pycylon_wrap_table(output)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":1230
 *             return pycylon_wrap_table(output)
 *         else:
 *             raise ValueError(f"Head operation failed : {status.get_msg().decode()}")             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key) -> Table:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_status.get_msg(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Head_operation_failed, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1230, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":1209
 *             return final_table
 * 
 *     cdef _get_slice_ra_response(self, offset, length, ra_op_name):             # <<<<<<<<<<<<<<
 *         cdef:
 *             shared_ptr[CTable] output
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycylon.data.table.Table._get_slice_ra_response", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1232
 *             raise ValueError(f"Head operation failed : {status.get_msg().decode()}")
 * 
 *     def __getitem__(self, key) -> Table:             # <<<<<<<<<<<<<<
 *         """
 *         This method allows to retrieve a subset of a Table by means of a key
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_103__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_102__getitem__[] = "\n        This method allows to retrieve a subset of a Table by means of a key\n        Args:\n            key: a key can be the following\n                 1. slice i.e table[1:5], rows 1:5\n                 2. int i.e a row index\n                 3. str i.e extract the data column-wise by column-name\n                 4. List of columns are extracted\n                 5. PyCylon Table\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> ctx: CylonContext = CylonContext(config=None, distributed=False)\n        >>> data = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n        >>> columns = ['col-1', 'col-2', 'col-3']\n\n        >>> tb: Table = Table.from_list(ctx, columns, data)\n\n        >>> tb1 = tb[1:3]\n            col-1  col-2  col-3\n                0      2      6     10\n                1      3      7     11\n                2      4      8     12\n\n        >>> tb2 = tb['col-1']\n               col-1\n            0      1\n            1      2\n            2      3\n            3      4\n\n        >>> tb3 = tb[['col-1', 'col-2']]\n               col-1  col-2\n            0      1      5\n            1      2      6\n            2      3      7\n            3      4      8\n\n        >>> tb4 = tb > 3\n                 col-1  col-2  col-3\n            0    False   True   True\n            1    False   True   True\n            2    False   True   True\n            3     True   True   True\n\n        >>> tb5 = tb[tb4]\n                col-1  col-2  col-3\n            0    NaN      5      9\n            1    NaN      6     10\n            2    NaN      7     11\n            3    4.0      8     12\n\n        >>> tb8 = tb['col-1'] > 2\n               col-1  col-2  col-3\n            0      3      7     11\n            1      4      8     12\n\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_102__getitem__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_103__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_102__getitem__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_102__getitem__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_tb_index = NULL;
  PyObject *__pyx_v_py_arrow_table = NULL;
  __pyx_t_7pycylon_4data_5table_options __pyx_v_ra_op_name;
  PyObject *__pyx_v_new_tb = NULL;
  PyObject *__pyx_v_new_index = NULL;
  PyObject *__pyx_v_in_key = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_chunked_arr = NULL;
  PyObject *__pyx_v_tb_filtered = NULL;
  PyObject *__pyx_v_chunked_arrays = NULL;
  PyObject *__pyx_v_selected_columns = NULL;
  PyObject *__pyx_v_column_headers = NULL;
  PyObject *__pyx_v_index_values = NULL;
  PyObject *__pyx_v_column_name = NULL;
  PyObject *__pyx_v_new_table = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pycylon/data/table.pyx":1292
 * 
 *         """
 *         tb_index = self.index             # <<<<<<<<<<<<<<
 *         py_arrow_table = self.to_arrow().combine_chunks()
 *         cdef options ra_op_name
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tb_index = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1293
 *         """
 *         tb_index = self.index
 *         py_arrow_table = self.to_arrow().combine_chunks()             # <<<<<<<<<<<<<<
 *         cdef options ra_op_name
 *         if isinstance(key, slice):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_py_arrow_table = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1295
 *         py_arrow_table = self.to_arrow().combine_chunks()
 *         cdef options ra_op_name
 *         if isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             if key.start != None:
 *                 new_tb = self.from_arrow(self.context, py_arrow_table.slice(key.start, key.stop))
 */
  __pyx_t_5 = PySlice_Check(__pyx_v_key); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "pycylon/data/table.pyx":1296
 *         cdef options ra_op_name
 *         if isinstance(key, slice):
 *             if key.start != None:             # <<<<<<<<<<<<<<
 *                 new_tb = self.from_arrow(self.context, py_arrow_table.slice(key.start, key.stop))
 *                 new_index = tb_index.values[key.start: key.stop].tolist()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {

      /* "pycylon/data/table.pyx":1297
 *         if isinstance(key, slice):
 *             if key.start != None:
 *                 new_tb = self.from_arrow(self.context, py_arrow_table.slice(key.start, key.stop))             # <<<<<<<<<<<<<<
 *                 new_index = tb_index.values[key.start: key.stop].tolist()
 *                 new_tb.set_index(new_index)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_arrow_table, __pyx_n_s_slice); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_8, __pyx_t_9};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_8, __pyx_t_9};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_10) {
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_9);
        __pyx_t_8 = 0;
        __pyx_t_9 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_2, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_2, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_4);
        __pyx_t_2 = 0;
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_new_tb = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":1298
 *             if key.start != None:
 *                 new_tb = self.from_arrow(self.context, py_arrow_table.slice(key.start, key.stop))
 *                 new_index = tb_index.values[key.start: key.stop].tolist()             # <<<<<<<<<<<<<<
 *                 new_tb.set_index(new_index)
 *                 return new_tb
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb_index, __pyx_n_s_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_start); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, &__pyx_t_12, &__pyx_t_4, NULL, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tolist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_new_index = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":1299
 *                 new_tb = self.from_arrow(self.context, py_arrow_table.slice(key.start, key.stop))
 *                 new_index = tb_index.values[key.start: key.stop].tolist()
 *                 new_tb.set_index(new_index)             # <<<<<<<<<<<<<<
 *                 return new_tb
 *             elif key.start == None and key.stop > 0:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_tb, __pyx_n_s_set_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_new_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_new_index);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":1300
 *                 new_index = tb_index.values[key.start: key.stop].tolist()
 *                 new_tb.set_index(new_index)
 *                 return new_tb             # <<<<<<<<<<<<<<
 *             elif key.start == None and key.stop > 0:
 *                 ra_op_name = HEAD
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_new_tb);
      __pyx_r = __pyx_v_new_tb;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":1296
 *         cdef options ra_op_name
 *         if isinstance(key, slice):
 *             if key.start != None:             # <<<<<<<<<<<<<<
 *                 new_tb = self.from_arrow(self.context, py_arrow_table.slice(key.start, key.stop))
 *                 new_index = tb_index.values[key.start: key.stop].tolist()
 */
    }

    /* "pycylon/data/table.pyx":1301
 *                 new_tb.set_index(new_index)
 *                 return new_tb
 *             elif key.start == None and key.stop > 0:             # <<<<<<<<<<<<<<
 *                 ra_op_name = HEAD
 *                 return self._get_slice_ra_response(0, key.stop, ra_op_name)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __pyx_t_5;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_6) {

      /* "pycylon/data/table.pyx":1302
 *                 return new_tb
 *             elif key.start == None and key.stop > 0:
 *                 ra_op_name = HEAD             # <<<<<<<<<<<<<<
 *                 return self._get_slice_ra_response(0, key.stop, ra_op_name)
 *             elif key.start == None and key.stop < 0:
 */
      __pyx_v_ra_op_name = __pyx_e_7pycylon_4data_5table_HEAD;

      /* "pycylon/data/table.pyx":1303
 *             elif key.start == None and key.stop > 0:
 *                 ra_op_name = HEAD
 *                 return self._get_slice_ra_response(0, key.stop, ra_op_name)             # <<<<<<<<<<<<<<
 *             elif key.start == None and key.stop < 0:
 *                 ra_op_name = TAIL
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_v_ra_op_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_slice_ra_response(__pyx_v_self, __pyx_int_0, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":1301
 *                 new_tb.set_index(new_index)
 *                 return new_tb
 *             elif key.start == None and key.stop > 0:             # <<<<<<<<<<<<<<
 *                 ra_op_name = HEAD
 *                 return self._get_slice_ra_response(0, key.stop, ra_op_name)
 */
    }

    /* "pycylon/data/table.pyx":1304
 *                 ra_op_name = HEAD
 *                 return self._get_slice_ra_response(0, key.stop, ra_op_name)
 *             elif key.start == None and key.stop < 0:             # <<<<<<<<<<<<<<
 *                 ra_op_name = TAIL
 *                 return self._get_slice_ra_response(0, key.stop*(-1), ra_op_name)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    if (likely(__pyx_t_6)) {

      /* "pycylon/data/table.pyx":1305
 *                 return self._get_slice_ra_response(0, key.stop, ra_op_name)
 *             elif key.start == None and key.stop < 0:
 *                 ra_op_name = TAIL             # <<<<<<<<<<<<<<
 *                 return self._get_slice_ra_response(0, key.stop*(-1), ra_op_name)
 *             else:
 */
      __pyx_v_ra_op_name = __pyx_e_7pycylon_4data_5table_TAIL;

      /* "pycylon/data/table.pyx":1306
 *             elif key.start == None and key.stop < 0:
 *                 ra_op_name = TAIL
 *                 return self._get_slice_ra_response(0, key.stop*(-1), ra_op_name)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_int_neg_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_v_ra_op_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_slice_ra_response(__pyx_v_self, __pyx_int_0, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":1304
 *                 ra_op_name = HEAD
 *                 return self._get_slice_ra_response(0, key.stop, ra_op_name)
 *             elif key.start == None and key.stop < 0:             # <<<<<<<<<<<<<<
 *                 ra_op_name = TAIL
 *                 return self._get_slice_ra_response(0, key.stop*(-1), ra_op_name)
 */
    }

    /* "pycylon/data/table.pyx":1308
 *                 return self._get_slice_ra_response(0, key.stop*(-1), ra_op_name)
 *             else:
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")             # <<<<<<<<<<<<<<
 *         elif isinstance(key, tuple):
 *             in_key, obj = key
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_key)), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_Key_Type_in___getite, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1308, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":1295
 *         py_arrow_table = self.to_arrow().combine_chunks()
 *         cdef options ra_op_name
 *         if isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             if key.start != None:
 *                 new_tb = self.from_arrow(self.context, py_arrow_table.slice(key.start, key.stop))
 */
  }

  /* "pycylon/data/table.pyx":1309
 *             else:
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")
 *         elif isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             in_key, obj = key
 *             if isinstance(in_key, slice):
 */
  __pyx_t_6 = PyTuple_Check(__pyx_v_key); 
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "pycylon/data/table.pyx":1310
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")
 *         elif isinstance(key, tuple):
 *             in_key, obj = key             # <<<<<<<<<<<<<<
 *             if isinstance(in_key, slice):
 *                 if in_key.start != None:
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1310, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_13(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_2 = __pyx_t_13(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1310, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1310, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    __pyx_v_in_key = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1311
 *         elif isinstance(key, tuple):
 *             in_key, obj = key
 *             if isinstance(in_key, slice):             # <<<<<<<<<<<<<<
 *                 if in_key.start != None:
 *                     ra_op_name = DISTRIBUTED_SLICE
 */
    __pyx_t_5 = PySlice_Check(__pyx_v_in_key); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (likely(__pyx_t_6)) {

      /* "pycylon/data/table.pyx":1312
 *             in_key, obj = key
 *             if isinstance(in_key, slice):
 *                 if in_key.start != None:             # <<<<<<<<<<<<<<
 *                     ra_op_name = DISTRIBUTED_SLICE
 *                     return self._get_slice_ra_response(in_key.start, in_key.stop, ra_op_name)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1312, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {

        /* "pycylon/data/table.pyx":1313
 *             if isinstance(in_key, slice):
 *                 if in_key.start != None:
 *                     ra_op_name = DISTRIBUTED_SLICE             # <<<<<<<<<<<<<<
 *                     return self._get_slice_ra_response(in_key.start, in_key.stop, ra_op_name)
 *                 elif in_key.start == None and in_key.stop > 0:
 */
        __pyx_v_ra_op_name = __pyx_e_7pycylon_4data_5table_DISTRIBUTED_SLICE;

        /* "pycylon/data/table.pyx":1314
 *                 if in_key.start != None:
 *                     ra_op_name = DISTRIBUTED_SLICE
 *                     return self._get_slice_ra_response(in_key.start, in_key.stop, ra_op_name)             # <<<<<<<<<<<<<<
 *                 elif in_key.start == None and in_key.stop > 0:
 *                     ra_op_name = DISTRIBUTED_HEAD
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_v_ra_op_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_slice_ra_response(__pyx_v_self, __pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_12;
        __pyx_t_12 = 0;
        goto __pyx_L0;

        /* "pycylon/data/table.pyx":1312
 *             in_key, obj = key
 *             if isinstance(in_key, slice):
 *                 if in_key.start != None:             # <<<<<<<<<<<<<<
 *                     ra_op_name = DISTRIBUTED_SLICE
 *                     return self._get_slice_ra_response(in_key.start, in_key.stop, ra_op_name)
 */
      }

      /* "pycylon/data/table.pyx":1315
 *                     ra_op_name = DISTRIBUTED_SLICE
 *                     return self._get_slice_ra_response(in_key.start, in_key.stop, ra_op_name)
 *                 elif in_key.start == None and in_key.stop > 0:             # <<<<<<<<<<<<<<
 *                     ra_op_name = DISTRIBUTED_HEAD
 *                     return self._get_slice_ra_response(0, in_key.stop, ra_op_name)
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_start); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_12, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_6 = __pyx_t_5;
        goto __pyx_L13_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_6 = __pyx_t_5;
      __pyx_L13_bool_binop_done:;
      if (__pyx_t_6) {

        /* "pycylon/data/table.pyx":1316
 *                     return self._get_slice_ra_response(in_key.start, in_key.stop, ra_op_name)
 *                 elif in_key.start == None and in_key.stop > 0:
 *                     ra_op_name = DISTRIBUTED_HEAD             # <<<<<<<<<<<<<<
 *                     return self._get_slice_ra_response(0, in_key.stop, ra_op_name)
 *                 elif in_key.start == None and in_key.stop < 0:
 */
        __pyx_v_ra_op_name = __pyx_e_7pycylon_4data_5table_DISTRIBUTED_HEAD;

        /* "pycylon/data/table.pyx":1317
 *                 elif in_key.start == None and in_key.stop > 0:
 *                     ra_op_name = DISTRIBUTED_HEAD
 *                     return self._get_slice_ra_response(0, in_key.stop, ra_op_name)             # <<<<<<<<<<<<<<
 *                 elif in_key.start == None and in_key.stop < 0:
 *                     ra_op_name = DISTRIBUTED_TAIL
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1317, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_v_ra_op_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1317, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_slice_ra_response(__pyx_v_self, __pyx_int_0, __pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1317, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "pycylon/data/table.pyx":1315
 *                     ra_op_name = DISTRIBUTED_SLICE
 *                     return self._get_slice_ra_response(in_key.start, in_key.stop, ra_op_name)
 *                 elif in_key.start == None and in_key.stop > 0:             # <<<<<<<<<<<<<<
 *                     ra_op_name = DISTRIBUTED_HEAD
 *                     return self._get_slice_ra_response(0, in_key.stop, ra_op_name)
 */
      }

      /* "pycylon/data/table.pyx":1318
 *                     ra_op_name = DISTRIBUTED_HEAD
 *                     return self._get_slice_ra_response(0, in_key.stop, ra_op_name)
 *                 elif in_key.start == None and in_key.stop < 0:             # <<<<<<<<<<<<<<
 *                     ra_op_name = DISTRIBUTED_TAIL
 *                     return self._get_slice_ra_response(0, in_key.stop*(-1), ra_op_name)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_6 = __pyx_t_5;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __pyx_t_5;
      __pyx_L15_bool_binop_done:;
      if (likely(__pyx_t_6)) {

        /* "pycylon/data/table.pyx":1319
 *                     return self._get_slice_ra_response(0, in_key.stop, ra_op_name)
 *                 elif in_key.start == None and in_key.stop < 0:
 *                     ra_op_name = DISTRIBUTED_TAIL             # <<<<<<<<<<<<<<
 *                     return self._get_slice_ra_response(0, in_key.stop*(-1), ra_op_name)
 *                 else:
 */
        __pyx_v_ra_op_name = __pyx_e_7pycylon_4data_5table_DISTRIBUTED_TAIL;

        /* "pycylon/data/table.pyx":1320
 *                 elif in_key.start == None and in_key.stop < 0:
 *                     ra_op_name = DISTRIBUTED_TAIL
 *                     return self._get_slice_ra_response(0, in_key.stop*(-1), ra_op_name)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(f"Unsupported Key Type in __getitem__ {type(in_key)}")
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_key, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_int_neg_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_v_ra_op_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->_get_slice_ra_response(__pyx_v_self, __pyx_int_0, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_12;
        __pyx_t_12 = 0;
        goto __pyx_L0;

        /* "pycylon/data/table.pyx":1318
 *                     ra_op_name = DISTRIBUTED_HEAD
 *                     return self._get_slice_ra_response(0, in_key.stop, ra_op_name)
 *                 elif in_key.start == None and in_key.stop < 0:             # <<<<<<<<<<<<<<
 *                     ra_op_name = DISTRIBUTED_TAIL
 *                     return self._get_slice_ra_response(0, in_key.stop*(-1), ra_op_name)
 */
      }

      /* "pycylon/data/table.pyx":1322
 *                     return self._get_slice_ra_response(0, in_key.stop*(-1), ra_op_name)
 *                 else:
 *                     raise ValueError(f"Unsupported Key Type in __getitem__ {type(in_key)}")             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(in_key)}")
 */
      /*else*/ {
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_in_key)), __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_Key_Type_in___getite, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_12, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __PYX_ERR(0, 1322, __pyx_L1_error)
      }

      /* "pycylon/data/table.pyx":1311
 *         elif isinstance(key, tuple):
 *             in_key, obj = key
 *             if isinstance(in_key, slice):             # <<<<<<<<<<<<<<
 *                 if in_key.start != None:
 *                     ra_op_name = DISTRIBUTED_SLICE
 */
    }

    /* "pycylon/data/table.pyx":1324
 *                     raise ValueError(f"Unsupported Key Type in __getitem__ {type(in_key)}")
 *             else:
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(in_key)}")             # <<<<<<<<<<<<<<
 *         elif isinstance(key, int):
 *             new_tb = self.from_arrow(self.context, py_arrow_table.slice(key, 1))
 */
    /*else*/ {
      __pyx_t_12 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_in_key)), __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_Key_Type_in___getite, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 1324, __pyx_L1_error)
    }

    /* "pycylon/data/table.pyx":1309
 *             else:
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")
 *         elif isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             in_key, obj = key
 *             if isinstance(in_key, slice):
 */
  }

  /* "pycylon/data/table.pyx":1325
 *             else:
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(in_key)}")
 *         elif isinstance(key, int):             # <<<<<<<<<<<<<<
 *             new_tb = self.from_arrow(self.context, py_arrow_table.slice(key, 1))
 *             new_index = tb_index.values[key].tolist()
 */
  __pyx_t_6 = PyInt_Check(__pyx_v_key); 
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "pycylon/data/table.pyx":1326
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(in_key)}")
 *         elif isinstance(key, int):
 *             new_tb = self.from_arrow(self.context, py_arrow_table.slice(key, 1))             # <<<<<<<<<<<<<<
 *             new_index = tb_index.values[key].tolist()
 *             new_tb.set_index(new_index)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_arrow_table, __pyx_n_s_slice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_key, __pyx_int_1};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_key, __pyx_int_1};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_v_key);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_int_1);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, __pyx_t_3};
      __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, __pyx_t_3};
      __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_t_3);
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_new_tb = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1327
 *         elif isinstance(key, int):
 *             new_tb = self.from_arrow(self.context, py_arrow_table.slice(key, 1))
 *             new_index = tb_index.values[key].tolist()             # <<<<<<<<<<<<<<
 *             new_tb.set_index(new_index)
 *             return new_tb
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb_index, __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_12 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_new_index = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1328
 *             new_tb = self.from_arrow(self.context, py_arrow_table.slice(key, 1))
 *             new_index = tb_index.values[key].tolist()
 *             new_tb.set_index(new_index)             # <<<<<<<<<<<<<<
 *             return new_tb
 *         elif isinstance(key, str):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_tb, __pyx_n_s_set_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_12 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_9, __pyx_v_new_index) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_new_index);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1329
 *             new_index = tb_index.values[key].tolist()
 *             new_tb.set_index(new_index)
 *             return new_tb             # <<<<<<<<<<<<<<
 *         elif isinstance(key, str):
 *             index = self._resolve_column_index_from_column_name(key)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_new_tb);
    __pyx_r = __pyx_v_new_tb;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1325
 *             else:
 *                 raise ValueError(f"Unsupported Key Type in __getitem__ {type(in_key)}")
 *         elif isinstance(key, int):             # <<<<<<<<<<<<<<
 *             new_tb = self.from_arrow(self.context, py_arrow_table.slice(key, 1))
 *             new_index = tb_index.values[key].tolist()
 */
  }

  /* "pycylon/data/table.pyx":1330
 *             new_tb.set_index(new_index)
 *             return new_tb
 *         elif isinstance(key, str):             # <<<<<<<<<<<<<<
 *             index = self._resolve_column_index_from_column_name(key)
 *             chunked_arr = py_arrow_table.column(index)
 */
  __pyx_t_5 = PyUnicode_Check(__pyx_v_key); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "pycylon/data/table.pyx":1331
 *             return new_tb
 *         elif isinstance(key, str):
 *             index = self._resolve_column_index_from_column_name(key)             # <<<<<<<<<<<<<<
 *             chunked_arr = py_arrow_table.column(index)
 *             tb_filtered = self.from_arrow(self.context, pa.Table.from_arrays([chunked_arr.chunk(0)],
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_12 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_9, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_index = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1332
 *         elif isinstance(key, str):
 *             index = self._resolve_column_index_from_column_name(key)
 *             chunked_arr = py_arrow_table.column(index)             # <<<<<<<<<<<<<<
 *             tb_filtered = self.from_arrow(self.context, pa.Table.from_arrays([chunked_arr.chunk(0)],
 *                                                                              [key]))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_arrow_table, __pyx_n_s_column); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_12 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_9, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_index);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_chunked_arr = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1333
 *             index = self._resolve_column_index_from_column_name(key)
 *             chunked_arr = py_arrow_table.column(index)
 *             tb_filtered = self.from_arrow(self.context, pa.Table.from_arrays([chunked_arr.chunk(0)],             # <<<<<<<<<<<<<<
 *                                                                              [key]))
 *             tb_filtered.set_index(tb_index)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pa); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunked_arr, __pyx_n_s_chunk); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_0);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1334
 *             chunked_arr = py_arrow_table.column(index)
 *             tb_filtered = self.from_arrow(self.context, pa.Table.from_arrays([chunked_arr.chunk(0)],
 *                                                                              [key]))             # <<<<<<<<<<<<<<
 *             tb_filtered.set_index(tb_index)
 *             return tb_filtered
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_key);
    __pyx_t_8 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_7, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_7, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_1);
      __pyx_t_7 = 0;
      __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_9, __pyx_t_3};
      __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_9, __pyx_t_3};
      __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_3);
      __pyx_t_9 = 0;
      __pyx_t_3 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_tb_filtered = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1335
 *             tb_filtered = self.from_arrow(self.context, pa.Table.from_arrays([chunked_arr.chunk(0)],
 *                                                                              [key]))
 *             tb_filtered.set_index(tb_index)             # <<<<<<<<<<<<<<
 *             return tb_filtered
 *         elif isinstance(key, List):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb_filtered, __pyx_n_s_set_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_12 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_10, __pyx_v_tb_index) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_tb_index);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1336
 *                                                                              [key]))
 *             tb_filtered.set_index(tb_index)
 *             return tb_filtered             # <<<<<<<<<<<<<<
 *         elif isinstance(key, List):
 *             chunked_arrays = []
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_tb_filtered);
    __pyx_r = __pyx_v_tb_filtered;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1330
 *             new_tb.set_index(new_index)
 *             return new_tb
 *         elif isinstance(key, str):             # <<<<<<<<<<<<<<
 *             index = self._resolve_column_index_from_column_name(key)
 *             chunked_arr = py_arrow_table.column(index)
 */
  }

  /* "pycylon/data/table.pyx":1337
 *             tb_filtered.set_index(tb_index)
 *             return tb_filtered
 *         elif isinstance(key, List):             # <<<<<<<<<<<<<<
 *             chunked_arrays = []
 *             selected_columns = []
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_List); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_6 = PyObject_IsInstance(__pyx_v_key, __pyx_t_12); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "pycylon/data/table.pyx":1338
 *             return tb_filtered
 *         elif isinstance(key, List):
 *             chunked_arrays = []             # <<<<<<<<<<<<<<
 *             selected_columns = []
 *             column_headers = self.column_names
 */
    __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_v_chunked_arrays = ((PyObject*)__pyx_t_12);
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1339
 *         elif isinstance(key, List):
 *             chunked_arrays = []
 *             selected_columns = []             # <<<<<<<<<<<<<<
 *             column_headers = self.column_names
 *             index_values = self.index
 */
    __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_v_selected_columns = ((PyObject*)__pyx_t_12);
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1340
 *             chunked_arrays = []
 *             selected_columns = []
 *             column_headers = self.column_names             # <<<<<<<<<<<<<<
 *             index_values = self.index
 *             for column_name in key:
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_v_column_headers = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1341
 *             selected_columns = []
 *             column_headers = self.column_names
 *             index_values = self.index             # <<<<<<<<<<<<<<
 *             for column_name in key:
 *                 index = -1
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_v_index_values = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1342
 *             column_headers = self.column_names
 *             index_values = self.index
 *             for column_name in key:             # <<<<<<<<<<<<<<
 *                 index = -1
 *                 if isinstance(column_name, str):
 */
    if (likely(PyList_CheckExact(__pyx_v_key)) || PyTuple_CheckExact(__pyx_v_key)) {
      __pyx_t_12 = __pyx_v_key; __Pyx_INCREF(__pyx_t_12); __pyx_t_14 = 0;
      __pyx_t_15 = NULL;
    } else {
      __pyx_t_14 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_15 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1342, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_15)) {
        if (likely(PyList_CheckExact(__pyx_t_12))) {
          if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1342, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_12, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1342, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1342, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_12, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1342, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_15(__pyx_t_12);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1342, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_column_name, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":1343
 *             index_values = self.index
 *             for column_name in key:
 *                 index = -1             # <<<<<<<<<<<<<<
 *                 if isinstance(column_name, str):
 *                     index = self._resolve_column_index_from_column_name(column_name)
 */
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_XDECREF_SET(__pyx_v_index, __pyx_int_neg_1);

      /* "pycylon/data/table.pyx":1344
 *             for column_name in key:
 *                 index = -1
 *                 if isinstance(column_name, str):             # <<<<<<<<<<<<<<
 *                     index = self._resolve_column_index_from_column_name(column_name)
 *                 elif isinstance(column_name, int):
 */
      __pyx_t_5 = PyUnicode_Check(__pyx_v_column_name); 
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "pycylon/data/table.pyx":1345
 *                 index = -1
 *                 if isinstance(column_name, str):
 *                     index = self._resolve_column_index_from_column_name(column_name)             # <<<<<<<<<<<<<<
 *                 elif isinstance(column_name, int):
 *                     index = key
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1345, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_3, __pyx_v_column_name) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_column_name);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1345, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pycylon/data/table.pyx":1344
 *             for column_name in key:
 *                 index = -1
 *                 if isinstance(column_name, str):             # <<<<<<<<<<<<<<
 *                     index = self._resolve_column_index_from_column_name(column_name)
 *                 elif isinstance(column_name, int):
 */
        goto __pyx_L19;
      }

      /* "pycylon/data/table.pyx":1346
 *                 if isinstance(column_name, str):
 *                     index = self._resolve_column_index_from_column_name(column_name)
 *                 elif isinstance(column_name, int):             # <<<<<<<<<<<<<<
 *                     index = key
 *                 chunked_arrays.append(py_arrow_table.column(index).chunk(0))
 */
      __pyx_t_6 = PyInt_Check(__pyx_v_column_name); 
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "pycylon/data/table.pyx":1347
 *                     index = self._resolve_column_index_from_column_name(column_name)
 *                 elif isinstance(column_name, int):
 *                     index = key             # <<<<<<<<<<<<<<
 *                 chunked_arrays.append(py_arrow_table.column(index).chunk(0))
 *                 selected_columns.append(column_headers[index])
 */
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_DECREF_SET(__pyx_v_index, __pyx_v_key);

        /* "pycylon/data/table.pyx":1346
 *                 if isinstance(column_name, str):
 *                     index = self._resolve_column_index_from_column_name(column_name)
 *                 elif isinstance(column_name, int):             # <<<<<<<<<<<<<<
 *                     index = key
 *                 chunked_arrays.append(py_arrow_table.column(index).chunk(0))
 */
      }
      __pyx_L19:;

      /* "pycylon/data/table.pyx":1348
 *                 elif isinstance(column_name, int):
 *                     index = key
 *                 chunked_arrays.append(py_arrow_table.column(index).chunk(0))             # <<<<<<<<<<<<<<
 *                 selected_columns.append(column_headers[index])
 *             new_table = self.from_arrow(self.context, pa.Table.from_arrays(chunked_arrays,
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_arrow_table, __pyx_n_s_column); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_10 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_index);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_chunk); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_2 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_10, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_0);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_chunked_arrays, __pyx_t_2); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":1349
 *                     index = key
 *                 chunked_arrays.append(py_arrow_table.column(index).chunk(0))
 *                 selected_columns.append(column_headers[index])             # <<<<<<<<<<<<<<
 *             new_table = self.from_arrow(self.context, pa.Table.from_arrays(chunked_arrays,
 *                                                                            selected_columns))
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_column_headers, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_selected_columns, __pyx_t_2); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":1342
 *             column_headers = self.column_names
 *             index_values = self.index
 *             for column_name in key:             # <<<<<<<<<<<<<<
 *                 index = -1
 *                 if isinstance(column_name, str):
 */
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1350
 *                 chunked_arrays.append(py_arrow_table.column(index).chunk(0))
 *                 selected_columns.append(column_headers[index])
 *             new_table = self.from_arrow(self.context, pa.Table.from_arrays(chunked_arrays,             # <<<<<<<<<<<<<<
 *                                                                            selected_columns))
 *             new_table.set_index(index_values)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_pa); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_Table); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1351
 *                 selected_columns.append(column_headers[index])
 *             new_table = self.from_arrow(self.context, pa.Table.from_arrays(chunked_arrays,
 *                                                                            selected_columns))             # <<<<<<<<<<<<<<
 *             new_table.set_index(index_values)
 *             return new_table
 */
    __pyx_t_4 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_chunked_arrays, __pyx_v_selected_columns};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_chunked_arrays, __pyx_v_selected_columns};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_chunked_arrays);
      __Pyx_GIVEREF(__pyx_v_chunked_arrays);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_11, __pyx_v_chunked_arrays);
      __Pyx_INCREF(__pyx_v_selected_columns);
      __Pyx_GIVEREF(__pyx_v_selected_columns);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_11, __pyx_v_selected_columns);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_10};
      __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_10};
      __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_11, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_11, __pyx_t_10);
      __pyx_t_3 = 0;
      __pyx_t_10 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_new_table = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1352
 *             new_table = self.from_arrow(self.context, pa.Table.from_arrays(chunked_arrays,
 *                                                                            selected_columns))
 *             new_table.set_index(index_values)             # <<<<<<<<<<<<<<
 *             return new_table
 *         elif self._is_pycylon_table(key):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_table, __pyx_n_s_set_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_12 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_index_values) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_index_values);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "pycylon/data/table.pyx":1353
 *                                                                            selected_columns))
 *             new_table.set_index(index_values)
 *             return new_table             # <<<<<<<<<<<<<<
 *         elif self._is_pycylon_table(key):
 *             return self._table_from_mask(key)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_new_table);
    __pyx_r = __pyx_v_new_table;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1337
 *             tb_filtered.set_index(tb_index)
 *             return tb_filtered
 *         elif isinstance(key, List):             # <<<<<<<<<<<<<<
 *             chunked_arrays = []
 *             selected_columns = []
 */
  }

  /* "pycylon/data/table.pyx":1354
 *             new_table.set_index(index_values)
 *             return new_table
 *         elif self._is_pycylon_table(key):             # <<<<<<<<<<<<<<
 *             return self._table_from_mask(key)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_pycylon_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_12 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (likely(__pyx_t_5)) {

    /* "pycylon/data/table.pyx":1355
 *             return new_table
 *         elif self._is_pycylon_table(key):
 *             return self._table_from_mask(key)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_table_from_mask); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_12 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_12;
    __pyx_t_12 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1354
 *             new_table.set_index(index_values)
 *             return new_table
 *         elif self._is_pycylon_table(key):             # <<<<<<<<<<<<<<
 *             return self._table_from_mask(key)
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":1357
 *             return self._table_from_mask(key)
 *         else:
 *             raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, key, value):
 */
  /*else*/ {
    __pyx_t_12 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_key)), __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_Key_Type_in___getite, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_12, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __PYX_ERR(0, 1357, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":1232
 *             raise ValueError(f"Head operation failed : {status.get_msg().decode()}")
 * 
 *     def __getitem__(self, key) -> Table:             # <<<<<<<<<<<<<<
 *         """
 *         This method allows to retrieve a subset of a Table by means of a key
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pycylon.data.table.Table.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tb_index);
  __Pyx_XDECREF(__pyx_v_py_arrow_table);
  __Pyx_XDECREF(__pyx_v_new_tb);
  __Pyx_XDECREF(__pyx_v_new_index);
  __Pyx_XDECREF(__pyx_v_in_key);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_chunked_arr);
  __Pyx_XDECREF(__pyx_v_tb_filtered);
  __Pyx_XDECREF(__pyx_v_chunked_arrays);
  __Pyx_XDECREF(__pyx_v_selected_columns);
  __Pyx_XDECREF(__pyx_v_column_headers);
  __Pyx_XDECREF(__pyx_v_index_values);
  __Pyx_XDECREF(__pyx_v_column_name);
  __Pyx_XDECREF(__pyx_v_new_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1359
 *             raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         '''
 *         Sets values for a existing table by means of a column
 */

/* Python wrapper */
static int __pyx_pw_7pycylon_4data_5table_5Table_105__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_104__setitem__[] = "\n        Sets values for a existing table by means of a column\n        Args:\n            key: (str) column-name\n            value: (Table) data as a single column table or a scalar\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n\n        >>> tb['col-3'] = Table.from_list(ctx, ['x'], [[90, 100, 110, 120]])\n               col-1  col-2  col-3\n            0      1      5     90\n            1      2      6    100\n            2      3      7    110\n            3      4      8    120\n\n        >>> tb['col-4'] = Table.from_list(ctx, ['x'], [[190, 1100, 1110, 1120]])\n                col-1  col-2  col-3  col-4\n            0      1      5     90    190\n            1      2      6    100   1100\n            2      3      7    110   1110\n            3      4      8    120   1120\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_104__setitem__;
#endif
static int __pyx_pw_7pycylon_4data_5table_5Table_105__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_104__setitem__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pycylon_4data_5table_5Table_104__setitem__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_tb_index = NULL;
  PyObject *__pyx_v_value_arrow_table = NULL;
  PyObject *__pyx_v_chunk_arr = NULL;
  PyObject *__pyx_v_current_ar_table = NULL;
  PyObject *__pyx_v_index = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pycylon/data/table.pyx":1392
 *             3      4      8    120   1120
 *         '''
 *         tb_index = self.index             # <<<<<<<<<<<<<<
 *         if isinstance(key, str) and isinstance(value, Table):
 *             if value.column_count == 1:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tb_index = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1393
 *         '''
 *         tb_index = self.index
 *         if isinstance(key, str) and isinstance(value, Table):             # <<<<<<<<<<<<<<
 *             if value.column_count == 1:
 *                 value_arrow_table = value.to_arrow().combine_chunks()
 */
  __pyx_t_3 = PyUnicode_Check(__pyx_v_key); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_7pycylon_4data_5table_Table); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":1394
 *         tb_index = self.index
 *         if isinstance(key, str) and isinstance(value, Table):
 *             if value.column_count == 1:             # <<<<<<<<<<<<<<
 *                 value_arrow_table = value.to_arrow().combine_chunks()
 *                 chunk_arr = value_arrow_table.columns[0].chunks[0]
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_column_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(__pyx_t_2)) {

      /* "pycylon/data/table.pyx":1395
 *         if isinstance(key, str) and isinstance(value, Table):
 *             if value.column_count == 1:
 *                 value_arrow_table = value.to_arrow().combine_chunks()             # <<<<<<<<<<<<<<
 *                 chunk_arr = value_arrow_table.columns[0].chunks[0]
 *             else:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_value_arrow_table = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "pycylon/data/table.pyx":1396
 *             if value.column_count == 1:
 *                 value_arrow_table = value.to_arrow().combine_chunks()
 *                 chunk_arr = value_arrow_table.columns[0].chunks[0]             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Given table has more than 1 columns")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value_arrow_table, __pyx_n_s_columns); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_chunks); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_chunk_arr = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "pycylon/data/table.pyx":1394
 *         tb_index = self.index
 *         if isinstance(key, str) and isinstance(value, Table):
 *             if value.column_count == 1:             # <<<<<<<<<<<<<<
 *                 value_arrow_table = value.to_arrow().combine_chunks()
 *                 chunk_arr = value_arrow_table.columns[0].chunks[0]
 */
      goto __pyx_L6;
    }

    /* "pycylon/data/table.pyx":1398
 *                 chunk_arr = value_arrow_table.columns[0].chunks[0]
 *             else:
 *                 raise ValueError("Given table has more than 1 columns")             # <<<<<<<<<<<<<<
 *         elif isinstance(key, str) and np.isscalar(value):
 *             chunk_arr = pa.array(np.full(self.row_count, value))
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 1398, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "pycylon/data/table.pyx":1393
 *         '''
 *         tb_index = self.index
 *         if isinstance(key, str) and isinstance(value, Table):             # <<<<<<<<<<<<<<
 *             if value.column_count == 1:
 *                 value_arrow_table = value.to_arrow().combine_chunks()
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":1399
 *             else:
 *                 raise ValueError("Given table has more than 1 columns")
 *         elif isinstance(key, str) and np.isscalar(value):             # <<<<<<<<<<<<<<
 *             chunk_arr = pa.array(np.full(self.row_count, value))
 *         else:
 */
  __pyx_t_3 = PyUnicode_Check(__pyx_v_key); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_value);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":1400
 *                 raise ValueError("Given table has more than 1 columns")
 *         elif isinstance(key, str) and np.isscalar(value):
 *             chunk_arr = pa.array(np.full(self.row_count, value))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"Not Implemented __setitem__ option for key Type {type(key)} and "
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pa); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_full); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_row_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_value);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_chunk_arr = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "pycylon/data/table.pyx":1399
 *             else:
 *                 raise ValueError("Given table has more than 1 columns")
 *         elif isinstance(key, str) and np.isscalar(value):             # <<<<<<<<<<<<<<
 *             chunk_arr = pa.array(np.full(self.row_count, value))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":1402
 *             chunk_arr = pa.array(np.full(self.row_count, value))
 *         else:
 *             raise ValueError(f"Not Implemented __setitem__ option for key Type {type(key)} and "             # <<<<<<<<<<<<<<
 *                              f"value type {type(value)}")
 * 
 */
  /*else*/ {
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_12 = 0;
    __pyx_t_13 = 127;
    __Pyx_INCREF(__pyx_kp_u_Not_Implemented___setitem___opti);
    __pyx_t_12 += 48;
    __Pyx_GIVEREF(__pyx_kp_u_Not_Implemented___setitem___opti);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Not_Implemented___setitem___opti);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_key)), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_and_value_type);
    __pyx_t_12 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_and_value_type);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_and_value_type);

    /* "pycylon/data/table.pyx":1403
 *         else:
 *             raise ValueError(f"Not Implemented __setitem__ option for key Type {type(key)} and "
 *                              f"value type {type(value)}")             # <<<<<<<<<<<<<<
 * 
 *         current_ar_table = self.to_arrow()
 */
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_value)), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pycylon/data/table.pyx":1402
 *             chunk_arr = pa.array(np.full(self.row_count, value))
 *         else:
 *             raise ValueError(f"Not Implemented __setitem__ option for key Type {type(key)} and "             # <<<<<<<<<<<<<<
 *                              f"value type {type(value)}")
 * 
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_6, 4, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1402, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":1405
 *                              f"value type {type(value)}")
 * 
 *         current_ar_table = self.to_arrow()             # <<<<<<<<<<<<<<
 *         if key in self.column_names:
 *             index = self._resolve_column_index_from_column_name(key)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_current_ar_table = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pycylon/data/table.pyx":1406
 * 
 *         current_ar_table = self.to_arrow()
 *         if key in self.column_names:             # <<<<<<<<<<<<<<
 *             index = self._resolve_column_index_from_column_name(key)
 *             # A new Column is replacing an existing column
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_6, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "pycylon/data/table.pyx":1407
 *         current_ar_table = self.to_arrow()
 *         if key in self.column_names:
 *             index = self._resolve_column_index_from_column_name(key)             # <<<<<<<<<<<<<<
 *             # A new Column is replacing an existing column
 *             self.initialize(current_ar_table.set_column(index, key, chunk_arr),
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_column_index_from_colum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_key);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_index = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "pycylon/data/table.pyx":1409
 *             index = self._resolve_column_index_from_column_name(key)
 *             # A new Column is replacing an existing column
 *             self.initialize(current_ar_table.set_column(index, key, chunk_arr),             # <<<<<<<<<<<<<<
 *                             self.context)
 *             self.set_index(tb_index)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_ar_table, __pyx_n_s_set_column); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_index, __pyx_v_key, __pyx_v_chunk_arr};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_index, __pyx_v_key, __pyx_v_chunk_arr};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_v_index);
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_v_key);
      __Pyx_INCREF(__pyx_v_chunk_arr);
      __Pyx_GIVEREF(__pyx_v_chunk_arr);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_10, __pyx_v_chunk_arr);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pycylon/data/table.pyx":1410
 *             # A new Column is replacing an existing column
 *             self.initialize(current_ar_table.set_column(index, key, chunk_arr),
 *                             self.context)             # <<<<<<<<<<<<<<
 *             self.set_index(tb_index)
 *         else:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_8);
      __pyx_t_1 = 0;
      __pyx_t_8 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pycylon/data/table.pyx":1411
 *             self.initialize(current_ar_table.set_column(index, key, chunk_arr),
 *                             self.context)
 *             self.set_index(tb_index)             # <<<<<<<<<<<<<<
 *         else:
 *             self.initialize(current_ar_table.append_column(key, chunk_arr), self.context)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_11, __pyx_v_tb_index) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_tb_index);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pycylon/data/table.pyx":1406
 * 
 *         current_ar_table = self.to_arrow()
 *         if key in self.column_names:             # <<<<<<<<<<<<<<
 *             index = self._resolve_column_index_from_column_name(key)
 *             # A new Column is replacing an existing column
 */
    goto __pyx_L9;
  }

  /* "pycylon/data/table.pyx":1413
 *             self.set_index(tb_index)
 *         else:
 *             self.initialize(current_ar_table.append_column(key, chunk_arr), self.context)             # <<<<<<<<<<<<<<
 *             self.set_index(tb_index)
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_ar_table, __pyx_n_s_append_column); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_key, __pyx_v_chunk_arr};
      __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1413, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_key, __pyx_v_chunk_arr};
      __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1413, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_v_key);
      __Pyx_INCREF(__pyx_v_chunk_arr);
      __Pyx_GIVEREF(__pyx_v_chunk_arr);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_v_chunk_arr);
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_11, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1413, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_11, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1413, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_t_8);
      __pyx_t_11 = 0;
      __pyx_t_8 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pycylon/data/table.pyx":1414
 *         else:
 *             self.initialize(current_ar_table.append_column(key, chunk_arr), self.context)
 *             self.set_index(tb_index)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other) -> Table:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_tb_index) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_tb_index);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_L9:;

  /* "pycylon/data/table.pyx":1359
 *             raise ValueError(f"Unsupported Key Type in __getitem__ {type(key)}")
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         '''
 *         Sets values for a existing table by means of a column
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pycylon.data.table.Table.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tb_index);
  __Pyx_XDECREF(__pyx_v_value_arrow_table);
  __Pyx_XDECREF(__pyx_v_chunk_arr);
  __Pyx_XDECREF(__pyx_v_current_ar_table);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1416
 *             self.set_index(tb_index)
 * 
 *     def __eq__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Equal operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_107__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_106__eq__[] = "\n        Equal operator for Table\n        Args:\n            other: can be a numeric scalar or a Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb['col-1'] == 2\n               col-1\n            0  False\n            1   True\n            2  False\n            3  False\n\n        >>> tb == 2\n               col-1  col-2  col-3\n            0  False  False  False\n            1   True  False  False\n            2  False  False  False\n            3  False  False  False\n\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_106__eq__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_107__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_106__eq__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_106__eq__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "pycylon/data/table.pyx":1449
 * 
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__eq__, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1450
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.table_compare_op(self, other, operator.__eq__, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __ne__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_table_compare_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_eq); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1416
 *             self.set_index(tb_index)
 * 
 *     def __eq__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Equal operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1452
 *         return compute.table_compare_op(self, other, operator.__eq__, engine)
 * 
 *     def __ne__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Not equal operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_109__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_108__ne__[] = "\n        Not equal operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb3 = tb['col-1'] != 2\n               col-1\n            0   True\n            1  False\n            2   True\n            3   True\n\n        >>> tb4 = tb != 2\n               col-1  col-2  col-3\n            0   True   True   True\n            1  False   True   True\n            2   True   True   True\n            3   True   True   True\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_108__ne__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_109__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ne__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_108__ne__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_108__ne__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ne__", 0);

  /* "pycylon/data/table.pyx":1483
 *             3   True   True   True
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__ne__, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1484
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.table_compare_op(self, other, operator.__ne__, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __lt__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_table_compare_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ne); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1452
 *         return compute.table_compare_op(self, other, operator.__eq__, engine)
 * 
 *     def __ne__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Not equal operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1486
 *         return compute.table_compare_op(self, other, operator.__ne__, engine)
 * 
 *     def __lt__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Lesser than operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_111__lt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_110__lt__[] = "\n        Lesser than operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb3 = tb['col-1'] < 2\n               col-1\n            0   True\n            1  False\n            2  False\n            3  False\n\n        >>> tb4 = tb < 2\n               col-1  col-2  col-3\n            0   True  False  False\n            1  False  False  False\n            2  False  False  False\n            3  False  False  False\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_110__lt__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_111__lt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__lt__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_110__lt__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_110__lt__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__lt__", 0);

  /* "pycylon/data/table.pyx":1517
 *             3  False  False  False
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__lt__, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1518
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.table_compare_op(self, other, operator.__lt__, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __gt__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_table_compare_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1486
 *         return compute.table_compare_op(self, other, operator.__ne__, engine)
 * 
 *     def __lt__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Lesser than operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__lt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1520
 *         return compute.table_compare_op(self, other, operator.__lt__, engine)
 * 
 *     def __gt__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Greater than operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_113__gt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_112__gt__[] = "\n        Greater than operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb3 = tb['col-1'] > 2\n                col-1\n            0  False\n            1  False\n            2   True\n            3   True\n\n        >>> tb4 = tb > 2\n               col-1  col-2  col-3\n            0  False   True   True\n            1  False   True   True\n            2   True   True   True\n            3   True   True   True\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_112__gt__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_113__gt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__gt__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_112__gt__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_112__gt__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__gt__", 0);

  /* "pycylon/data/table.pyx":1551
 *             3   True   True   True
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__gt__, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1552
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.table_compare_op(self, other, operator.__gt__, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __le__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_table_compare_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_gt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1520
 *         return compute.table_compare_op(self, other, operator.__lt__, engine)
 * 
 *     def __gt__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Greater than operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__gt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1554
 *         return compute.table_compare_op(self, other, operator.__gt__, engine)
 * 
 *     def __le__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Lesser than or equal operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_115__le__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_114__le__[] = "\n        Lesser than or equal operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb3 = tb['col-1'] <= 2\n                col-1\n            0   True\n            1   True\n            2  False\n            3  False\n\n        >>> tb4 = tb <= 2\n               col-1  col-2  col-3\n            0   True  False  False\n            1   True  False  False\n            2  False  False  False\n            3  False  False  False\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_114__le__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_115__le__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__le__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_114__le__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_114__le__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__le__", 0);

  /* "pycylon/data/table.pyx":1585
 *             3  False  False  False
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__le__, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1586
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.table_compare_op(self, other, operator.__le__, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __ge__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_table_compare_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_le); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1586, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1586, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1554
 *         return compute.table_compare_op(self, other, operator.__gt__, engine)
 * 
 *     def __le__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Lesser than or equal operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__le__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1588
 *         return compute.table_compare_op(self, other, operator.__le__, engine)
 * 
 *     def __ge__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Greater than or equal operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_117__ge__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_116__ge__[] = "\n        Greater than or equal operator for Table\n        Args:\n            other: can be a numeric scalar or Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n\n        >>> tb3 = tb['col-1'] >= 2\n               col-1\n            0  False\n            1   True\n            2   True\n            3   True\n\n        >>> tb4 = tb >= 2\n               col-1  col-2  col-3\n            0  False   True   True\n            1   True   True   True\n            2   True   True   True\n            3   True   True   True\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_116__ge__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_117__ge__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ge__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_116__ge__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_116__ge__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ge__", 0);

  /* "pycylon/data/table.pyx":1620
 *             3   True   True   True
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__ge__, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1621
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.table_compare_op(self, other, operator.__ge__, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __or__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_table_compare_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1588
 *         return compute.table_compare_op(self, other, operator.__le__, engine)
 * 
 *     def __ge__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Greater than or equal operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__ge__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1623
 *         return compute.table_compare_op(self, other, operator.__ge__, engine)
 * 
 *     def __or__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Or operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_119__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_118__or__[] = "\n        Or operator for Table\n        Args:\n            other: PyCylon Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb1\n               col-1  col-2\n            0  False   True\n            1   True   True\n            2  False  False\n            3   True  False\n\n        >>> tb2\n                col-1  col-2\n            0   True  False\n            1   True   True\n            2  False  False\n            3  False   True\n\n        >>> tb_or = tb1 | tb2\n               col-1  col-2\n            0   True   True\n            1   True   True\n            2  False  False\n            3   True   True\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_118__or__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_119__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_118__or__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_118__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "pycylon/data/table.pyx":1654
 *             3   True   True
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__or__, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1655
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.table_compare_op(self, other, operator.__or__, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __and__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_table_compare_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_or); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1623
 *         return compute.table_compare_op(self, other, operator.__ge__, engine)
 * 
 *     def __or__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Or operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1657
 *         return compute.table_compare_op(self, other, operator.__or__, engine)
 * 
 *     def __and__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         And operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_121__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_120__and__[] = "\n        And operator for Table\n        Args:\n            other: PyCylon Table\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb1\n               col-1  col-2\n            0  False   True\n            1   True   True\n            2  False  False\n            3   True  False\n\n        >>> tb2\n                col-1  col-2\n            0   True  False\n            1   True   True\n            2  False  False\n            3  False   True\n\n        >>> tb_or = tb1 & tb2\n               col-1  col-2\n            0  False  False\n            1   True   True\n            2  False  False\n            3  False  False\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_120__and__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_121__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_120__and__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_120__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 0);

  /* "pycylon/data/table.pyx":1688
 *             3  False  False
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__and__, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1689
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.table_compare_op(self, other, operator.__and__, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __invert__(self) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_table_compare_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_and); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_v_other, __pyx_t_4, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1657
 *         return compute.table_compare_op(self, other, operator.__or__, engine)
 * 
 *     def __and__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         And operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1691
 *         return compute.table_compare_op(self, other, operator.__and__, engine)
 * 
 *     def __invert__(self) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Invert operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_123__invert__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_122__invert__[] = "\n         Invert operator for Table\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n         >>> tb\n                col-1  col-2\n            0  False   True\n            1   True   True\n            2  False  False\n            3   True  False\n\n        >>> ~tb\n               col-1  col-2\n            0   True  False\n            1  False  False\n            2   True   True\n            3  False   True\n         ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_122__invert__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_123__invert__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__invert__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_122__invert__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_122__invert__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__invert__", 0);

  /* "pycylon/data/table.pyx":1714
 *          '''
 * 
 *         return compute.invert(self)             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_invert); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1691
 *         return compute.table_compare_op(self, other, operator.__and__, engine)
 * 
 *     def __invert__(self) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Invert operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.__invert__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1716
 *         return compute.invert(self)
 * 
 *     def __neg__(self) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Negation operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_125__neg__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_124__neg__[] = "\n         Negation operator for Table\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n         >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n         >>> -tb\n               col-1  col-2  col-3\n            0     -1     -5     -9\n            1     -2     -6    -10\n            2     -3     -7    -11\n            3     -4     -8    -12\n         ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_124__neg__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_125__neg__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_124__neg__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_124__neg__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 0);

  /* "pycylon/data/table.pyx":1739
 *          '''
 * 
 *         return compute.neg(self)             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_neg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1716
 *         return compute.invert(self)
 * 
 *     def __neg__(self) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Negation operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1741
 *         return compute.neg(self)
 * 
 *     def __add__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Add operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_127__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_126__add__[] = "\n         Add operator for Table\n         Args:\n             other: scalar numeric\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb + 2\n               col-1  col-2  col-3\n            0      3      7     11\n            1      4      8     12\n            2      5      9     13\n            3      6     10     14\n         ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_126__add__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_127__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_126__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_126__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pycylon/data/table.pyx":1765
 *             3      6     10     14
 *          '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.math_op(self, operator.add, other, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1766
 *          '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.math_op(self, operator.add, other, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_math_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_t_4, __pyx_v_other, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_t_4, __pyx_v_other, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_other);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1741
 *         return compute.neg(self)
 * 
 *     def __add__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Add operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1768
 *         return compute.math_op(self, operator.add, other, engine)
 * 
 *     def __sub__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Subtract operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_129__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_128__sub__[] = "\n         Subtract operator for Table\n         Args:compute.add(self, other, 'numpy')\n             other: scalar numeric\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb - 2\n               col-1  col-2  col-3\n            0     -1      3      7\n            1      0      4      8\n            2      1      5      9\n            3      2      6     10\n         ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_128__sub__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_129__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_128__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_128__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "pycylon/data/table.pyx":1792
 *             3      2      6     10
 *          '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.math_op(self, operator.sub, other, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1793
 *          '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.math_op(self, operator.sub, other, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_math_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sub); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_t_4, __pyx_v_other, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_t_4, __pyx_v_other, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_other);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1768
 *         return compute.math_op(self, operator.add, other, engine)
 * 
 *     def __sub__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Subtract operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1795
 *         return compute.math_op(self, operator.sub, other, engine)
 * 
 *     def __mul__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Multiply operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_131__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_130__mul__[] = "\n         Multiply operator for Table\n         Args:\n             other: scalar numeric\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb * 2\n               col-1  col-2  col-3\n            0      2     10     18\n            1      4     12     20\n            2      6     14     22\n            3      8     16     24\n         ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_130__mul__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_131__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_130__mul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_130__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pycylon/data/table.pyx":1819
 *             3      8     16     24
 *          '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.math_op(self, operator.mul, other, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1820
 *          '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.math_op(self, operator.mul, other, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(self, other) -> Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_math_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_mul); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_t_4, __pyx_v_other, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_t_4, __pyx_v_other, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_other);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1795
 *         return compute.math_op(self, operator.sub, other, engine)
 * 
 *     def __mul__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Multiply operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1822
 *         return compute.math_op(self, operator.mul, other, engine)
 * 
 *     def __truediv__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Element-wise division operator for Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_133__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_132__truediv__[] = "\n         Element-wise division operator for Table\n         Args:\n             other: scalar numeric\n\n         Returns: PyCylon Table\n\n         Examples\n         --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb / 2\n               col-1  col-2  col-3\n            0    0.5    2.5    4.5\n            1    1.0    3.0    5.0\n            2    1.5    3.5    5.5\n            3    2.0    4.0    6.0\n         ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7pycylon_4data_5table_5Table_132__truediv__;
#endif
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_133__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_132__truediv__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_132__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_engine = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "pycylon/data/table.pyx":1846
 *             3    2.0    4.0    6.0
 *          '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.math_op(self, operator.truediv, other, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1847
 *          '''
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.math_op(self, operator.truediv, other, engine)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_math_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_truediv); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_t_4, __pyx_v_other, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_self, __pyx_t_4, __pyx_v_other, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_other);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_engine);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1822
 *         return compute.math_op(self, operator.mul, other, engine)
 * 
 *     def __truediv__(self, other) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *          Element-wise division operator for Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1849
 *         return compute.math_op(self, operator.truediv, other, engine)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.to_string()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_135__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_135__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_134__repr__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_134__repr__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pycylon/data/table.pyx":1850
 * 
 *     def __repr__(self):
 *         return self.to_string()             # <<<<<<<<<<<<<<
 * 
 *     def to_string(self, row_limit: int = 10):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1849
 *         return compute.math_op(self, operator.truediv, other, engine)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.to_string()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1852
 *         return self.to_string()
 * 
 *     def to_string(self, row_limit: int = 10):             # <<<<<<<<<<<<<<
 *         # TODO: Need to improve this method with more features:
 *         #  https://github.com/cylondata/cylon/issues/219
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_137to_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_136to_string[] = "Table.to_string(self, row_limit: int = 10)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_137to_string(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_row_limit = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_string (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row_limit,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_10);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_limit);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_string") < 0)) __PYX_ERR(0, 1852, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_row_limit = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_string", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1852, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_136to_string(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_row_limit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_136to_string(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_row_limit) {
  PyObject *__pyx_v_str1 = NULL;
  PyObject *__pyx_v_printable_rows = NULL;
  PyObject *__pyx_v_rows = NULL;
  Py_ssize_t __pyx_v_len_mid_line;
  PyObject *__pyx_v_dot_line = NULL;
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_row_strs = NULL;
  CYTHON_UNUSED long __pyx_v_len_row;
  CYTHON_UNUSED PyObject *__pyx_v_row_id = NULL;
  PyObject *__pyx_v_row_str = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_string", 0);
  __Pyx_INCREF(__pyx_v_row_limit);

  /* "pycylon/data/table.pyx":1856
 *         #  https://github.com/cylondata/cylon/issues/219
 * 
 *         row_limit = row_limit if row_limit % 2 == 0 else row_limit + 1             # <<<<<<<<<<<<<<
 *         str1 = self.to_pandas().to_string()
 *         if self.row_count > row_limit:
 */
  __pyx_t_2 = __Pyx_PyInt_RemainderObjC(__pyx_v_row_limit, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
    __Pyx_INCREF(__pyx_v_row_limit);
    __pyx_t_1 = __pyx_v_row_limit;
  } else {
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_row_limit, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF_SET(__pyx_v_row_limit, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1857
 * 
 *         row_limit = row_limit if row_limit % 2 == 0 else row_limit + 1
 *         str1 = self.to_pandas().to_string()             # <<<<<<<<<<<<<<
 *         if self.row_count > row_limit:
 *             printable_rows = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_pandas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_to_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_str1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1858
 *         row_limit = row_limit if row_limit % 2 == 0 else row_limit + 1
 *         str1 = self.to_pandas().to_string()
 *         if self.row_count > row_limit:             # <<<<<<<<<<<<<<
 *             printable_rows = []
 *             rows = str1.split("\n")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_row_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_row_limit, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pycylon/data/table.pyx":1859
 *         str1 = self.to_pandas().to_string()
 *         if self.row_count > row_limit:
 *             printable_rows = []             # <<<<<<<<<<<<<<
 *             rows = str1.split("\n")
 *             len_mid_line = len(rows[self.row_count])
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_printable_rows = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1860
 *         if self.row_count > row_limit:
 *             printable_rows = []
 *             rows = str1.split("\n")             # <<<<<<<<<<<<<<
 *             len_mid_line = len(rows[self.row_count])
 *             dot_line = ""
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_str1, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_kp_u__21) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u__21);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_rows = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1861
 *             printable_rows = []
 *             rows = str1.split("\n")
 *             len_mid_line = len(rows[self.row_count])             # <<<<<<<<<<<<<<
 *             dot_line = ""
 *             for i in range(len_mid_line):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_row_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_rows, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_len_mid_line = __pyx_t_6;

    /* "pycylon/data/table.pyx":1862
 *             rows = str1.split("\n")
 *             len_mid_line = len(rows[self.row_count])
 *             dot_line = ""             # <<<<<<<<<<<<<<
 *             for i in range(len_mid_line):
 *                 dot_line += "."
 */
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_v_dot_line = __pyx_kp_u__7;

    /* "pycylon/data/table.pyx":1863
 *             len_mid_line = len(rows[self.row_count])
 *             dot_line = ""
 *             for i in range(len_mid_line):             # <<<<<<<<<<<<<<
 *                 dot_line += "."
 *             dot_line += "\n"
 */
    __pyx_t_6 = __pyx_v_len_mid_line;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "pycylon/data/table.pyx":1864
 *             dot_line = ""
 *             for i in range(len_mid_line):
 *                 dot_line += "."             # <<<<<<<<<<<<<<
 *             dot_line += "\n"
 *             printable_rows = rows[:row_limit // 2] + [dot_line] + rows[-row_limit // 2:]
 */
      __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_dot_line, __pyx_kp_u__22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_dot_line, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;
    }

    /* "pycylon/data/table.pyx":1865
 *             for i in range(len_mid_line):
 *                 dot_line += "."
 *             dot_line += "\n"             # <<<<<<<<<<<<<<
 *             printable_rows = rows[:row_limit // 2] + [dot_line] + rows[-row_limit // 2:]
 *             row_strs = ""
 */
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_dot_line, __pyx_kp_u__21); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_dot_line, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1866
 *                 dot_line += "."
 *             dot_line += "\n"
 *             printable_rows = rows[:row_limit // 2] + [dot_line] + rows[-row_limit // 2:]             # <<<<<<<<<<<<<<
 *             row_strs = ""
 *             len_row = 0
 */
    __pyx_t_1 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_row_limit, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_rows, 0, 0, NULL, &__pyx_t_1, NULL, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_dot_line);
    __Pyx_GIVEREF(__pyx_v_dot_line);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_dot_line);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Negative(__pyx_v_row_limit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_FloorDivideObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_rows, 0, 0, &__pyx_t_2, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_printable_rows, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1867
 *             dot_line += "\n"
 *             printable_rows = rows[:row_limit // 2] + [dot_line] + rows[-row_limit // 2:]
 *             row_strs = ""             # <<<<<<<<<<<<<<
 *             len_row = 0
 *             for row_id, row_str in enumerate(printable_rows):
 */
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_v_row_strs = __pyx_kp_u__7;

    /* "pycylon/data/table.pyx":1868
 *             printable_rows = rows[:row_limit // 2] + [dot_line] + rows[-row_limit // 2:]
 *             row_strs = ""
 *             len_row = 0             # <<<<<<<<<<<<<<
 *             for row_id, row_str in enumerate(printable_rows):
 *                 row_strs += row_str + "\n"
 */
    __pyx_v_len_row = 0;

    /* "pycylon/data/table.pyx":1869
 *             row_strs = ""
 *             len_row = 0
 *             for row_id, row_str in enumerate(printable_rows):             # <<<<<<<<<<<<<<
 *                 row_strs += row_str + "\n"
 *             return row_strs
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
    if (likely(PyList_CheckExact(__pyx_v_printable_rows)) || PyTuple_CheckExact(__pyx_v_printable_rows)) {
      __pyx_t_1 = __pyx_v_printable_rows; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_printable_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1869, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1869, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1869, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1869, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1869, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1869, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_row_str, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_row_id, __pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":1870
 *             len_row = 0
 *             for row_id, row_str in enumerate(printable_rows):
 *                 row_strs += row_str + "\n"             # <<<<<<<<<<<<<<
 *             return row_strs
 *         else:
 */
      __pyx_t_3 = PyNumber_Add(__pyx_v_row_str, __pyx_kp_u__21); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_row_strs, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_row_strs, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pycylon/data/table.pyx":1869
 *             row_strs = ""
 *             len_row = 0
 *             for row_id, row_str in enumerate(printable_rows):             # <<<<<<<<<<<<<<
 *                 row_strs += row_str + "\n"
 *             return row_strs
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1871
 *             for row_id, row_str in enumerate(printable_rows):
 *                 row_strs += row_str + "\n"
 *             return row_strs             # <<<<<<<<<<<<<<
 *         else:
 *             return str1
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_row_strs);
    __pyx_r = __pyx_v_row_strs;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":1858
 *         row_limit = row_limit if row_limit % 2 == 0 else row_limit + 1
 *         str1 = self.to_pandas().to_string()
 *         if self.row_count > row_limit:             # <<<<<<<<<<<<<<
 *             printable_rows = []
 *             rows = str1.split("\n")
 */
  }

  /* "pycylon/data/table.pyx":1873
 *             return row_strs
 *         else:
 *             return str1             # <<<<<<<<<<<<<<
 * 
 *     def drop(self, column_names: List[str], inplace=False):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_str1);
    __pyx_r = __pyx_v_str1;
    goto __pyx_L0;
  }

  /* "pycylon/data/table.pyx":1852
 *         return self.to_string()
 * 
 *     def to_string(self, row_limit: int = 10):             # <<<<<<<<<<<<<<
 *         # TODO: Need to improve this method with more features:
 *         #  https://github.com/cylondata/cylon/issues/219
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_str1);
  __Pyx_XDECREF(__pyx_v_printable_rows);
  __Pyx_XDECREF(__pyx_v_rows);
  __Pyx_XDECREF(__pyx_v_dot_line);
  __Pyx_XDECREF(__pyx_v_row_strs);
  __Pyx_XDECREF(__pyx_v_row_id);
  __Pyx_XDECREF(__pyx_v_row_str);
  __Pyx_XDECREF(__pyx_v_row_limit);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1875
 *             return str1
 * 
 *     def drop(self, column_names: List[str], inplace=False):             # <<<<<<<<<<<<<<
 *         '''
 *         drop a column or list of columns from a Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_139drop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_138drop[] = "Table.drop(self, column_names: List[str], inplace=False)\n\n        drop a column or list of columns from a Table\n        Args:\n            column_names: List[str]\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.drop(['col-1'])\n               col-2  col-3\n            0      5      9\n            1      6     10\n            2      7     11\n            3      8     12\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_139drop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_column_names = 0;
  PyObject *__pyx_v_inplace = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drop (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_names,&__pyx_n_s_inplace,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column_names)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inplace);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drop") < 0)) __PYX_ERR(0, 1875, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_column_names = values[0];
    __pyx_v_inplace = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drop", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1875, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.drop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_138drop(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_column_names, __pyx_v_inplace);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_138drop(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_names, PyObject *__pyx_v_inplace) {
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_artb = NULL;
  PyObject *__pyx_v_drop_tb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drop", 0);

  /* "pycylon/data/table.pyx":1900
 *             3      8     12
 *         '''
 *         index = self.index             # <<<<<<<<<<<<<<
 *         if inplace:
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_index = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1901
 *         '''
 *         index = self.index
 *         if inplace:             # <<<<<<<<<<<<<<
 * 
 *             artb = self.to_arrow().drop(column_names)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_inplace); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1901, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":1903
 *         if inplace:
 * 
 *             artb = self.to_arrow().drop(column_names)             # <<<<<<<<<<<<<<
 *             self.initialize(artb, self.context)
 *             self.set_index(index)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_drop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_column_names) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_column_names);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_artb = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1904
 * 
 *             artb = self.to_arrow().drop(column_names)
 *             self.initialize(artb, self.context)             # <<<<<<<<<<<<<<
 *             self.set_index(index)
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_artb, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_artb, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1904, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_artb);
      __Pyx_GIVEREF(__pyx_v_artb);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_artb);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1905
 *             artb = self.to_arrow().drop(column_names)
 *             self.initialize(artb, self.context)
 *             self.set_index(index)             # <<<<<<<<<<<<<<
 *         else:
 *             drop_tb = self.from_arrow(self.context, self.to_arrow().drop(column_names))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1901
 *         '''
 *         index = self.index
 *         if inplace:             # <<<<<<<<<<<<<<
 * 
 *             artb = self.to_arrow().drop(column_names)
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":1907
 *             self.set_index(index)
 *         else:
 *             drop_tb = self.from_arrow(self.context, self.to_arrow().drop(column_names))             # <<<<<<<<<<<<<<
 *             drop_tb.set_index(index)
 *             return drop_tb
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_drop); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_v_column_names) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_column_names);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_7, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_7, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_7 = 0;
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_drop_tb = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1908
 *         else:
 *             drop_tb = self.from_arrow(self.context, self.to_arrow().drop(column_names))
 *             drop_tb.set_index(index)             # <<<<<<<<<<<<<<
 *             return drop_tb
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_drop_tb, __pyx_n_s_set_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":1909
 *             drop_tb = self.from_arrow(self.context, self.to_arrow().drop(column_names))
 *             drop_tb.set_index(index)
 *             return drop_tb             # <<<<<<<<<<<<<<
 * 
 *     def fillna(self, fill_value):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_drop_tb);
    __pyx_r = __pyx_v_drop_tb;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":1875
 *             return str1
 * 
 *     def drop(self, column_names: List[str], inplace=False):             # <<<<<<<<<<<<<<
 *         '''
 *         drop a column or list of columns from a Table
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table.drop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_artb);
  __Pyx_XDECREF(__pyx_v_drop_tb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1911
 *             return drop_tb
 * 
 *     def fillna(self, fill_value):             # <<<<<<<<<<<<<<
 *         '''
 *         Fill not applicable values with a given value
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_141fillna(PyObject *__pyx_v_self, PyObject *__pyx_v_fill_value); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_140fillna[] = "Table.fillna(self, fill_value)\n\n        Fill not applicable values with a given value\n        Args:\n            fill_value: scalar\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.fillna(0)\n               col-1  col-2  col-3\n            0      1      5      9\n            1      0      6     10\n            2      3      0     11\n            3      4      8      0\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_141fillna(PyObject *__pyx_v_self, PyObject *__pyx_v_fill_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fillna (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_140fillna(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_fill_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_140fillna(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_fill_value) {
  PyObject *__pyx_v_filtered_arrays = NULL;
  PyObject *__pyx_v_col = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fillna", 0);

  /* "pycylon/data/table.pyx":1936
 *         '''
 *         # Note: Supports numeric types only
 *         filtered_arrays = []             # <<<<<<<<<<<<<<
 *         for col in self.to_arrow().combine_chunks().columns:
 *             for val in col.chunks:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_filtered_arrays = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1937
 *         # Note: Supports numeric types only
 *         filtered_arrays = []
 *         for col in self.to_arrow().combine_chunks().columns:             # <<<<<<<<<<<<<<
 *             for val in col.chunks:
 *                 filtered_arrays.append(val.fill_null(fill_value))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1937, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1937, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1937, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1937, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_col, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":1938
 *         filtered_arrays = []
 *         for col in self.to_arrow().combine_chunks().columns:
 *             for val in col.chunks:             # <<<<<<<<<<<<<<
 *                 filtered_arrays.append(val.fill_null(fill_value))
 *         return self.from_arrow(self.context,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_col, __pyx_n_s_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1938, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1938, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1938, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1938, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1938, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1938, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1938, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":1939
 *         for col in self.to_arrow().combine_chunks().columns:
 *             for val in col.chunks:
 *                 filtered_arrays.append(val.fill_null(fill_value))             # <<<<<<<<<<<<<<
 *         return self.from_arrow(self.context,
 *                                pa.Table.from_arrays(filtered_arrays, self.column_names))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_fill_null); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_9, __pyx_v_fill_value) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_fill_value);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_filtered_arrays, __pyx_t_3); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1939, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":1938
 *         filtered_arrays = []
 *         for col in self.to_arrow().combine_chunks().columns:
 *             for val in col.chunks:             # <<<<<<<<<<<<<<
 *                 filtered_arrays.append(val.fill_null(fill_value))
 *         return self.from_arrow(self.context,
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":1937
 *         # Note: Supports numeric types only
 *         filtered_arrays = []
 *         for col in self.to_arrow().combine_chunks().columns:             # <<<<<<<<<<<<<<
 *             for val in col.chunks:
 *                 filtered_arrays.append(val.fill_null(fill_value))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1940
 *             for val in col.chunks:
 *                 filtered_arrays.append(val.fill_null(fill_value))
 *         return self.from_arrow(self.context,             # <<<<<<<<<<<<<<
 *                                pa.Table.from_arrays(filtered_arrays, self.column_names))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pycylon/data/table.pyx":1941
 *                 filtered_arrays.append(val.fill_null(fill_value))
 *         return self.from_arrow(self.context,
 *                                pa.Table.from_arrays(filtered_arrays, self.column_names))             # <<<<<<<<<<<<<<
 * 
 *     def where(self, condition not None, other=None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_pa); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_Table); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_13 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_filtered_arrays, __pyx_t_11};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1941, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_filtered_arrays, __pyx_t_11};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1941, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1941, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_INCREF(__pyx_v_filtered_arrays);
    __Pyx_GIVEREF(__pyx_v_filtered_arrays);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_v_filtered_arrays);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1941, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_13 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1940, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1940, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1911
 *             return drop_tb
 * 
 *     def fillna(self, fill_value):             # <<<<<<<<<<<<<<
 *         '''
 *         Fill not applicable values with a given value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pycylon.data.table.Table.fillna", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filtered_arrays);
  __Pyx_XDECREF(__pyx_v_col);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1943
 *                                pa.Table.from_arrays(filtered_arrays, self.column_names))
 * 
 *     def where(self, condition not None, other=None):             # <<<<<<<<<<<<<<
 *         '''
 *         Experimental version of Where operation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_143where(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_142where[] = "Table.where(self, condition, other=None)\n\n        Experimental version of Where operation.\n        Replace values where condition is False\n        Args:\n            condition: bool Table\n            other: Scalar\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.where(tb > 2)\n                col-1  col-2  col-3\n            0    NaN      5      9\n            1    NaN      6     10\n            2    3.0      7     11\n            3    4.0      8     12\n\n        >>> tb.where(tb > 2, 10)\n               col-1  col-2  col-3\n            0     10      5      9\n            1     10      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_143where(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_condition = 0;
  PyObject *__pyx_v_other = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("where (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_condition,&__pyx_n_s_other,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_condition)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "where") < 0)) __PYX_ERR(0, 1943, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_condition = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("where", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1943, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.where", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(((PyObject *)__pyx_v_condition) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "condition"); __PYX_ERR(0, 1943, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_142where(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_condition, __pyx_v_other);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_142where(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_condition, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_filtered_all_data = NULL;
  PyObject *__pyx_v_list_of_mask_values = NULL;
  PyObject *__pyx_v_table_dict = NULL;
  PyObject *__pyx_v_list_of_table_values = NULL;
  PyObject *__pyx_v_mask_col_data = NULL;
  PyObject *__pyx_v_table_col_data = NULL;
  PyObject *__pyx_v_filtered_data = NULL;
  PyObject *__pyx_v_mask_value = NULL;
  PyObject *__pyx_v_table_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("where", 0);

  /* "pycylon/data/table.pyx":1977
 *         '''
 *         # TODO: need to improve and overlap with filter functions
 *         filtered_all_data = []             # <<<<<<<<<<<<<<
 *         list_of_mask_values = list(condition.to_pydict().values())
 *         table_dict = self.to_pydict()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_filtered_all_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1978
 *         # TODO: need to improve and overlap with filter functions
 *         filtered_all_data = []
 *         list_of_mask_values = list(condition.to_pydict().values())             # <<<<<<<<<<<<<<
 *         table_dict = self.to_pydict()
 *         list_of_table_values = list(table_dict.values())
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_condition, __pyx_n_s_to_pydict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_list_of_mask_values = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":1979
 *         filtered_all_data = []
 *         list_of_mask_values = list(condition.to_pydict().values())
 *         table_dict = self.to_pydict()             # <<<<<<<<<<<<<<
 *         list_of_table_values = list(table_dict.values())
 *         for mask_col_data, table_col_data in zip(list_of_mask_values, list_of_table_values):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_pydict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_table_dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":1980
 *         list_of_mask_values = list(condition.to_pydict().values())
 *         table_dict = self.to_pydict()
 *         list_of_table_values = list(table_dict.values())             # <<<<<<<<<<<<<<
 *         for mask_col_data, table_col_data in zip(list_of_mask_values, list_of_table_values):
 *             filtered_data = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_table_dict, __pyx_n_s_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_list_of_table_values = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1981
 *         table_dict = self.to_pydict()
 *         list_of_table_values = list(table_dict.values())
 *         for mask_col_data, table_col_data in zip(list_of_mask_values, list_of_table_values):             # <<<<<<<<<<<<<<
 *             filtered_data = []
 *             for mask_value, table_value in zip(mask_col_data, table_col_data):
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_list_of_mask_values);
  __Pyx_GIVEREF(__pyx_v_list_of_mask_values);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_list_of_mask_values);
  __Pyx_INCREF(__pyx_v_list_of_table_values);
  __Pyx_GIVEREF(__pyx_v_list_of_table_values);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_list_of_table_values);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1981, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1981, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1981, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1981, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1981, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1981, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1981, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1981, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1981, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1981, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 1981, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1981, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_mask_col_data, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_table_col_data, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":1982
 *         list_of_table_values = list(table_dict.values())
 *         for mask_col_data, table_col_data in zip(list_of_mask_values, list_of_table_values):
 *             filtered_data = []             # <<<<<<<<<<<<<<
 *             for mask_value, table_value in zip(mask_col_data, table_col_data):
 *                 if mask_value:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_filtered_data, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":1983
 *         for mask_col_data, table_col_data in zip(list_of_mask_values, list_of_table_values):
 *             filtered_data = []
 *             for mask_value, table_value in zip(mask_col_data, table_col_data):             # <<<<<<<<<<<<<<
 *                 if mask_value:
 *                     filtered_data.append(table_value)
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_mask_col_data);
    __Pyx_GIVEREF(__pyx_v_mask_col_data);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_mask_col_data);
    __Pyx_INCREF(__pyx_v_table_col_data);
    __Pyx_GIVEREF(__pyx_v_table_col_data);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_table_col_data);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1983, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1983, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1983, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1983, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1983, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1983, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1983, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1983, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_11); if (unlikely(!__pyx_t_2)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_11), 2) < 0) __PYX_ERR(0, 1983, __pyx_L1_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1983, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_mask_value, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_table_value, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "pycylon/data/table.pyx":1984
 *             filtered_data = []
 *             for mask_value, table_value in zip(mask_col_data, table_col_data):
 *                 if mask_value:             # <<<<<<<<<<<<<<
 *                     filtered_data.append(table_value)
 *                 else:
 */
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_mask_value); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1984, __pyx_L1_error)
      if (__pyx_t_12) {

        /* "pycylon/data/table.pyx":1985
 *             for mask_value, table_value in zip(mask_col_data, table_col_data):
 *                 if mask_value:
 *                     filtered_data.append(table_value)             # <<<<<<<<<<<<<<
 *                 else:
 *                     if other:
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_filtered_data, __pyx_v_table_value); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1985, __pyx_L1_error)

        /* "pycylon/data/table.pyx":1984
 *             filtered_data = []
 *             for mask_value, table_value in zip(mask_col_data, table_col_data):
 *                 if mask_value:             # <<<<<<<<<<<<<<
 *                     filtered_data.append(table_value)
 *                 else:
 */
        goto __pyx_L11;
      }

      /* "pycylon/data/table.pyx":1987
 *                     filtered_data.append(table_value)
 *                 else:
 *                     if other:             # <<<<<<<<<<<<<<
 *                         filtered_data.append(other)
 *                     else:
 */
      /*else*/ {
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_other); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1987, __pyx_L1_error)
        if (__pyx_t_12) {

          /* "pycylon/data/table.pyx":1988
 *                 else:
 *                     if other:
 *                         filtered_data.append(other)             # <<<<<<<<<<<<<<
 *                     else:
 *                         filtered_data.append(math.nan)
 */
          __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_filtered_data, __pyx_v_other); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1988, __pyx_L1_error)

          /* "pycylon/data/table.pyx":1987
 *                     filtered_data.append(table_value)
 *                 else:
 *                     if other:             # <<<<<<<<<<<<<<
 *                         filtered_data.append(other)
 *                     else:
 */
          goto __pyx_L12;
        }

        /* "pycylon/data/table.pyx":1990
 *                         filtered_data.append(other)
 *                     else:
 *                         filtered_data.append(math.nan)             # <<<<<<<<<<<<<<
 *             filtered_all_data.append(filtered_data)
 *         return Table.from_list(self.context, self.column_names, filtered_all_data)
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_math); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1990, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_nan); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1990, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_filtered_data, __pyx_t_7); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_L12:;
      }
      __pyx_L11:;

      /* "pycylon/data/table.pyx":1983
 *         for mask_col_data, table_col_data in zip(list_of_mask_values, list_of_table_values):
 *             filtered_data = []
 *             for mask_value, table_value in zip(mask_col_data, table_col_data):             # <<<<<<<<<<<<<<
 *                 if mask_value:
 *                     filtered_data.append(table_value)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":1991
 *                     else:
 *                         filtered_data.append(math.nan)
 *             filtered_all_data.append(filtered_data)             # <<<<<<<<<<<<<<
 *         return Table.from_list(self.context, self.column_names, filtered_all_data)
 * 
 */
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_filtered_all_data, __pyx_v_filtered_data); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1991, __pyx_L1_error)

    /* "pycylon/data/table.pyx":1981
 *         table_dict = self.to_pydict()
 *         list_of_table_values = list(table_dict.values())
 *         for mask_col_data, table_col_data in zip(list_of_mask_values, list_of_table_values):             # <<<<<<<<<<<<<<
 *             filtered_data = []
 *             for mask_value, table_value in zip(mask_col_data, table_col_data):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":1992
 *                         filtered_data.append(math.nan)
 *             filtered_all_data.append(filtered_data)
 *         return Table.from_list(self.context, self.column_names, filtered_all_data)             # <<<<<<<<<<<<<<
 * 
 *     def isnull(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  __pyx_t_14 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_14 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_7, __pyx_t_4, __pyx_v_filtered_all_data};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_7, __pyx_t_4, __pyx_v_filtered_all_data};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(3+__pyx_t_14); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_14, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_14, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_filtered_all_data);
    __Pyx_GIVEREF(__pyx_v_filtered_all_data);
    PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_14, __pyx_v_filtered_all_data);
    __pyx_t_7 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1943
 *                                pa.Table.from_arrays(filtered_arrays, self.column_names))
 * 
 *     def where(self, condition not None, other=None):             # <<<<<<<<<<<<<<
 *         '''
 *         Experimental version of Where operation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pycylon.data.table.Table.where", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filtered_all_data);
  __Pyx_XDECREF(__pyx_v_list_of_mask_values);
  __Pyx_XDECREF(__pyx_v_table_dict);
  __Pyx_XDECREF(__pyx_v_list_of_table_values);
  __Pyx_XDECREF(__pyx_v_mask_col_data);
  __Pyx_XDECREF(__pyx_v_table_col_data);
  __Pyx_XDECREF(__pyx_v_filtered_data);
  __Pyx_XDECREF(__pyx_v_mask_value);
  __Pyx_XDECREF(__pyx_v_table_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":1994
 *         return Table.from_list(self.context, self.column_names, filtered_all_data)
 * 
 *     def isnull(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Checks for null elements and returns a bool Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_145isnull(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_144isnull[] = "Table.isnull(self)\n\n        Checks for null elements and returns a bool Table\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.isnull()\n                col-1  col-2  col-3\n            0  False  False  False\n            1   True  False  False\n            2  False   True  False\n            3  False  False   True\n\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_145isnull(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isnull (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_144isnull(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_144isnull(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isnull", 0);

  /* "pycylon/data/table.pyx":2017
 * 
 *         '''
 *         return compute.is_null(self)             # <<<<<<<<<<<<<<
 * 
 *     def isna(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_is_null); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":1994
 *         return Table.from_list(self.context, self.column_names, filtered_all_data)
 * 
 *     def isnull(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Checks for null elements and returns a bool Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.isnull", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2019
 *         return compute.is_null(self)
 * 
 *     def isna(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Check for not applicable values and returns a bool Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_147isna(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_146isna[] = "Table.isna(self)\n\n        Check for not applicable values and returns a bool Table\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.isna()\n                col-1  col-2  col-3\n            0  False  False  False\n            1   True  False  False\n            2  False   True  False\n            3  False  False   True\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_147isna(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isna (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_146isna(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_146isna(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isna", 0);

  /* "pycylon/data/table.pyx":2040
 *             3  False  False   True
 *         '''
 *         return compute.is_null(self)             # <<<<<<<<<<<<<<
 * 
 *     def notnull(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_is_null); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2019
 *         return compute.is_null(self)
 * 
 *     def isna(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Check for not applicable values and returns a bool Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.isna", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2042
 *         return compute.is_null(self)
 * 
 *     def notnull(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Check the not null values and returns a bool Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_149notnull(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_148notnull[] = "Table.notnull(self)\n\n        Check the not null values and returns a bool Table\n        Returns: PyCylon Table\n\n        Examples\n        --------\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.notnull()\n               col-1  col-2  col-3\n            0   True   True   True\n            1  False   True   True\n            2   True  False   True\n            3   True   True  False\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_149notnull(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("notnull (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_148notnull(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_148notnull(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("notnull", 0);

  /* "pycylon/data/table.pyx":2064
 *         '''
 * 
 *         return ~compute.is_null(self)             # <<<<<<<<<<<<<<
 * 
 *     def notna(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_is_null); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Invert(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2042
 *         return compute.is_null(self)
 * 
 *     def notnull(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Check the not null values and returns a bool Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.notnull", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2066
 *         return ~compute.is_null(self)
 * 
 *     def notna(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Checks for not NA values and returns a bool Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_151notna(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_150notna[] = "Table.notna(self)\n\n        Checks for not NA values and returns a bool Table\n        Returns: PyCylon Table\n\n        >>> tb\n                col-1  col-2  col-3\n            0    1.0    5.0    9.0\n            1    NaN    6.0   10.0\n            2    3.0    NaN   11.0\n            3    4.0    8.0    NaN\n\n        >>> tb.notna()\n               col-1  col-2  col-3\n            0   True   True   True\n            1  False   True   True\n            2   True  False   True\n            3   True   True  False\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_151notna(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("notna (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_150notna(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_150notna(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("notna", 0);

  /* "pycylon/data/table.pyx":2086
 *         '''
 * 
 *         return ~compute.is_null(self)             # <<<<<<<<<<<<<<
 * 
 *     def rename(self, column_names):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_is_null); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Invert(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2066
 *         return ~compute.is_null(self)
 * 
 *     def notna(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Checks for not NA values and returns a bool Table
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.notna", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2088
 *         return ~compute.is_null(self)
 * 
 *     def rename(self, column_names):             # <<<<<<<<<<<<<<
 *         '''
 *         Rename a Table with a column name or column names
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_153rename(PyObject *__pyx_v_self, PyObject *__pyx_v_column_names); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_152rename[] = "Table.rename(self, column_names)\n\n        Rename a Table with a column name or column names\n        Args:\n            column_names: dictionary or full list of new column names\n\n        Returns: None\n\n        Examples\n        --------\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.rename({'col-1': 'col_1'})\n               col_1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.rename(['c1', 'c2', 'c3'])\n               c1  c2  c3\n            0   1   5   9\n            1   2   6  10\n            2   3   7  11\n            3   4   8  12\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_153rename(PyObject *__pyx_v_self, PyObject *__pyx_v_column_names) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rename (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_152rename(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_column_names));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_152rename(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_names) {
  PyObject *__pyx_v_index_values = NULL;
  PyObject *__pyx_v_table_col_names = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rename", 0);

  /* "pycylon/data/table.pyx":2119
 *             3   4   8  12
 *         '''
 *         index_values = self.index             # <<<<<<<<<<<<<<
 *         if isinstance(column_names, dict):
 *             table_col_names = self.column_names
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_index_values = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2120
 *         '''
 *         index_values = self.index
 *         if isinstance(column_names, dict):             # <<<<<<<<<<<<<<
 *             table_col_names = self.column_names
 *             for key in column_names.keys():
 */
  __pyx_t_2 = PyDict_Check(__pyx_v_column_names); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pycylon/data/table.pyx":2121
 *         index_values = self.index
 *         if isinstance(column_names, dict):
 *             table_col_names = self.column_names             # <<<<<<<<<<<<<<
 *             for key in column_names.keys():
 *                 if key not in table_col_names:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_table_col_names = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2122
 *         if isinstance(column_names, dict):
 *             table_col_names = self.column_names
 *             for key in column_names.keys():             # <<<<<<<<<<<<<<
 *                 if key not in table_col_names:
 *                     raise ValueError("Column name doesn't exist in the table")
 */
    __pyx_t_4 = 0;
    if (unlikely(__pyx_v_column_names == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
      __PYX_ERR(0, 2122, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_column_names, 0, __pyx_n_s_keys, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, NULL, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 2122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "pycylon/data/table.pyx":2123
 *             table_col_names = self.column_names
 *             for key in column_names.keys():
 *                 if key not in table_col_names:             # <<<<<<<<<<<<<<
 *                     raise ValueError("Column name doesn't exist in the table")
 *                 else:
 */
      __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_table_col_names, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2123, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (unlikely(__pyx_t_2)) {

        /* "pycylon/data/table.pyx":2124
 *             for key in column_names.keys():
 *                 if key not in table_col_names:
 *                     raise ValueError("Column name doesn't exist in the table")             # <<<<<<<<<<<<<<
 *                 else:
 *                     table_col_names[table_col_names.index(key)] = column_names[key]
 */
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 2124, __pyx_L1_error)

        /* "pycylon/data/table.pyx":2123
 *             table_col_names = self.column_names
 *             for key in column_names.keys():
 *                 if key not in table_col_names:             # <<<<<<<<<<<<<<
 *                     raise ValueError("Column name doesn't exist in the table")
 *                 else:
 */
      }

      /* "pycylon/data/table.pyx":2126
 *                     raise ValueError("Column name doesn't exist in the table")
 *                 else:
 *                     table_col_names[table_col_names.index(key)] = column_names[key]             # <<<<<<<<<<<<<<
 *             self.initialize(self.to_arrow().rename_columns(table_col_names), self.context)
 *         elif isinstance(column_names, list):
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_column_names, __pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_table_col_names, __pyx_n_s_index_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_table_col_names, __pyx_t_9, __pyx_t_7) < 0)) __PYX_ERR(0, 2126, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2127
 *                 else:
 *                     table_col_names[table_col_names.index(key)] = column_names[key]
 *             self.initialize(self.to_arrow().rename_columns(table_col_names), self.context)             # <<<<<<<<<<<<<<
 *         elif isinstance(column_names, list):
 *             if len(column_names) == self.column_count:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_rename_columns); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_9 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, __pyx_v_table_col_names) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_table_col_names);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_9, __pyx_t_11};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_9, __pyx_t_11};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    {
      __pyx_t_12 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_6, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_6, __pyx_t_11);
      __pyx_t_9 = 0;
      __pyx_t_11 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2120
 *         '''
 *         index_values = self.index
 *         if isinstance(column_names, dict):             # <<<<<<<<<<<<<<
 *             table_col_names = self.column_names
 *             for key in column_names.keys():
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":2128
 *                     table_col_names[table_col_names.index(key)] = column_names[key]
 *             self.initialize(self.to_arrow().rename_columns(table_col_names), self.context)
 *         elif isinstance(column_names, list):             # <<<<<<<<<<<<<<
 *             if len(column_names) == self.column_count:
 *                 self.initialize(self.to_arrow().rename_columns(column_names), self.context)
 */
  __pyx_t_2 = PyList_Check(__pyx_v_column_names); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "pycylon/data/table.pyx":2129
 *             self.initialize(self.to_arrow().rename_columns(table_col_names), self.context)
 *         elif isinstance(column_names, list):
 *             if len(column_names) == self.column_count:             # <<<<<<<<<<<<<<
 *                 self.initialize(self.to_arrow().rename_columns(column_names), self.context)
 *         else:
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_column_names); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2129, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = PyObject_RichCompare(__pyx_t_1, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (__pyx_t_3) {

      /* "pycylon/data/table.pyx":2130
 *         elif isinstance(column_names, list):
 *             if len(column_names) == self.column_count:
 *                 self.initialize(self.to_arrow().rename_columns(column_names), self.context)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Input Column names must be a dictionary or list")
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_11 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_rename_columns); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_11, __pyx_v_column_names) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_column_names);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_11 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_1, __pyx_t_9};
        __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2130, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_1, __pyx_t_9};
        __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2130, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2130, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_6, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_6, __pyx_t_9);
        __pyx_t_1 = 0;
        __pyx_t_9 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2130, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "pycylon/data/table.pyx":2129
 *             self.initialize(self.to_arrow().rename_columns(table_col_names), self.context)
 *         elif isinstance(column_names, list):
 *             if len(column_names) == self.column_count:             # <<<<<<<<<<<<<<
 *                 self.initialize(self.to_arrow().rename_columns(column_names), self.context)
 *         else:
 */
    }

    /* "pycylon/data/table.pyx":2128
 *                     table_col_names[table_col_names.index(key)] = column_names[key]
 *             self.initialize(self.to_arrow().rename_columns(table_col_names), self.context)
 *         elif isinstance(column_names, list):             # <<<<<<<<<<<<<<
 *             if len(column_names) == self.column_count:
 *                 self.initialize(self.to_arrow().rename_columns(column_names), self.context)
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":2132
 *                 self.initialize(self.to_arrow().rename_columns(column_names), self.context)
 *         else:
 *             raise ValueError("Input Column names must be a dictionary or list")             # <<<<<<<<<<<<<<
 *         self.set_index(index_values)
 * 
 */
  /*else*/ {
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_Raise(__pyx_t_12, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __PYX_ERR(0, 2132, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":2133
 *         else:
 *             raise ValueError("Input Column names must be a dictionary or list")
 *         self.set_index(index_values)             # <<<<<<<<<<<<<<
 * 
 *     def add_prefix(self, prefix: str) -> Table:
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_12 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_10, __pyx_v_index_values) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_index_values);
  __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "pycylon/data/table.pyx":2088
 *         return ~compute.is_null(self)
 * 
 *     def rename(self, column_names):             # <<<<<<<<<<<<<<
 *         '''
 *         Rename a Table with a column name or column names
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pycylon.data.table.Table.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index_values);
  __Pyx_XDECREF(__pyx_v_table_col_names);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2135
 *         self.set_index(index_values)
 * 
 *     def add_prefix(self, prefix: str) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Adding a prefix to column names
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_155add_prefix(PyObject *__pyx_v_self, PyObject *__pyx_v_prefix); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_154add_prefix[] = "Table.add_prefix(self, unicode prefix: str) -> Table\n\n        Adding a prefix to column names\n        Args:\n            prefix: str\n\n        Returns: PyCylon Table with prefix updated\n\n        Examples\n        --------\n\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.add_prefix('old_')\n               old_c1  old_c2  old_c3\n            0       1       5       9\n            1       2       6      10\n            2       3       7      11\n            3       4       8      12\n\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_155add_prefix(PyObject *__pyx_v_self, PyObject *__pyx_v_prefix) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_prefix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), (&PyUnicode_Type), 1, "prefix", 1))) __PYX_ERR(0, 2135, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_154add_prefix(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject*)__pyx_v_prefix));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_154add_prefix(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_v_new_column_names = NULL;
  PyObject *__pyx_7genexpr__pyx_v_col = NULL;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_prefix", 0);

  /* "pycylon/data/table.pyx":2161
 * 
 *         '''
 *         new_column_names = [prefix + col for col in self.column_names]             # <<<<<<<<<<<<<<
 *         return Table.from_arrow(self.context, self.to_arrow().rename_columns(new_column_names))
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2161, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2161, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2161, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2161, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2161, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2161, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2161, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2161, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2161, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_col, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_v_prefix, __pyx_7genexpr__pyx_v_col); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2161, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 2161, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_col); __pyx_7genexpr__pyx_v_col = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_col); __pyx_7genexpr__pyx_v_col = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_v_new_column_names = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2162
 *         '''
 *         new_column_names = [prefix + col for col in self.column_names]
 *         return Table.from_arrow(self.context, self.to_arrow().rename_columns(new_column_names))             # <<<<<<<<<<<<<<
 * 
 *     def add_suffix(self, suffix: str) -> Table:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_rename_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_v_new_column_names) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_new_column_names);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2162, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2162, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 2162, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2135
 *         self.set_index(index_values)
 * 
 *     def add_prefix(self, prefix: str) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Adding a prefix to column names
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table.add_prefix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_column_names);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_col);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2164
 *         return Table.from_arrow(self.context, self.to_arrow().rename_columns(new_column_names))
 * 
 *     def add_suffix(self, suffix: str) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Adding a prefix to column names
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_157add_suffix(PyObject *__pyx_v_self, PyObject *__pyx_v_suffix); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_156add_suffix[] = "Table.add_suffix(self, unicode suffix: str) -> Table\n\n        Adding a prefix to column names\n        Args:\n            prefix: str\n\n        Returns: PyCylon Table with prefix updated\n\n        Examples\n        --------\n\n        >>> tb\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n        >>> tb.add_suffix('_old')\n               c1_old  c2_old  c3_old\n            0       1       5       9\n            1       2       6      10\n            2       3       7      11\n            3       4       8      12\n\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_157add_suffix(PyObject *__pyx_v_self, PyObject *__pyx_v_suffix) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_suffix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_suffix), (&PyUnicode_Type), 1, "suffix", 1))) __PYX_ERR(0, 2164, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_156add_suffix(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject*)__pyx_v_suffix));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_156add_suffix(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_suffix) {
  PyObject *__pyx_v_new_column_names = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_col = NULL;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_suffix", 0);

  /* "pycylon/data/table.pyx":2190
 * 
 *         '''
 *         new_column_names = [col + suffix for col in self.column_names]             # <<<<<<<<<<<<<<
 *         return Table.from_arrow(self.context, self.to_arrow().rename_columns(new_column_names))
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2190, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2190, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2190, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2190, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2190, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2190, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2190, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2190, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2190, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_col, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_8genexpr1__pyx_v_col, __pyx_v_suffix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2190, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 2190, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_col); __pyx_8genexpr1__pyx_v_col = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_col); __pyx_8genexpr1__pyx_v_col = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_v_new_column_names = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2191
 *         '''
 *         new_column_names = [col + suffix for col in self.column_names]
 *         return Table.from_arrow(self.context, self.to_arrow().rename_columns(new_column_names))             # <<<<<<<<<<<<<<
 * 
 *     def _is_index_and_range_validity(self, index_range):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_rename_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_v_new_column_names) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_new_column_names);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2191, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2191, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 2191, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2164
 *         return Table.from_arrow(self.context, self.to_arrow().rename_columns(new_column_names))
 * 
 *     def add_suffix(self, suffix: str) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Adding a prefix to column names
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.Table.add_suffix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_column_names);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_col);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2193
 *         return Table.from_arrow(self.context, self.to_arrow().rename_columns(new_column_names))
 * 
 *     def _is_index_and_range_validity(self, index_range):             # <<<<<<<<<<<<<<
 *         if isinstance(index_range, range):
 *             return range_calculator(index_range) == self.row_count
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_159_is_index_and_range_validity(PyObject *__pyx_v_self, PyObject *__pyx_v_index_range); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_158_is_index_and_range_validity[] = "Table._is_index_and_range_validity(self, index_range)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_159_is_index_and_range_validity(PyObject *__pyx_v_self, PyObject *__pyx_v_index_range) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_index_and_range_validity (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_158_is_index_and_range_validity(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_index_range));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_158_is_index_and_range_validity(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_index_and_range_validity", 0);

  /* "pycylon/data/table.pyx":2194
 * 
 *     def _is_index_and_range_validity(self, index_range):
 *         if isinstance(index_range, range):             # <<<<<<<<<<<<<<
 *             return range_calculator(index_range) == self.row_count
 *         else:
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_index_range, __pyx_builtin_range); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 2194, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pycylon/data/table.pyx":2195
 *     def _is_index_and_range_validity(self, index_range):
 *         if isinstance(index_range, range):
 *             return range_calculator(index_range) == self.row_count             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid object, expected range")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_range_calculator); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_index_range) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index_range);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_row_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2194
 * 
 *     def _is_index_and_range_validity(self, index_range):
 *         if isinstance(index_range, range):             # <<<<<<<<<<<<<<
 *             return range_calculator(index_range) == self.row_count
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":2197
 *             return range_calculator(index_range) == self.row_count
 *         else:
 *             raise ValueError("Invalid object, expected range")             # <<<<<<<<<<<<<<
 * 
 *     def _is_index_list_and_valid(self, index):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 2197, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":2193
 *         return Table.from_arrow(self.context, self.to_arrow().rename_columns(new_column_names))
 * 
 *     def _is_index_and_range_validity(self, index_range):             # <<<<<<<<<<<<<<
 *         if isinstance(index_range, range):
 *             return range_calculator(index_range) == self.row_count
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table._is_index_and_range_validity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2199
 *             raise ValueError("Invalid object, expected range")
 * 
 *     def _is_index_list_and_valid(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, List):
 *             return len(index) == self.row_count
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_161_is_index_list_and_valid(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_160_is_index_list_and_valid[] = "Table._is_index_list_and_valid(self, index)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_161_is_index_list_and_valid(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_index_list_and_valid (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_160_is_index_list_and_valid(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_160_is_index_list_and_valid(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_index_list_and_valid", 0);

  /* "pycylon/data/table.pyx":2200
 * 
 *     def _is_index_list_and_valid(self, index):
 *         if isinstance(index, List):             # <<<<<<<<<<<<<<
 *             return len(index) == self.row_count
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_index, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "pycylon/data/table.pyx":2201
 *     def _is_index_list_and_valid(self, index):
 *         if isinstance(index, List):
 *             return len(index) == self.row_count             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid object, expected List")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyObject_Length(__pyx_v_index); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2201, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_row_count); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2200
 * 
 *     def _is_index_list_and_valid(self, index):
 *         if isinstance(index, List):             # <<<<<<<<<<<<<<
 *             return len(index) == self.row_count
 *         else:
 */
  }

  /* "pycylon/data/table.pyx":2203
 *             return len(index) == self.row_count
 *         else:
 *             raise ValueError("Invalid object, expected List")             # <<<<<<<<<<<<<<
 * 
 *     def _is_index_list_of_columns(self, index):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2203, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":2199
 *             raise ValueError("Invalid object, expected range")
 * 
 *     def _is_index_list_and_valid(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, List):
 *             return len(index) == self.row_count
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.Table._is_index_list_and_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2205
 *             raise ValueError("Invalid object, expected List")
 * 
 *     def _is_index_list_of_columns(self, index):             # <<<<<<<<<<<<<<
 *         for index_item in index:
 *             if index_item not in self.column_names:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_163_is_index_list_of_columns(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_162_is_index_list_of_columns[] = "Table._is_index_list_of_columns(self, index)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_163_is_index_list_of_columns(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_index_list_of_columns (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_162_is_index_list_of_columns(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_162_is_index_list_of_columns(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_index_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_index_list_of_columns", 0);

  /* "pycylon/data/table.pyx":2206
 * 
 *     def _is_index_list_of_columns(self, index):
 *         for index_item in index:             # <<<<<<<<<<<<<<
 *             if index_item not in self.column_names:
 *                 return False
 */
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_1 = __pyx_v_index; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2206, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2206, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2206, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2206, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_index_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pycylon/data/table.pyx":2207
 *     def _is_index_list_of_columns(self, index):
 *         for index_item in index:
 *             if index_item not in self.column_names:             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_index_item, __pyx_t_4, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pycylon/data/table.pyx":2208
 *         for index_item in index:
 *             if index_item not in self.column_names:
 *                 return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":2207
 *     def _is_index_list_of_columns(self, index):
 *         for index_item in index:
 *             if index_item not in self.column_names:             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    }

    /* "pycylon/data/table.pyx":2206
 * 
 *     def _is_index_list_of_columns(self, index):
 *         for index_item in index:             # <<<<<<<<<<<<<<
 *             if index_item not in self.column_names:
 *                 return False
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2209
 *             if index_item not in self.column_names:
 *                 return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def _get_index_list_from_columns(self, index):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2205
 *             raise ValueError("Invalid object, expected List")
 * 
 *     def _is_index_list_of_columns(self, index):             # <<<<<<<<<<<<<<
 *         for index_item in index:
 *             if index_item not in self.column_names:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table._is_index_list_of_columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2211
 *         return True
 * 
 *     def _get_index_list_from_columns(self, index):             # <<<<<<<<<<<<<<
 *         # multi-column indexing
 *         index_columns = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_165_get_index_list_from_columns(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_164_get_index_list_from_columns[] = "Table._get_index_list_from_columns(self, index)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_165_get_index_list_from_columns(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_index_list_from_columns (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_164_get_index_list_from_columns(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_164_get_index_list_from_columns(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_index_columns = NULL;
  PyObject *__pyx_v_ar_tb = NULL;
  PyObject *__pyx_v_index_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_index_list_from_columns", 0);

  /* "pycylon/data/table.pyx":2213
 *     def _get_index_list_from_columns(self, index):
 *         # multi-column indexing
 *         index_columns = []             # <<<<<<<<<<<<<<
 *         ar_tb = self.to_arrow().combine_chunks()
 *         if isinstance(index, List):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_index_columns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2214
 *         # multi-column indexing
 *         index_columns = []
 *         ar_tb = self.to_arrow().combine_chunks()             # <<<<<<<<<<<<<<
 *         if isinstance(index, List):
 *             for index_item in index:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ar_tb = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2215
 *         index_columns = []
 *         ar_tb = self.to_arrow().combine_chunks()
 *         if isinstance(index, List):             # <<<<<<<<<<<<<<
 *             for index_item in index:
 *                 index_columns.append(ar_tb.column(index_item))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_index, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 2215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "pycylon/data/table.pyx":2216
 *         ar_tb = self.to_arrow().combine_chunks()
 *         if isinstance(index, List):
 *             for index_item in index:             # <<<<<<<<<<<<<<
 *                 index_columns.append(ar_tb.column(index_item))
 *             return index_columns
 */
    if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
      __pyx_t_1 = __pyx_v_index; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2216, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2216, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2216, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2216, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_index_item, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":2217
 *         if isinstance(index, List):
 *             for index_item in index:
 *                 index_columns.append(ar_tb.column(index_item))             # <<<<<<<<<<<<<<
 *             return index_columns
 *         elif isinstance(index, str):
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ar_tb, __pyx_n_s_column); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v_index_item) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_index_item);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_index_columns, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 2217, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":2216
 *         ar_tb = self.to_arrow().combine_chunks()
 *         if isinstance(index, List):
 *             for index_item in index:             # <<<<<<<<<<<<<<
 *                 index_columns.append(ar_tb.column(index_item))
 *             return index_columns
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2218
 *             for index_item in index:
 *                 index_columns.append(ar_tb.column(index_item))
 *             return index_columns             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             index_columns.append(ar_tb.column(index))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_index_columns);
    __pyx_r = __pyx_v_index_columns;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2215
 *         index_columns = []
 *         ar_tb = self.to_arrow().combine_chunks()
 *         if isinstance(index, List):             # <<<<<<<<<<<<<<
 *             for index_item in index:
 *                 index_columns.append(ar_tb.column(index_item))
 */
  }

  /* "pycylon/data/table.pyx":2219
 *                 index_columns.append(ar_tb.column(index_item))
 *             return index_columns
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             index_columns.append(ar_tb.column(index))
 *             return index_columns
 */
  __pyx_t_6 = PyUnicode_Check(__pyx_v_index); 
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "pycylon/data/table.pyx":2220
 *             return index_columns
 *         elif isinstance(index, str):
 *             index_columns.append(ar_tb.column(index))             # <<<<<<<<<<<<<<
 *             return index_columns
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ar_tb, __pyx_n_s_column); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_index);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_index_columns, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 2220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2221
 *         elif isinstance(index, str):
 *             index_columns.append(ar_tb.column(index))
 *             return index_columns             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented("Not Supported index pattern")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_index_columns);
    __pyx_r = __pyx_v_index_columns;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2219
 *                 index_columns.append(ar_tb.column(index_item))
 *             return index_columns
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             index_columns.append(ar_tb.column(index))
 *             return index_columns
 */
  }

  /* "pycylon/data/table.pyx":2223
 *             return index_columns
 *         else:
 *             return NotImplemented("Not Supported index pattern")             # <<<<<<<<<<<<<<
 * 
 *     def _is_index_str_and_valid(self, index):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplemented, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pycylon/data/table.pyx":2211
 *         return True
 * 
 *     def _get_index_list_from_columns(self, index):             # <<<<<<<<<<<<<<
 *         # multi-column indexing
 *         index_columns = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table._get_index_list_from_columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index_columns);
  __Pyx_XDECREF(__pyx_v_ar_tb);
  __Pyx_XDECREF(__pyx_v_index_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2225
 *             return NotImplemented("Not Supported index pattern")
 * 
 *     def _is_index_str_and_valid(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, str):
 *             if index in self.column_names:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_167_is_index_str_and_valid(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_166_is_index_str_and_valid[] = "Table._is_index_str_and_valid(self, index)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_167_is_index_str_and_valid(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_index_str_and_valid (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_166_is_index_str_and_valid(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_166_is_index_str_and_valid(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_index_str_and_valid", 0);

  /* "pycylon/data/table.pyx":2226
 * 
 *     def _is_index_str_and_valid(self, index):
 *         if isinstance(index, str):             # <<<<<<<<<<<<<<
 *             if index in self.column_names:
 *                 return True
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":2227
 *     def _is_index_str_and_valid(self, index):
 *         if isinstance(index, str):
 *             if index in self.column_names:             # <<<<<<<<<<<<<<
 *                 return True
 *         return False
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_index, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pycylon/data/table.pyx":2228
 *         if isinstance(index, str):
 *             if index in self.column_names:
 *                 return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pycylon/data/table.pyx":2227
 *     def _is_index_str_and_valid(self, index):
 *         if isinstance(index, str):
 *             if index in self.column_names:             # <<<<<<<<<<<<<<
 *                 return True
 *         return False
 */
    }

    /* "pycylon/data/table.pyx":2226
 * 
 *     def _is_index_str_and_valid(self, index):
 *         if isinstance(index, str):             # <<<<<<<<<<<<<<
 *             if index in self.column_names:
 *                 return True
 */
  }

  /* "pycylon/data/table.pyx":2229
 *             if index in self.column_names:
 *                 return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def _get_column_by_name(self, column_name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2225
 *             return NotImplemented("Not Supported index pattern")
 * 
 *     def _is_index_str_and_valid(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, str):
 *             if index in self.column_names:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table._is_index_str_and_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2231
 *         return False
 * 
 *     def _get_column_by_name(self, column_name):             # <<<<<<<<<<<<<<
 *         artb = self.to_arrow().combine_chunks()
 *         return artb.column(column_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_169_get_column_by_name(PyObject *__pyx_v_self, PyObject *__pyx_v_column_name); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_168_get_column_by_name[] = "Table._get_column_by_name(self, column_name)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_169_get_column_by_name(PyObject *__pyx_v_self, PyObject *__pyx_v_column_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_column_by_name (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_168_get_column_by_name(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_column_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_168_get_column_by_name(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_column_name) {
  PyObject *__pyx_v_artb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_column_by_name", 0);

  /* "pycylon/data/table.pyx":2232
 * 
 *     def _get_column_by_name(self, column_name):
 *         artb = self.to_arrow().combine_chunks()             # <<<<<<<<<<<<<<
 *         return artb.column(column_name)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_artb = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2233
 *     def _get_column_by_name(self, column_name):
 *         artb = self.to_arrow().combine_chunks()
 *         return artb.column(column_name)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_artb, __pyx_n_s_column); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_column_name) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_column_name);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2231
 *         return False
 * 
 *     def _get_column_by_name(self, column_name):             # <<<<<<<<<<<<<<
 *         artb = self.to_arrow().combine_chunks()
 *         return artb.column(column_name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycylon.data.table.Table._get_column_by_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_artb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2236
 * 
 *     @property
 *     def index(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Retrieve index if exists or provide a range index as default
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_5index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_5index___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_5index___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":2247
 * 
 *         '''
 *         return self.get_index()             # <<<<<<<<<<<<<<
 * 
 *     def set_index(self, key, indexing_type: IndexingType = IndexingType.LINEAR,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2236
 * 
 *     @property
 *     def index(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Retrieve index if exists or provide a range index as default
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2249
 *         return self.get_index()
 * 
 *     def set_index(self, key, indexing_type: IndexingType = IndexingType.LINEAR,             # <<<<<<<<<<<<<<
 *                   drop: bool = False):
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_171set_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_170set_index[] = "Table.set_index(self, key, indexing_type: IndexingType = IndexingType.LINEAR, drop: bool = False)\n\n        Set Index\n        Operation takes place inplace.\n        Args:\n            key: pycylon.indexing.cyindex.BaseIndex\n\n        Returns: None\n\n        Examples\n        --------\n\n        >>> tb\n               col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n\n\n        >>> tb.set_index(['a', 'b', 'c', 'd'])\n\n        >>> tb.index\n            <pycylon.indexing.cyindex.BaseIndex object at 0x7fa72c2b6ca0>\n\n        >>> tb.index.index_values\n            ['a', 'b', 'c', 'd']\n\n        >>> tb.set_index('col-1', IndexingSchema.LINEAR, True)\n\n               col-2  col-3\n            1      5      9\n            2      6     10\n            3      7     11\n            4      8     12\n        NOTE: indexing value is not exposed to print functions\n        >>> tb.index.index_values\n            [ 1, 2, 3, 4]\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_171set_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_indexing_type = 0;
  PyObject *__pyx_v_drop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_indexing_type_2,&__pyx_n_s_drop,0};
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k__28;

    /* "pycylon/data/table.pyx":2250
 * 
 *     def set_index(self, key, indexing_type: IndexingType = IndexingType.LINEAR,
 *                   drop: bool = False):             # <<<<<<<<<<<<<<
 *         '''
 *         Set Index
 */
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indexing_type_2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_drop);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_index") < 0)) __PYX_ERR(0, 2249, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_indexing_type = values[1];
    __pyx_v_drop = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_index", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2249, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.set_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_170set_index(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_key, __pyx_v_indexing_type, __pyx_v_drop);

  /* "pycylon/data/table.pyx":2249
 *         return self.get_index()
 * 
 *     def set_index(self, key, indexing_type: IndexingType = IndexingType.LINEAR,             # <<<<<<<<<<<<<<
 *                   drop: bool = False):
 *         '''
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_170set_index(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_indexing_type, PyObject *__pyx_v_drop) {
  std::shared_ptr<cylon::Table>  __pyx_v_indexed_cylon_table;
  std::shared_ptr<cylon::BaseArrowIndex>  __pyx_v_c_base_arrow_index;
  PyObject *__pyx_v_indexed_table = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_index", 0);

  /* "pycylon/data/table.pyx":2295
 *         cdef shared_ptr[CBaseArrowIndex] c_base_arrow_index
 * 
 *         if isinstance(key, BaseArrowIndex):             # <<<<<<<<<<<<<<
 *             c_base_arrow_index = pycylon_unwrap_base_arrow_index(key)
 *             self.table_shd_ptr.get().SetArrowIndex(c_base_arrow_index, False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BaseArrowIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_key, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 2295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pycylon/data/table.pyx":2296
 * 
 *         if isinstance(key, BaseArrowIndex):
 *             c_base_arrow_index = pycylon_unwrap_base_arrow_index(key)             # <<<<<<<<<<<<<<
 *             self.table_shd_ptr.get().SetArrowIndex(c_base_arrow_index, False)
 *         else:
 */
    __pyx_v_c_base_arrow_index = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_base_arrow_index(__pyx_v_key);

    /* "pycylon/data/table.pyx":2297
 *         if isinstance(key, BaseArrowIndex):
 *             c_base_arrow_index = pycylon_unwrap_base_arrow_index(key)
 *             self.table_shd_ptr.get().SetArrowIndex(c_base_arrow_index, False)             # <<<<<<<<<<<<<<
 *         else:
 *             indexed_table = process_index_by_value(key=key, table=self,
 */
    (void)(__pyx_v_self->table_shd_ptr.get()->SetArrowIndex(__pyx_v_c_base_arrow_index, 0));

    /* "pycylon/data/table.pyx":2295
 *         cdef shared_ptr[CBaseArrowIndex] c_base_arrow_index
 * 
 *         if isinstance(key, BaseArrowIndex):             # <<<<<<<<<<<<<<
 *             c_base_arrow_index = pycylon_unwrap_base_arrow_index(key)
 *             self.table_shd_ptr.get().SetArrowIndex(c_base_arrow_index, False)
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":2299
 *             self.table_shd_ptr.get().SetArrowIndex(c_base_arrow_index, False)
 *         else:
 *             indexed_table = process_index_by_value(key=key, table=self,             # <<<<<<<<<<<<<<
 *                                                    indexing_type=indexing_type,
 *                                                    drop_index=drop)
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_process_index_by_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_key, __pyx_v_key) < 0) __PYX_ERR(0, 2299, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_table, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 2299, __pyx_L1_error)

    /* "pycylon/data/table.pyx":2300
 *         else:
 *             indexed_table = process_index_by_value(key=key, table=self,
 *                                                    indexing_type=indexing_type,             # <<<<<<<<<<<<<<
 *                                                    drop_index=drop)
 *             indexed_cylon_table = pycylon_unwrap_table(indexed_table)
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_indexing_type_2, __pyx_v_indexing_type) < 0) __PYX_ERR(0, 2299, __pyx_L1_error)

    /* "pycylon/data/table.pyx":2301
 *             indexed_table = process_index_by_value(key=key, table=self,
 *                                                    indexing_type=indexing_type,
 *                                                    drop_index=drop)             # <<<<<<<<<<<<<<
 *             indexed_cylon_table = pycylon_unwrap_table(indexed_table)
 *             self.init(indexed_cylon_table)
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_drop_index, __pyx_v_drop) < 0) __PYX_ERR(0, 2299, __pyx_L1_error)

    /* "pycylon/data/table.pyx":2299
 *             self.table_shd_ptr.get().SetArrowIndex(c_base_arrow_index, False)
 *         else:
 *             indexed_table = process_index_by_value(key=key, table=self,             # <<<<<<<<<<<<<<
 *                                                    indexing_type=indexing_type,
 *                                                    drop_index=drop)
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_indexed_table = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pycylon/data/table.pyx":2302
 *                                                    indexing_type=indexing_type,
 *                                                    drop_index=drop)
 *             indexed_cylon_table = pycylon_unwrap_table(indexed_table)             # <<<<<<<<<<<<<<
 *             self.init(indexed_cylon_table)
 * 
 */
    __pyx_v_indexed_cylon_table = __pyx_f_7pycylon_3api_3lib_pycylon_unwrap_table(__pyx_v_indexed_table);

    /* "pycylon/data/table.pyx":2303
 *                                                    drop_index=drop)
 *             indexed_cylon_table = pycylon_unwrap_table(indexed_table)
 *             self.init(indexed_cylon_table)             # <<<<<<<<<<<<<<
 * 
 *     # def _reset_index(self, drop_index: bool = False) -> Table:
 */
    ((struct __pyx_vtabstruct_7pycylon_4data_5table_Table *)__pyx_v_self->__pyx_vtab)->init(__pyx_v_self, __pyx_v_indexed_cylon_table);
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":2249
 *         return self.get_index()
 * 
 *     def set_index(self, key, indexing_type: IndexingType = IndexingType.LINEAR,             # <<<<<<<<<<<<<<
 *                   drop: bool = False):
 *         '''
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.set_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indexed_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2336
 *     #     self.table_shd_ptr.get().ResetIndex(c_drop_index)
 * 
 *     def reset_index(self, drop_index: bool = False):             # <<<<<<<<<<<<<<
 *         """
 *         reset_index
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_173reset_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_172reset_index[] = "Table.reset_index(self, drop_index: bool = False)\n\n        reset_index\n        Here the existing index can be removed and set back to table.\n        This operation takes place in place.\n        Args:\n            drop_index: bool, if True the column is dropped otherwise added to the table with the\n            column name \"index\"\n\n        Returns: None\n\n        Examples\n        --------\n\n        >>> tb\n                col-2  col-3\n            1      5      9\n            2      6     10\n            3      7     11\n            4      8     12\n\n        >>> tb.reset_index()\n                col-1  col-2  col-3\n            0      1      5      9\n            1      2      6     10\n            2      3      7     11\n            3      4      8     12\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_173reset_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_drop_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_drop_index,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_drop_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset_index") < 0)) __PYX_ERR(0, 2336, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_drop_index = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_index", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2336, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.reset_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_172reset_index(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_drop_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_172reset_index(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_drop_index) {
  bool __pyx_v_c_drop_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset_index", 0);

  /* "pycylon/data/table.pyx":2364
 *             3      4      8     12
 *         """
 *         cdef cpp_bool c_drop_index = drop_index             # <<<<<<<<<<<<<<
 *         self.table_shd_ptr.get().ResetArrowIndex(c_drop_index)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_drop_index); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2364, __pyx_L1_error)
  __pyx_v_c_drop_index = __pyx_t_1;

  /* "pycylon/data/table.pyx":2365
 *         """
 *         cdef cpp_bool c_drop_index = drop_index
 *         self.table_shd_ptr.get().ResetArrowIndex(c_drop_index)             # <<<<<<<<<<<<<<
 * 
 *     def dropna(self, axis=0, how='any', inplace=False):
 */
  (void)(__pyx_v_self->table_shd_ptr.get()->ResetArrowIndex(__pyx_v_c_drop_index));

  /* "pycylon/data/table.pyx":2336
 *     #     self.table_shd_ptr.get().ResetIndex(c_drop_index)
 * 
 *     def reset_index(self, drop_index: bool = False):             # <<<<<<<<<<<<<<
 *         """
 *         reset_index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.reset_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2367
 *         self.table_shd_ptr.get().ResetArrowIndex(c_drop_index)
 * 
 *     def dropna(self, axis=0, how='any', inplace=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Drop not applicable values from a Table
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_175dropna(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_174dropna[] = "Table.dropna(self, axis=0, how=u'any', inplace=False)\n\n        Drop not applicable values from a Table\n        Args:\n            axis: 0 for column and 1 for row and only do dropping on the specified axis\n            how: any or all, any refers to drop if any value is NA and drop only if all values\n            are NA in the considered axis\n            inplace: do the operation on the existing Table itself when set to True, the default\n            is False and it produces a new Table with the drop update\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n               col-1  col-2  col-3\n            0    1.0      5    9.0\n            1    NaN      6   10.0\n            2    3.0      7   11.0\n            3    4.0      8    NaN\n\n        >>> tb_na.dropna(how='any')\n               col-2\n            0      5\n            1      6\n            2      7\n            3      8\n\n        >>> tb_na.dropna(how='all')\n               col-1  col-2  col-3\n            0    1.0      5    9.0\n            1    NaN      6   10.0\n            2    3.0      7   11.0\n            3    4.0      8    NaN\n\n        >>> tb_na.dropna(axis=1, how='any')\n               col-1  col-2  col-3\n            0      1      5      9\n            1      3      7     11\n\n        >>> tb_na.dropna(axis=1, how='all')\n               col-1  col-2  col-3\n            0    1.0      5    9.0\n            1    NaN      6   10.0\n            2    3.0      7   11.0\n            3    4.0      8    NaN\n\n        >>> tb_na\n               col-1  col-2  col-3\n            0    1.0      5    9.0\n            1    NaN      6   10.0\n            2    3.0      7   11.0\n            3    4.0      8    NaN\n\n        >>> tb_na.dropna(axis=1, how='any', inplace=True)\n               col-1  col-2  col-3\n            0      1      5      9\n            1      3      7     11\n\n        >>> tb_na\n               col-1  col-2  col-3\n            0      1      5      9""\n            1      3      7     11\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_175dropna(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_how = 0;
  PyObject *__pyx_v_inplace = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dropna (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_how,&__pyx_n_s_inplace,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_n_u_any);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_how);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inplace);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dropna") < 0)) __PYX_ERR(0, 2367, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_axis = values[0];
    __pyx_v_how = values[1];
    __pyx_v_inplace = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dropna", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2367, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.dropna", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_174dropna(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_axis, __pyx_v_how, __pyx_v_inplace);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_174dropna(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_how, PyObject *__pyx_v_inplace) {
  PyObject *__pyx_v_new_tb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dropna", 0);

  /* "pycylon/data/table.pyx":2432
 *             1      3      7     11
 *         '''
 *         self.reset_index()             # <<<<<<<<<<<<<<
 *         new_tb = compute.drop_na(self, how, axis)
 *         if inplace:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2433
 *         '''
 *         self.reset_index()
 *         new_tb = compute.drop_na(self, how, axis)             # <<<<<<<<<<<<<<
 *         if inplace:
 *             self.initialize(new_tb.to_arrow(), self.context)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_drop_na); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_how, __pyx_v_axis};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2433, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_how, __pyx_v_axis};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2433, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_how);
    __Pyx_GIVEREF(__pyx_v_how);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_how);
    __Pyx_INCREF(__pyx_v_axis);
    __Pyx_GIVEREF(__pyx_v_axis);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_axis);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_new_tb = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2434
 *         self.reset_index()
 *         new_tb = compute.drop_na(self, how, axis)
 *         if inplace:             # <<<<<<<<<<<<<<
 *             self.initialize(new_tb.to_arrow(), self.context)
 *             self.set_index(self.column_names[0], drop=True)
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_inplace); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2434, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "pycylon/data/table.pyx":2435
 *         new_tb = compute.drop_na(self, how, axis)
 *         if inplace:
 *             self.initialize(new_tb.to_arrow(), self.context)             # <<<<<<<<<<<<<<
 *             self.set_index(self.column_names[0], drop=True)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_tb, __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2435, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2435, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_4, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_4, __pyx_t_2);
      __pyx_t_5 = 0;
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2436
 *         if inplace:
 *             self.initialize(new_tb.to_arrow(), self.context)
 *             self.set_index(self.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *         else:
 *             new_tb.set_index(new_tb.column_names[0], drop=True)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2436, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":2434
 *         self.reset_index()
 *         new_tb = compute.drop_na(self, how, axis)
 *         if inplace:             # <<<<<<<<<<<<<<
 *             self.initialize(new_tb.to_arrow(), self.context)
 *             self.set_index(self.column_names[0], drop=True)
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":2438
 *             self.set_index(self.column_names[0], drop=True)
 *         else:
 *             new_tb.set_index(new_tb.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *             return new_tb
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_tb, __pyx_n_s_set_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_tb, __pyx_n_s_column_names); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2438, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2439
 *         else:
 *             new_tb.set_index(new_tb.column_names[0], drop=True)
 *             return new_tb             # <<<<<<<<<<<<<<
 * 
 *     def isin(self, value, skip_null=True) -> Table:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_new_tb);
    __pyx_r = __pyx_v_new_tb;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":2367
 *         self.table_shd_ptr.get().ResetArrowIndex(c_drop_index)
 * 
 *     def dropna(self, axis=0, how='any', inplace=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Drop not applicable values from a Table
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pycylon.data.table.Table.dropna", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_tb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2441
 *             return new_tb
 * 
 *     def isin(self, value, skip_null=True) -> Table:             # <<<<<<<<<<<<<<
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.is_in(self, value, skip_null, engine)
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_177isin(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_176isin[] = "Table.isin(self, value, skip_null=True) -> Table";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_177isin(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_skip_null = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_skip_null,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_skip_null);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isin") < 0)) __PYX_ERR(0, 2441, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_skip_null = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isin", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2441, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.isin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_176isin(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_value, __pyx_v_skip_null);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_176isin(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_skip_null) {
  PyObject *__pyx_v_engine = NULL;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isin", 0);

  /* "pycylon/data/table.pyx":2442
 * 
 *     def isin(self, value, skip_null=True) -> Table:
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.is_in(self, value, skip_null, engine)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_engine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2443
 *     def isin(self, value, skip_null=True) -> Table:
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.is_in(self, value, skip_null, engine)             # <<<<<<<<<<<<<<
 * 
 *     def applymap(self, func) -> Table:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_is_in); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_value, __pyx_v_skip_null, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2443, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_value, __pyx_v_skip_null, __pyx_v_engine};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2443, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_value);
    __Pyx_INCREF(__pyx_v_skip_null);
    __Pyx_GIVEREF(__pyx_v_skip_null);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_skip_null);
    __Pyx_INCREF(__pyx_v_engine);
    __Pyx_GIVEREF(__pyx_v_engine);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_engine);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 2443, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2441
 *             return new_tb
 * 
 *     def isin(self, value, skip_null=True) -> Table:             # <<<<<<<<<<<<<<
 *         engine = self.context.get_config("compute_engine", "arrow")
 *         return compute.is_in(self, value, skip_null, engine)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.isin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_engine);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2445
 *         return compute.is_in(self, value, skip_null, engine)
 * 
 *     def applymap(self, func) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Applies an element-wise map function
 */

/* Python wrapper */
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_179applymap(PyObject *__pyx_v_self, PyObject *__pyx_v_func); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_178applymap[] = "Table.applymap(self, func) -> Table\n\n        Applies an element-wise map function\n        Args:\n            func: lambda or a map function\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n                     c1       c2\n            0     Rayan  Cameron\n            1  Reynolds   Selena\n            2      Jack    Roger\n            3       Mat   Murphy\n\n        >>> tb.applymap(lambda x: \"Hello, \" + x)\n                            c1              c2\n            0     Hello, Rayan  Hello, Cameron\n            1  Hello, Reynolds   Hello, Selena\n            2      Hello, Jack    Hello, Roger\n            3       Hello, Mat   Hello, Murphy\n\n        ";
static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pw_7pycylon_4data_5table_5Table_179applymap(PyObject *__pyx_v_self, PyObject *__pyx_v_func) {
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applymap (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_178applymap(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_func));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_pf_7pycylon_4data_5table_5Table_178applymap(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_func) {
  PyObject *__pyx_v_new_chunks = NULL;
  PyObject *__pyx_v_artb = NULL;
  PyObject *__pyx_v_chunk_array = NULL;
  PyObject *__pyx_v_npr = NULL;
  struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applymap", 0);

  /* "pycylon/data/table.pyx":2471
 * 
 *         '''
 *         new_chunks = []             # <<<<<<<<<<<<<<
 *         artb = self.to_arrow().combine_chunks()
 *         for chunk_array in artb.itercolumns():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_chunks = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2472
 *         '''
 *         new_chunks = []
 *         artb = self.to_arrow().combine_chunks()             # <<<<<<<<<<<<<<
 *         for chunk_array in artb.itercolumns():
 *             npr = chunk_array.to_numpy()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_combine_chunks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_artb = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2473
 *         new_chunks = []
 *         artb = self.to_arrow().combine_chunks()
 *         for chunk_array in artb.itercolumns():             # <<<<<<<<<<<<<<
 *             npr = chunk_array.to_numpy()
 *             new_chunks.append(pa.array(list(map(func, npr))))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_artb, __pyx_n_s_itercolumns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2473, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2473, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2473, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2473, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2473, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2473, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_chunk_array, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2474
 *         artb = self.to_arrow().combine_chunks()
 *         for chunk_array in artb.itercolumns():
 *             npr = chunk_array.to_numpy()             # <<<<<<<<<<<<<<
 *             new_chunks.append(pa.array(list(map(func, npr))))
 *         return Table.from_arrow(self.context,
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk_array, __pyx_n_s_to_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_npr, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2475
 *         for chunk_array in artb.itercolumns():
 *             npr = chunk_array.to_numpy()
 *             new_chunks.append(pa.array(list(map(func, npr))))             # <<<<<<<<<<<<<<
 *         return Table.from_arrow(self.context,
 *                                 pa.Table.from_arrays(new_chunks, self.column_names))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pa); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_func);
    __Pyx_GIVEREF(__pyx_v_func);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_func);
    __Pyx_INCREF(__pyx_v_npr);
    __Pyx_GIVEREF(__pyx_v_npr);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_npr);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PySequence_List(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_new_chunks, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 2475, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2473
 *         new_chunks = []
 *         artb = self.to_arrow().combine_chunks()
 *         for chunk_array in artb.itercolumns():             # <<<<<<<<<<<<<<
 *             npr = chunk_array.to_numpy()
 *             new_chunks.append(pa.array(list(map(func, npr))))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pycylon/data/table.pyx":2476
 *             npr = chunk_array.to_numpy()
 *             new_chunks.append(pa.array(list(map(func, npr))))
 *         return Table.from_arrow(self.context,             # <<<<<<<<<<<<<<
 *                                 pa.Table.from_arrays(new_chunks, self.column_names))
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "pycylon/data/table.pyx":2477
 *             new_chunks.append(pa.array(list(map(func, npr))))
 *         return Table.from_arrow(self.context,
 *                                 pa.Table.from_arrays(new_chunks, self.column_names))             # <<<<<<<<<<<<<<
 * 
 *     # def _get_index(self) -> BaseIndex:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_pa); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Table); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_new_chunks, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2477, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_new_chunks, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2477, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_new_chunks);
    __Pyx_GIVEREF(__pyx_v_new_chunks);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_v_new_chunks);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2476, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2476, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2476
 *             npr = chunk_array.to_numpy()
 *             new_chunks.append(pa.array(list(map(func, npr))))
 *         return Table.from_arrow(self.context,             # <<<<<<<<<<<<<<
 *                                 pa.Table.from_arrays(new_chunks, self.column_names))
 * 
 */
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7pycylon_4data_5table_Table))))) __PYX_ERR(0, 2476, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2445
 *         return compute.is_in(self, value, skip_null, engine)
 * 
 *     def applymap(self, func) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Applies an element-wise map function
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pycylon.data.table.Table.applymap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_chunks);
  __Pyx_XDECREF(__pyx_v_artb);
  __Pyx_XDECREF(__pyx_v_chunk_array);
  __Pyx_XDECREF(__pyx_v_npr);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2483
 *     #     return pycylon_wrap_base_index(c_index)
 * 
 *     def get_index(self) -> BaseArrowIndex:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CBaseArrowIndex] c_index = self.table_shd_ptr.get().GetArrowIndex()
 *         return pycylon_wrap_base_arrow_index(c_index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_181get_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_180get_index[] = "Table.get_index(self) -> BaseArrowIndex";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_181get_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_index (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_180get_index(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_180get_index(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  std::shared_ptr<cylon::BaseArrowIndex>  __pyx_v_c_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_index", 0);

  /* "pycylon/data/table.pyx":2484
 * 
 *     def get_index(self) -> BaseArrowIndex:
 *         cdef shared_ptr[CBaseArrowIndex] c_index = self.table_shd_ptr.get().GetArrowIndex()             # <<<<<<<<<<<<<<
 *         return pycylon_wrap_base_arrow_index(c_index)
 * 
 */
  __pyx_v_c_index = __pyx_v_self->table_shd_ptr.get()->GetArrowIndex();

  /* "pycylon/data/table.pyx":2485
 *     def get_index(self) -> BaseArrowIndex:
 *         cdef shared_ptr[CBaseArrowIndex] c_index = self.table_shd_ptr.get().GetArrowIndex()
 *         return pycylon_wrap_base_arrow_index(c_index)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pycylon_3api_3lib_pycylon_wrap_base_arrow_index(__pyx_v_c_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2483
 *     #     return pycylon_wrap_base_index(c_index)
 * 
 *     def get_index(self) -> BaseArrowIndex:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CBaseArrowIndex] c_index = self.table_shd_ptr.get().GetArrowIndex()
 *         return pycylon_wrap_base_arrow_index(c_index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.get_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2488
 * 
 *     @property
 *     def indexing_type(self):             # <<<<<<<<<<<<<<
 *         return self._indexing_type
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_13indexing_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_13indexing_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_13indexing_type___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_13indexing_type___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":2489
 *     @property
 *     def indexing_type(self):
 *         return self._indexing_type             # <<<<<<<<<<<<<<
 * 
 *     @indexing_type.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_indexing_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2488
 * 
 *     @property
 *     def indexing_type(self):             # <<<<<<<<<<<<<<
 *         return self._indexing_type
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.indexing_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2492
 * 
 *     @indexing_type.setter
 *     def indexing_type(self, type):             # <<<<<<<<<<<<<<
 *         self._indexing_type = type
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pycylon_4data_5table_5Table_13indexing_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_type); /*proto*/
static int __pyx_pw_7pycylon_4data_5table_5Table_13indexing_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_13indexing_type_2__set__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pycylon_4data_5table_5Table_13indexing_type_2__set__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pycylon/data/table.pyx":2493
 *     @indexing_type.setter
 *     def indexing_type(self, type):
 *         self._indexing_type = type             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_indexing_type, __pyx_v_type) < 0) __PYX_ERR(0, 2493, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2492
 * 
 *     @indexing_type.setter
 *     def indexing_type(self, type):             # <<<<<<<<<<<<<<
 *         self._indexing_type = type
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.indexing_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2496
 * 
 *     @property
 *     def loc(self) -> PyLocIndexer:             # <<<<<<<<<<<<<<
 *         """
 *         loc
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_3loc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_3loc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_3loc___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_3loc___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":2525
 * 
 *         """
 *         return PyLocIndexer(self, "loc")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PyLocIndexer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_n_u_loc};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2525, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_n_u_loc};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2525, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_n_u_loc);
    __Pyx_GIVEREF(__pyx_n_u_loc);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_loc);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2496
 * 
 *     @property
 *     def loc(self) -> PyLocIndexer:             # <<<<<<<<<<<<<<
 *         """
 *         loc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.loc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2528
 * 
 *     @property
 *     def iloc(self) -> PyLocIndexer:             # <<<<<<<<<<<<<<
 *         """
 *         loc
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_4iloc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_4iloc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_4iloc___get__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_4iloc___get__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pycylon/data/table.pyx":2558
 * 
 *         """
 *         return PyLocIndexer(self, "iloc")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PyLocIndexer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_n_u_iloc};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2558, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), __pyx_n_u_iloc};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2558, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_n_u_iloc);
    __Pyx_GIVEREF(__pyx_n_u_iloc);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_iloc);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2528
 * 
 *     @property
 *     def iloc(self) -> PyLocIndexer:             # <<<<<<<<<<<<<<
 *         """
 *         loc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycylon.data.table.Table.iloc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2561
 * 
 *     @staticmethod
 *     def concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):             # <<<<<<<<<<<<<<
 *         """
 *         Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_183concat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_182concat[] = "Table.concat(tables: List[Table], axis: int = 0, unicode join: str = u'inner', unicode algorithm: str = u'sort')\n\n        Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.\n\n        Algorithm\n        =========\n        axis=1 (regular join op considering a column)\n        ----------------------------------------------\n\n        1. If indexed or not, do a reset_index op (which will add the new column as 'index' in both\n        tables)\n        2. Do the regular join by considering the 'index' column\n        3. Set the index by 'index' in the resultant table\n\n        axis=0 (stacking tables or similar to merge function)\n        -----------------------------------------------------\n        assert: column count must match\n        the two tables are stacked upon each other in order\n        The index is created by concatenating two indices\n        Args:\n            tables: List of PyCylon Tables\n            axis: 0:row-wise 1:column-wise\n            join: 'inner' and 'outer'\n            algorithm: 'sort' or 'hash'\n        Returns: PyCylon Table\n\n        ";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_183concat = {"concat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_183concat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_182concat};
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_183concat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tables = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_join = 0;
  PyObject *__pyx_v_algorithm = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tables,&__pyx_n_s_axis,&__pyx_n_s_join,&__pyx_n_s_algorithm,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject*)__pyx_n_u_inner);
    values[3] = ((PyObject*)__pyx_n_u_sort);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_join);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "concat") < 0)) __PYX_ERR(0, 2561, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tables = values[0];
    __pyx_v_axis = values[1];
    __pyx_v_join = ((PyObject*)values[2]);
    __pyx_v_algorithm = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("concat", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2561, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_join), (&PyUnicode_Type), 1, "join", 1))) __PYX_ERR(0, 2561, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_algorithm), (&PyUnicode_Type), 1, "algorithm", 1))) __PYX_ERR(0, 2561, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_182concat(__pyx_v_tables, __pyx_v_axis, __pyx_v_join, __pyx_v_algorithm);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_182concat(PyObject *__pyx_v_tables, PyObject *__pyx_v_axis, PyObject *__pyx_v_join, PyObject *__pyx_v_algorithm) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("concat", 0);

  /* "pycylon/data/table.pyx":2588
 * 
 *         """
 *         return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_concat_impl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_tables, __pyx_v_tables) < 0) __PYX_ERR(0, 2588, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_axis, __pyx_v_axis) < 0) __PYX_ERR(0, 2588, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_join, __pyx_v_join) < 0) __PYX_ERR(0, 2588, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_algorithm, __pyx_v_algorithm) < 0) __PYX_ERR(0, 2588, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2561
 * 
 *     @staticmethod
 *     def concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):             # <<<<<<<<<<<<<<
 *         """
 *         Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.Table.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2591
 * 
 *     @staticmethod
 *     def distributed_concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):             # <<<<<<<<<<<<<<
 *         """
 *         Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_185distributed_concat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_184distributed_concat[] = "Table.distributed_concat(tables: List[Table], axis: int = 0, unicode join: str = u'inner', unicode algorithm: str = u'sort')\n\n        Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.\n\n        Algorithm\n        =========\n        axis=1 (regular join op considering a column)\n        ----------------------------------------------\n\n        1. If indexed or not, do a reset_index op (which will add the new column as 'index' in both\n        tables)\n        2. Do the regular join by considering the 'index' column\n        3. Set the index by 'index' in the resultant table\n\n        axis=0 (stacking tables or similar to merge function)\n        -----------------------------------------------------\n        assert: column count must match\n        the two tables are stacked upon each other in order\n        The index is created by concatenating two indices\n        Args:\n            tables: List of PyCylon Tables\n            axis: 0:row-wise 1:column-wise\n            join: 'inner' and 'outer'\n            algorithm: 'sort' or 'hash'\n        Returns: PyCylon Table\n\n        ";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_5Table_185distributed_concat = {"distributed_concat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_185distributed_concat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_184distributed_concat};
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_185distributed_concat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tables = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_join = 0;
  PyObject *__pyx_v_algorithm = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distributed_concat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tables,&__pyx_n_s_axis,&__pyx_n_s_join,&__pyx_n_s_algorithm,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject*)__pyx_n_u_inner);
    values[3] = ((PyObject*)__pyx_n_u_sort);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_join);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distributed_concat") < 0)) __PYX_ERR(0, 2591, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tables = values[0];
    __pyx_v_axis = values[1];
    __pyx_v_join = ((PyObject*)values[2]);
    __pyx_v_algorithm = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distributed_concat", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2591, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_join), (&PyUnicode_Type), 1, "join", 1))) __PYX_ERR(0, 2591, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_algorithm), (&PyUnicode_Type), 1, "algorithm", 1))) __PYX_ERR(0, 2591, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_184distributed_concat(__pyx_v_tables, __pyx_v_axis, __pyx_v_join, __pyx_v_algorithm);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_184distributed_concat(PyObject *__pyx_v_tables, PyObject *__pyx_v_axis, PyObject *__pyx_v_join, PyObject *__pyx_v_algorithm) {
  PyObject *__pyx_v_ctx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distributed_concat", 0);

  /* "pycylon/data/table.pyx":2618
 * 
 *         """
 *         if not isinstance(tables[0], Table):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 *         ctx = tables[0].context
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pycylon/data/table.pyx":2619
 *         """
 *         if not isinstance(tables[0], Table):
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")             # <<<<<<<<<<<<<<
 *         ctx = tables[0].context
 * 
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_object);
    __pyx_t_4 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_object);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_object);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_Table_expected);
    __pyx_t_4 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_Table_expected);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Table_expected);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2619, __pyx_L1_error)

    /* "pycylon/data/table.pyx":2618
 * 
 *         """
 *         if not isinstance(tables[0], Table):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 *         ctx = tables[0].context
 */
  }

  /* "pycylon/data/table.pyx":2620
 *         if not isinstance(tables[0], Table):
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 *         ctx = tables[0].context             # <<<<<<<<<<<<<<
 * 
 *         if axis == 0 or (axis == 1 and ctx.get_world_size() == 1):
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_context); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ctx = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "pycylon/data/table.pyx":2622
 *         ctx = tables[0].context
 * 
 *         if axis == 0 or (axis == 1 and ctx.get_world_size() == 1):             # <<<<<<<<<<<<<<
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm)
 *         elif axis == 1 and ctx.get_world_size() > 1:
 */
  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_v_axis, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_v_axis, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_get_world_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_3) {

    /* "pycylon/data/table.pyx":2623
 * 
 *         if axis == 0 or (axis == 1 and ctx.get_world_size() == 1):
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm)             # <<<<<<<<<<<<<<
 *         elif axis == 1 and ctx.get_world_size() > 1:
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_concat_impl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_tables, __pyx_v_tables) < 0) __PYX_ERR(0, 2623, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_axis, __pyx_v_axis) < 0) __PYX_ERR(0, 2623, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_join, __pyx_v_join) < 0) __PYX_ERR(0, 2623, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_algorithm, __pyx_v_algorithm) < 0) __PYX_ERR(0, 2623, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2622
 *         ctx = tables[0].context
 * 
 *         if axis == 0 or (axis == 1 and ctx.get_world_size() == 1):             # <<<<<<<<<<<<<<
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm)
 *         elif axis == 1 and ctx.get_world_size() > 1:
 */
  }

  /* "pycylon/data/table.pyx":2624
 *         if axis == 0 or (axis == 1 and ctx.get_world_size() == 1):
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm)
 *         elif axis == 1 and ctx.get_world_size() > 1:             # <<<<<<<<<<<<<<
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm,
 *                                 axis1_join_func='distributed_join')
 */
  __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_v_axis, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_get_world_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_3 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (likely(__pyx_t_3)) {

    /* "pycylon/data/table.pyx":2625
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm)
 *         elif axis == 1 and ctx.get_world_size() > 1:
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm,             # <<<<<<<<<<<<<<
 *                                 axis1_join_func='distributed_join')
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_concat_impl); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_tables, __pyx_v_tables) < 0) __PYX_ERR(0, 2625, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_axis, __pyx_v_axis) < 0) __PYX_ERR(0, 2625, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_join, __pyx_v_join) < 0) __PYX_ERR(0, 2625, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_algorithm, __pyx_v_algorithm) < 0) __PYX_ERR(0, 2625, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_axis1_join_func, __pyx_n_u_distributed_join) < 0) __PYX_ERR(0, 2625, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2624
 *         if axis == 0 or (axis == 1 and ctx.get_world_size() == 1):
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm)
 *         elif axis == 1 and ctx.get_world_size() > 1:             # <<<<<<<<<<<<<<
 *             return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm,
 *                                 axis1_join_func='distributed_join')
 */
  }

  /* "pycylon/data/table.pyx":2628
 *                                 axis1_join_func='distributed_join')
 *         else:
 *             raise ValueError(f"Invalid axis {axis}, must 0 or 1")             # <<<<<<<<<<<<<<
 * 
 *     def iterrows(self):
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
    __pyx_t_4 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_axis);
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_axis, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_must_0_or_1);
    __pyx_t_4 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_must_0_or_1);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_must_0_or_1);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2628, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":2591
 * 
 *     @staticmethod
 *     def distributed_concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):             # <<<<<<<<<<<<<<
 *         """
 *         Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pycylon.data.table.Table.distributed_concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ctx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7pycylon_4data_5table_5Table_188generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pycylon/data/table.pyx":2630
 *             raise ValueError(f"Invalid axis {axis}, must 0 or 1")
 * 
 *     def iterrows(self):             # <<<<<<<<<<<<<<
 *         data_dict = self.to_pydict()
 *         index_values = self.index.values.tolist()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_187iterrows(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_186iterrows[] = "Table.iterrows(self)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_187iterrows(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterrows (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_186iterrows(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_186iterrows(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterrows", 0);
  __pyx_cur_scope = (struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *)__pyx_tp_new_7pycylon_4data_5table___pyx_scope_struct__iterrows(__pyx_ptype_7pycylon_4data_5table___pyx_scope_struct__iterrows, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2630, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7pycylon_4data_5table_5Table_188generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iterrows, __pyx_n_s_Table_iterrows, __pyx_n_s_pycylon_data_table); if (unlikely(!gen)) __PYX_ERR(0, 2630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.iterrows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7pycylon_4data_5table_5Table_188generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *__pyx_cur_scope = ((struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterrows", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2630, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2631
 * 
 *     def iterrows(self):
 *         data_dict = self.to_pydict()             # <<<<<<<<<<<<<<
 *         index_values = self.index.values.tolist()
 *         for index_id in range(self.row_count):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_to_pydict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_data_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2632
 *     def iterrows(self):
 *         data_dict = self.to_pydict()
 *         index_values = self.index.values.tolist()             # <<<<<<<<<<<<<<
 *         for index_id in range(self.row_count):
 *             row = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_index_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_index_values = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2633
 *         data_dict = self.to_pydict()
 *         index_values = self.index.values.tolist()
 *         for index_id in range(self.row_count):             # <<<<<<<<<<<<<<
 *             row = []
 *             for column in data_dict:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_row_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2633, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2633, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2633, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2633, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2633, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2633, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_index_id);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_index_id, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":2634
 *         index_values = self.index.values.tolist()
 *         for index_id in range(self.row_count):
 *             row = []             # <<<<<<<<<<<<<<
 *             for column in data_dict:
 *                 row.append(data_dict[column][index_id])
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_row);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_row, ((PyObject*)__pyx_t_2));
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":2635
 *         for index_id in range(self.row_count):
 *             row = []
 *             for column in data_dict:             # <<<<<<<<<<<<<<
 *                 row.append(data_dict[column][index_id])
 *             yield index_values[index_id], row
 */
    if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_data_dict)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_data_dict)) {
      __pyx_t_2 = __pyx_cur_scope->__pyx_v_data_dict; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_data_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2635, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2635, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2635, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2635, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2635, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2635, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_column);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_column, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":2636
 *             row = []
 *             for column in data_dict:
 *                 row.append(data_dict[column][index_id])             # <<<<<<<<<<<<<<
 *             yield index_values[index_id], row
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_data_dict, __pyx_cur_scope->__pyx_v_column); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_cur_scope->__pyx_v_index_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_row, __pyx_t_8); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 2636, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pycylon/data/table.pyx":2635
 *         for index_id in range(self.row_count):
 *             row = []
 *             for column in data_dict:             # <<<<<<<<<<<<<<
 *                 row.append(data_dict[column][index_id])
 *             yield index_values[index_id], row
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycylon/data/table.pyx":2637
 *             for column in data_dict:
 *                 row.append(data_dict[column][index_id])
 *             yield index_values[index_id], row             # <<<<<<<<<<<<<<
 * 
 *     def astype(self, dtype, safe=True):
 */
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_index_values, __pyx_cur_scope->__pyx_v_index_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_row);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_row);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_cur_scope->__pyx_v_row);
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2637, __pyx_L1_error)

    /* "pycylon/data/table.pyx":2633
 *         data_dict = self.to_pydict()
 *         index_values = self.index.values.tolist()
 *         for index_id in range(self.row_count):             # <<<<<<<<<<<<<<
 *             row = []
 *             for column in data_dict:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pycylon/data/table.pyx":2630
 *             raise ValueError(f"Invalid axis {axis}, must 0 or 1")
 * 
 *     def iterrows(self):             # <<<<<<<<<<<<<<
 *         data_dict = self.to_pydict()
 *         index_values = self.index.values.tolist()
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("iterrows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2639
 *             yield index_values[index_id], row
 * 
 *     def astype(self, dtype, safe=True):             # <<<<<<<<<<<<<<
 *         """
 *         This cast a table into given data type
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_190astype(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_189astype[] = "Table.astype(self, dtype, safe=True)\n\n        This cast a table into given data type\n        Args:\n            dtype: can be a dictionary or a data type\n            safe: bool  check for overflows or other unsafe conversions\n\n        Returns: PyCylon Table\n\n        Examples\n        --------\n\n        >>> tb\n                c2  c3\n            c1\n            1   20  33\n            2   30  43\n            3   40  53\n            4   50  63\n            5   51  73\n\n        >>> tb.astype(float)\n                  c2    c3\n            c1\n            1   20.0  33.0\n            2   30.0  43.0\n            3   40.0  53.0\n            4   50.0  63.0\n            5   51.0  73.0\n\n        >>> tb.astype({'c2': 'int32', 'c3': 'float64'})\n                c2    c3\n            c1\n            1   20  33.0\n            2   30  43.0\n            3   40  53.0\n            4   50  63.0\n            5   51  73.0\n\n\n        ";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_190astype(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dtype = 0;
  PyObject *__pyx_v_safe = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("astype (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dtype,&__pyx_n_s_safe,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_safe);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "astype") < 0)) __PYX_ERR(0, 2639, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dtype = values[0];
    __pyx_v_safe = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("astype", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2639, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.Table.astype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_189astype(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), __pyx_v_dtype, __pyx_v_safe);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_189astype(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, PyObject *__pyx_v_dtype, PyObject *__pyx_v_safe) {
  CYTHON_UNUSED PyObject *__pyx_v_column_names = NULL;
  PyObject *__pyx_v_artb = NULL;
  PyObject *__pyx_v_schema = NULL;
  PyObject *__pyx_v_field_id = NULL;
  PyObject *__pyx_v_field = NULL;
  PyObject *__pyx_v_expected_dtype = NULL;
  PyObject *__pyx_v_arrow_type = NULL;
  PyObject *__pyx_v_new_field = NULL;
  PyObject *__pyx_v_casted_artb = NULL;
  PyObject *__pyx_v_new_cn_table = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("astype", 0);

  /* "pycylon/data/table.pyx":2680
 * 
 *         """
 *         self.reset_index()             # <<<<<<<<<<<<<<
 *         column_names = self.column_names
 *         artb = self.to_arrow()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2681
 *         """
 *         self.reset_index()
 *         column_names = self.column_names             # <<<<<<<<<<<<<<
 *         artb = self.to_arrow()
 *         schema = artb.schema
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_column_names = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2682
 *         self.reset_index()
 *         column_names = self.column_names
 *         artb = self.to_arrow()             # <<<<<<<<<<<<<<
 *         schema = artb.schema
 *         if isinstance(dtype, dict):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_artb = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2683
 *         column_names = self.column_names
 *         artb = self.to_arrow()
 *         schema = artb.schema             # <<<<<<<<<<<<<<
 *         if isinstance(dtype, dict):
 *             for field_id, field in enumerate(schema):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_artb, __pyx_n_s_schema); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_schema = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2684
 *         artb = self.to_arrow()
 *         schema = artb.schema
 *         if isinstance(dtype, dict):             # <<<<<<<<<<<<<<
 *             for field_id, field in enumerate(schema):
 *                 try:
 */
  __pyx_t_4 = PyDict_Check(__pyx_v_dtype); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "pycylon/data/table.pyx":2685
 *         schema = artb.schema
 *         if isinstance(dtype, dict):
 *             for field_id, field in enumerate(schema):             # <<<<<<<<<<<<<<
 *                 try:
 *                     expected_dtype = dtype[field.name]
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_1 = __pyx_int_0;
    if (likely(PyList_CheckExact(__pyx_v_schema)) || PyTuple_CheckExact(__pyx_v_schema)) {
      __pyx_t_2 = __pyx_v_schema; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_schema); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2685, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2685, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2685, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2685, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2685, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2685, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_field_id, __pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "pycylon/data/table.pyx":2686
 *         if isinstance(dtype, dict):
 *             for field_id, field in enumerate(schema):
 *                 try:             # <<<<<<<<<<<<<<
 *                     expected_dtype = dtype[field.name]
 *                 except KeyError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "pycylon/data/table.pyx":2687
 *             for field_id, field in enumerate(schema):
 *                 try:
 *                     expected_dtype = dtype[field.name]             # <<<<<<<<<<<<<<
 *                 except KeyError:
 *                     continue
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_field, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2687, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_dtype, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2687, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF_SET(__pyx_v_expected_dtype, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "pycylon/data/table.pyx":2686
 *         if isinstance(dtype, dict):
 *             for field_id, field in enumerate(schema):
 *                 try:             # <<<<<<<<<<<<<<
 *                     expected_dtype = dtype[field.name]
 *                 except KeyError:
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L13_try_end;
        __pyx_L6_error:;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "pycylon/data/table.pyx":2688
 *                 try:
 *                     expected_dtype = dtype[field.name]
 *                 except KeyError:             # <<<<<<<<<<<<<<
 *                     continue
 *                 arrow_type = get_arrow_type(expected_dtype)
 */
        __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
        if (__pyx_t_12) {
          __Pyx_AddTraceback("pycylon.data.table.Table.astype", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_3, &__pyx_t_13) < 0) __PYX_ERR(0, 2688, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_13);

          /* "pycylon/data/table.pyx":2689
 *                     expected_dtype = dtype[field.name]
 *                 except KeyError:
 *                     continue             # <<<<<<<<<<<<<<
 *                 arrow_type = get_arrow_type(expected_dtype)
 *                 if arrow_type is None:
 */
          goto __pyx_L15_except_continue;
          __pyx_L15_except_continue:;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          goto __pyx_L12_try_continue;
        }
        goto __pyx_L8_except_error;
        __pyx_L8_except_error:;

        /* "pycylon/data/table.pyx":2686
 *         if isinstance(dtype, dict):
 *             for field_id, field in enumerate(schema):
 *                 try:             # <<<<<<<<<<<<<<
 *                     expected_dtype = dtype[field.name]
 *                 except KeyError:
 */
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L12_try_continue:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L4_continue;
        __pyx_L13_try_end:;
      }

      /* "pycylon/data/table.pyx":2690
 *                 except KeyError:
 *                     continue
 *                 arrow_type = get_arrow_type(expected_dtype)             # <<<<<<<<<<<<<<
 *                 if arrow_type is None:
 *                     raise ValueError(f"cast data type is not supported")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_arrow_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_13 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_v_expected_dtype) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_expected_dtype);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_arrow_type, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "pycylon/data/table.pyx":2691
 *                     continue
 *                 arrow_type = get_arrow_type(expected_dtype)
 *                 if arrow_type is None:             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"cast data type is not supported")
 *                 if field_id == 0:
 */
      __pyx_t_5 = (__pyx_v_arrow_type == Py_None);
      __pyx_t_4 = (__pyx_t_5 != 0);
      if (unlikely(__pyx_t_4)) {

        /* "pycylon/data/table.pyx":2692
 *                 arrow_type = get_arrow_type(expected_dtype)
 *                 if arrow_type is None:
 *                     raise ValueError(f"cast data type is not supported")             # <<<<<<<<<<<<<<
 *                 if field_id == 0:
 *                     new_field = field
 */
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_Raise(__pyx_t_13, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __PYX_ERR(0, 2692, __pyx_L1_error)

        /* "pycylon/data/table.pyx":2691
 *                     continue
 *                 arrow_type = get_arrow_type(expected_dtype)
 *                 if arrow_type is None:             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"cast data type is not supported")
 *                 if field_id == 0:
 */
      }

      /* "pycylon/data/table.pyx":2693
 *                 if arrow_type is None:
 *                     raise ValueError(f"cast data type is not supported")
 *                 if field_id == 0:             # <<<<<<<<<<<<<<
 *                     new_field = field
 *                 else:
 */
      __pyx_t_13 = __Pyx_PyInt_EqObjC(__pyx_v_field_id, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2693, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2693, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (__pyx_t_4) {

        /* "pycylon/data/table.pyx":2694
 *                     raise ValueError(f"cast data type is not supported")
 *                 if field_id == 0:
 *                     new_field = field             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_field = field.with_type(arrow_type)
 */
        __Pyx_INCREF(__pyx_v_field);
        __Pyx_XDECREF_SET(__pyx_v_new_field, __pyx_v_field);

        /* "pycylon/data/table.pyx":2693
 *                 if arrow_type is None:
 *                     raise ValueError(f"cast data type is not supported")
 *                 if field_id == 0:             # <<<<<<<<<<<<<<
 *                     new_field = field
 *                 else:
 */
        goto __pyx_L17;
      }

      /* "pycylon/data/table.pyx":2696
 *                     new_field = field
 *                 else:
 *                     new_field = field.with_type(arrow_type)             # <<<<<<<<<<<<<<
 *                 schema = schema.set(field_id, new_field)
 *             casted_artb = artb.cast(schema, safe)
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_field, __pyx_n_s_with_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2696, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_13 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_v_arrow_type) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_arrow_type);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2696, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_new_field, __pyx_t_13);
        __pyx_t_13 = 0;
      }
      __pyx_L17:;

      /* "pycylon/data/table.pyx":2697
 *                 else:
 *                     new_field = field.with_type(arrow_type)
 *                 schema = schema.set(field_id, new_field)             # <<<<<<<<<<<<<<
 *             casted_artb = artb.cast(schema, safe)
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_schema, __pyx_n_s_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_field_id, __pyx_v_new_field};
        __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2697, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_field_id, __pyx_v_new_field};
        __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2697, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_INCREF(__pyx_v_field_id);
        __Pyx_GIVEREF(__pyx_v_field_id);
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_12, __pyx_v_field_id);
        __Pyx_INCREF(__pyx_v_new_field);
        __Pyx_GIVEREF(__pyx_v_new_field);
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_12, __pyx_v_new_field);
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_schema, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "pycylon/data/table.pyx":2685
 *         schema = artb.schema
 *         if isinstance(dtype, dict):
 *             for field_id, field in enumerate(schema):             # <<<<<<<<<<<<<<
 *                 try:
 *                     expected_dtype = dtype[field.name]
 */
      __pyx_L4_continue:;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2698
 *                     new_field = field.with_type(arrow_type)
 *                 schema = schema.set(field_id, new_field)
 *             casted_artb = artb.cast(schema, safe)             # <<<<<<<<<<<<<<
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_artb, __pyx_n_s_cast); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_schema, __pyx_v_safe};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2698, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_schema, __pyx_v_safe};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2698, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_INCREF(__pyx_v_schema);
      __Pyx_GIVEREF(__pyx_v_schema);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_12, __pyx_v_schema);
      __Pyx_INCREF(__pyx_v_safe);
      __Pyx_GIVEREF(__pyx_v_safe);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_12, __pyx_v_safe);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_casted_artb = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2699
 *                 schema = schema.set(field_id, new_field)
 *             casted_artb = artb.cast(schema, safe)
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)             # <<<<<<<<<<<<<<
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_3, __pyx_v_casted_artb};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2699, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_3, __pyx_v_casted_artb};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2699, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_12, __pyx_t_3);
      __Pyx_INCREF(__pyx_v_casted_artb);
      __Pyx_GIVEREF(__pyx_v_casted_artb);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_12, __pyx_v_casted_artb);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_new_cn_table = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2700
 *             casted_artb = artb.cast(schema, safe)
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *             self.set_index(self.column_names[0], drop=True)
 *             return new_cn_table
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_cn_table, __pyx_n_s_set_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_cn_table, __pyx_n_s_column_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14);
    __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2700, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":2701
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *             return new_cn_table
 *         elif np.isscalar(dtype) or isinstance(dtype, type):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_14, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2701, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2702
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)
 *             return new_cn_table             # <<<<<<<<<<<<<<
 *         elif np.isscalar(dtype) or isinstance(dtype, type):
 *             arrow_type = get_arrow_type(dtype)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_new_cn_table);
    __pyx_r = __pyx_v_new_cn_table;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2684
 *         artb = self.to_arrow()
 *         schema = artb.schema
 *         if isinstance(dtype, dict):             # <<<<<<<<<<<<<<
 *             for field_id, field in enumerate(schema):
 *                 try:
 */
  }

  /* "pycylon/data/table.pyx":2703
 *             self.set_index(self.column_names[0], drop=True)
 *             return new_cn_table
 *         elif np.isscalar(dtype) or isinstance(dtype, type):             # <<<<<<<<<<<<<<
 *             arrow_type = get_arrow_type(dtype)
 *             if arrow_type is None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_2, __pyx_v_dtype) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_dtype);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2703, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_5 = PyType_Check(__pyx_v_dtype); 
  __pyx_t_15 = (__pyx_t_5 != 0);
  __pyx_t_4 = __pyx_t_15;
  __pyx_L18_bool_binop_done:;
  if (likely(__pyx_t_4)) {

    /* "pycylon/data/table.pyx":2704
 *             return new_cn_table
 *         elif np.isscalar(dtype) or isinstance(dtype, type):
 *             arrow_type = get_arrow_type(dtype)             # <<<<<<<<<<<<<<
 *             if arrow_type is None:
 *                 raise ValueError(f"cast data type is not supported")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_get_arrow_type); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_2, __pyx_v_dtype) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_dtype);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_arrow_type = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2705
 *         elif np.isscalar(dtype) or isinstance(dtype, type):
 *             arrow_type = get_arrow_type(dtype)
 *             if arrow_type is None:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"cast data type is not supported")
 *             for field_id, field in enumerate(schema):
 */
    __pyx_t_4 = (__pyx_v_arrow_type == Py_None);
    __pyx_t_15 = (__pyx_t_4 != 0);
    if (unlikely(__pyx_t_15)) {

      /* "pycylon/data/table.pyx":2706
 *             arrow_type = get_arrow_type(dtype)
 *             if arrow_type is None:
 *                 raise ValueError(f"cast data type is not supported")             # <<<<<<<<<<<<<<
 *             for field_id, field in enumerate(schema):
 *                 if field_id == 0:
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 2706, __pyx_L1_error)

      /* "pycylon/data/table.pyx":2705
 *         elif np.isscalar(dtype) or isinstance(dtype, type):
 *             arrow_type = get_arrow_type(dtype)
 *             if arrow_type is None:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"cast data type is not supported")
 *             for field_id, field in enumerate(schema):
 */
    }

    /* "pycylon/data/table.pyx":2707
 *             if arrow_type is None:
 *                 raise ValueError(f"cast data type is not supported")
 *             for field_id, field in enumerate(schema):             # <<<<<<<<<<<<<<
 *                 if field_id == 0:
 *                     new_field = field
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_1 = __pyx_int_0;
    if (likely(PyList_CheckExact(__pyx_v_schema)) || PyTuple_CheckExact(__pyx_v_schema)) {
      __pyx_t_14 = __pyx_v_schema; __Pyx_INCREF(__pyx_t_14); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_v_schema); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_7 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2707, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_14))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_14)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2707, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_14, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2707, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2707, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_14, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2707, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_14);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2707, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_field_id, __pyx_t_1);
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":2708
 *                 raise ValueError(f"cast data type is not supported")
 *             for field_id, field in enumerate(schema):
 *                 if field_id == 0:             # <<<<<<<<<<<<<<
 *                     new_field = field
 *                 else:
 */
      __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_field_id, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 2708, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_15) {

        /* "pycylon/data/table.pyx":2709
 *             for field_id, field in enumerate(schema):
 *                 if field_id == 0:
 *                     new_field = field             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_field = field.with_type(arrow_type)
 */
        __Pyx_INCREF(__pyx_v_field);
        __Pyx_XDECREF_SET(__pyx_v_new_field, __pyx_v_field);

        /* "pycylon/data/table.pyx":2708
 *                 raise ValueError(f"cast data type is not supported")
 *             for field_id, field in enumerate(schema):
 *                 if field_id == 0:             # <<<<<<<<<<<<<<
 *                     new_field = field
 *                 else:
 */
        goto __pyx_L23;
      }

      /* "pycylon/data/table.pyx":2711
 *                     new_field = field
 *                 else:
 *                     new_field = field.with_type(arrow_type)             # <<<<<<<<<<<<<<
 *                 schema = schema.set(field_id, new_field)
 *             casted_artb = artb.cast(schema, safe)
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_field, __pyx_n_s_with_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2711, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_13, __pyx_v_arrow_type) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_arrow_type);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2711, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_new_field, __pyx_t_2);
        __pyx_t_2 = 0;
      }
      __pyx_L23:;

      /* "pycylon/data/table.pyx":2712
 *                 else:
 *                     new_field = field.with_type(arrow_type)
 *                 schema = schema.set(field_id, new_field)             # <<<<<<<<<<<<<<
 *             casted_artb = artb.cast(schema, safe)
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_schema, __pyx_n_s_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2712, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_field_id, __pyx_v_new_field};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2712, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_field_id, __pyx_v_new_field};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2712, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_13) {
          __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_13); __pyx_t_13 = NULL;
        }
        __Pyx_INCREF(__pyx_v_field_id);
        __Pyx_GIVEREF(__pyx_v_field_id);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_12, __pyx_v_field_id);
        __Pyx_INCREF(__pyx_v_new_field);
        __Pyx_GIVEREF(__pyx_v_new_field);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_12, __pyx_v_new_field);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_schema, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pycylon/data/table.pyx":2707
 *             if arrow_type is None:
 *                 raise ValueError(f"cast data type is not supported")
 *             for field_id, field in enumerate(schema):             # <<<<<<<<<<<<<<
 *                 if field_id == 0:
 *                     new_field = field
 */
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2713
 *                     new_field = field.with_type(arrow_type)
 *                 schema = schema.set(field_id, new_field)
 *             casted_artb = artb.cast(schema, safe)             # <<<<<<<<<<<<<<
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_artb, __pyx_n_s_cast); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_2 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_schema, __pyx_v_safe};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2713, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_schema, __pyx_v_safe};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2713, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2713, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_schema);
      __Pyx_GIVEREF(__pyx_v_schema);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_12, __pyx_v_schema);
      __Pyx_INCREF(__pyx_v_safe);
      __Pyx_GIVEREF(__pyx_v_safe);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_12, __pyx_v_safe);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2713, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_casted_artb = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2714
 *                 schema = schema.set(field_id, new_field)
 *             casted_artb = artb.cast(schema, safe)
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)             # <<<<<<<<<<<<<<
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_3, __pyx_v_casted_artb};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2714, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_3, __pyx_v_casted_artb};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2714, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_12, __pyx_t_3);
      __Pyx_INCREF(__pyx_v_casted_artb);
      __Pyx_GIVEREF(__pyx_v_casted_artb);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_12, __pyx_v_casted_artb);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_new_cn_table = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2715
 *             casted_artb = artb.cast(schema, safe)
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *             self.set_index(self.column_names[0], drop=True)
 *             return new_cn_table
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_cn_table, __pyx_n_s_set_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_cn_table, __pyx_n_s_column_names); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_14, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2715, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pycylon/data/table.pyx":2716
 *             new_cn_table = Table.from_arrow(self.context, casted_artb)
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *             return new_cn_table
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_column_names); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_14);
    __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2716, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2717
 *             new_cn_table.set_index(new_cn_table.column_names[0], drop=True)
 *             self.set_index(self.column_names[0], drop=True)
 *             return new_cn_table             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Unsupported data type representation")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_new_cn_table);
    __pyx_r = __pyx_v_new_cn_table;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2703
 *             self.set_index(self.column_names[0], drop=True)
 *             return new_cn_table
 *         elif np.isscalar(dtype) or isinstance(dtype, type):             # <<<<<<<<<<<<<<
 *             arrow_type = get_arrow_type(dtype)
 *             if arrow_type is None:
 */
  }

  /* "pycylon/data/table.pyx":2719
 *             return new_cn_table
 *         else:
 *             raise ValueError("Unsupported data type representation")             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self) -> int:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2719, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":2639
 *             yield index_values[index_id], row
 * 
 *     def astype(self, dtype, safe=True):             # <<<<<<<<<<<<<<
 *         """
 *         This cast a table into given data type
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pycylon.data.table.Table.astype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_names);
  __Pyx_XDECREF(__pyx_v_artb);
  __Pyx_XDECREF(__pyx_v_schema);
  __Pyx_XDECREF(__pyx_v_field_id);
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_expected_dtype);
  __Pyx_XDECREF(__pyx_v_arrow_type);
  __Pyx_XDECREF(__pyx_v_new_field);
  __Pyx_XDECREF(__pyx_v_casted_artb);
  __Pyx_XDECREF(__pyx_v_new_cn_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2721
 *             raise ValueError("Unsupported data type representation")
 * 
 *     def __len__(self) -> int:             # <<<<<<<<<<<<<<
 *         return self.row_count
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7pycylon_4data_5table_5Table_192__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7pycylon_4data_5table_5Table_192__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_191__len__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7pycylon_4data_5table_5Table_191__len__(struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pycylon/data/table.pyx":2722
 * 
 *     def __len__(self) -> int:
 *         return self.row_count             # <<<<<<<<<<<<<<
 * 
 * def _concat_impl(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort',
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_row_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "pycylon/data/table.pyx":2721
 *             raise ValueError("Unsupported data type representation")
 * 
 *     def __len__(self) -> int:             # <<<<<<<<<<<<<<
 *         return self.row_count
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_194__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_193__reduce_cython__[] = "Table.__reduce_cython__(self)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_194__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_193__reduce_cython__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_193__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_196__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_5Table_195__setstate_cython__[] = "Table.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7pycylon_4data_5table_5Table_196__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_5Table_195__setstate_cython__(((struct __pyx_obj_7pycylon_4data_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_5Table_195__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_Table *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.Table.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2724
 *         return self.row_count
 * 
 * def _concat_impl(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort',             # <<<<<<<<<<<<<<
 *                  axis1_join_func: str = 'join'):
 *     # row-wise concat -> locally stacking up tables
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_1_concat_impl(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table__concat_impl[] = "_concat_impl(tables: List[Table], axis: int = 0, unicode join: str = u'inner', unicode algorithm: str = u'sort', unicode axis1_join_func: str = u'join')";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_1_concat_impl = {"_concat_impl", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_1_concat_impl, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table__concat_impl};
static PyObject *__pyx_pw_7pycylon_4data_5table_1_concat_impl(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tables = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_join = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_axis1_join_func = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_concat_impl (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tables,&__pyx_n_s_axis,&__pyx_n_s_join,&__pyx_n_s_algorithm,&__pyx_n_s_axis1_join_func,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject*)__pyx_n_u_inner);
    values[3] = ((PyObject*)__pyx_n_u_sort);
    values[4] = ((PyObject*)__pyx_n_u_join);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_join);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis1_join_func);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_concat_impl") < 0)) __PYX_ERR(0, 2724, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tables = values[0];
    __pyx_v_axis = values[1];
    __pyx_v_join = ((PyObject*)values[2]);
    __pyx_v_algorithm = ((PyObject*)values[3]);
    __pyx_v_axis1_join_func = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_concat_impl", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2724, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table._concat_impl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_join), (&PyUnicode_Type), 1, "join", 1))) __PYX_ERR(0, 2724, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_algorithm), (&PyUnicode_Type), 1, "algorithm", 1))) __PYX_ERR(0, 2724, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_axis1_join_func), (&PyUnicode_Type), 1, "axis1_join_func", 1))) __PYX_ERR(0, 2725, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table__concat_impl(__pyx_self, __pyx_v_tables, __pyx_v_axis, __pyx_v_join, __pyx_v_algorithm, __pyx_v_axis1_join_func);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table__concat_impl(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tables, PyObject *__pyx_v_axis, PyObject *__pyx_v_join, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_axis1_join_func) {
  PyObject *__pyx_v_res_table = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_formatted_tables = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_new_column_names = NULL;
  Py_ssize_t __pyx_v_tb_idx;
  PyObject *__pyx_v_tb1 = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ctx = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_concat_impl", 0);

  /* "pycylon/data/table.pyx":2727
 *                  axis1_join_func: str = 'join'):
 *     # row-wise concat -> locally stacking up tables
 *     if axis == 0:             # <<<<<<<<<<<<<<
 *         res_table = tables[0]
 *         if not isinstance(res_table, Table):
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_axis, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pycylon/data/table.pyx":2728
 *     # row-wise concat -> locally stacking up tables
 *     if axis == 0:
 *         res_table = tables[0]             # <<<<<<<<<<<<<<
 *         if not isinstance(res_table, Table):
 *             raise ValueError(f"Invalid object {res_table}, expected Table")
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_res_table = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2729
 *     if axis == 0:
 *         res_table = tables[0]
 *         if not isinstance(res_table, Table):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Invalid object {res_table}, expected Table")
 *         formatted_tables = []
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_res_table, __pyx_ptype_7pycylon_4data_5table_Table); 
    __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
    if (unlikely(__pyx_t_3)) {

      /* "pycylon/data/table.pyx":2730
 *         res_table = tables[0]
 *         if not isinstance(res_table, Table):
 *             raise ValueError(f"Invalid object {res_table}, expected Table")             # <<<<<<<<<<<<<<
 *         formatted_tables = []
 *         new_column_names = res_table.column_names
 */
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_object);
      __pyx_t_4 += 15;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_object);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_object);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_res_table, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_expected_Table);
      __pyx_t_4 += 16;
      __Pyx_GIVEREF(__pyx_kp_u_expected_Table);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_expected_Table);
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 2730, __pyx_L1_error)

      /* "pycylon/data/table.pyx":2729
 *     if axis == 0:
 *         res_table = tables[0]
 *         if not isinstance(res_table, Table):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Invalid object {res_table}, expected Table")
 *         formatted_tables = []
 */
    }

    /* "pycylon/data/table.pyx":2731
 *         if not isinstance(res_table, Table):
 *             raise ValueError(f"Invalid object {res_table}, expected Table")
 *         formatted_tables = []             # <<<<<<<<<<<<<<
 *         new_column_names = res_table.column_names
 *         for tb_idx in range(len(tables)):
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_formatted_tables = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2732
 *             raise ValueError(f"Invalid object {res_table}, expected Table")
 *         formatted_tables = []
 *         new_column_names = res_table.column_names             # <<<<<<<<<<<<<<
 *         for tb_idx in range(len(tables)):
 *             tb1 = tables[tb_idx]
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_res_table, __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_new_column_names = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2733
 *         formatted_tables = []
 *         new_column_names = res_table.column_names
 *         for tb_idx in range(len(tables)):             # <<<<<<<<<<<<<<
 *             tb1 = tables[tb_idx]
 *             tb1.reset_index()
 */
    __pyx_t_4 = PyObject_Length(__pyx_v_tables); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2733, __pyx_L1_error)
    __pyx_t_7 = __pyx_t_4;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_tb_idx = __pyx_t_8;

      /* "pycylon/data/table.pyx":2734
 *         new_column_names = res_table.column_names
 *         for tb_idx in range(len(tables)):
 *             tb1 = tables[tb_idx]             # <<<<<<<<<<<<<<
 *             tb1.reset_index()
 *         res_table = Table.merge(tables)
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tables, __pyx_v_tb_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_tb1, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pycylon/data/table.pyx":2735
 *         for tb_idx in range(len(tables)):
 *             tb1 = tables[tb_idx]
 *             tb1.reset_index()             # <<<<<<<<<<<<<<
 *         res_table = Table.merge(tables)
 *         res_table.set_index(res_table.column_names[0], drop=True)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb1, __pyx_n_s_reset_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "pycylon/data/table.pyx":2736
 *             tb1 = tables[tb_idx]
 *             tb1.reset_index()
 *         res_table = Table.merge(tables)             # <<<<<<<<<<<<<<
 *         res_table.set_index(res_table.column_names[0], drop=True)
 *         for tb_idx in range(len(tables)):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table), __pyx_n_s_merge); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_9, __pyx_v_tables) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_tables);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_res_table, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pycylon/data/table.pyx":2737
 *             tb1.reset_index()
 *         res_table = Table.merge(tables)
 *         res_table.set_index(res_table.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *         for tb_idx in range(len(tables)):
 *             tb1 = tables[tb_idx]
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_res_table, __pyx_n_s_set_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_res_table, __pyx_n_s_column_names); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2737, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pycylon/data/table.pyx":2738
 *         res_table = Table.merge(tables)
 *         res_table.set_index(res_table.column_names[0], drop=True)
 *         for tb_idx in range(len(tables)):             # <<<<<<<<<<<<<<
 *             tb1 = tables[tb_idx]
 *             tb1.set_index(tb1.column_names[0], drop=True)
 */
    __pyx_t_4 = PyObject_Length(__pyx_v_tables); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2738, __pyx_L1_error)
    __pyx_t_7 = __pyx_t_4;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_tb_idx = __pyx_t_8;

      /* "pycylon/data/table.pyx":2739
 *         res_table.set_index(res_table.column_names[0], drop=True)
 *         for tb_idx in range(len(tables)):
 *             tb1 = tables[tb_idx]             # <<<<<<<<<<<<<<
 *             tb1.set_index(tb1.column_names[0], drop=True)
 *         return res_table
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_tables, __pyx_v_tb_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2739, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_tb1, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "pycylon/data/table.pyx":2740
 *         for tb_idx in range(len(tables)):
 *             tb1 = tables[tb_idx]
 *             tb1.set_index(tb1.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *         return res_table
 *     elif axis == 1:
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb1, __pyx_n_s_set_index); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb1, __pyx_n_s_column_names); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2740, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "pycylon/data/table.pyx":2741
 *             tb1 = tables[tb_idx]
 *             tb1.set_index(tb1.column_names[0], drop=True)
 *         return res_table             # <<<<<<<<<<<<<<
 *     elif axis == 1:
 *         if not isinstance(tables[0], Table):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_res_table);
    __pyx_r = __pyx_v_res_table;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2727
 *                  axis1_join_func: str = 'join'):
 *     # row-wise concat -> locally stacking up tables
 *     if axis == 0:             # <<<<<<<<<<<<<<
 *         res_table = tables[0]
 *         if not isinstance(res_table, Table):
 */
  }

  /* "pycylon/data/table.pyx":2742
 *             tb1.set_index(tb1.column_names[0], drop=True)
 *         return res_table
 *     elif axis == 1:             # <<<<<<<<<<<<<<
 *         if not isinstance(tables[0], Table):
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_axis, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2742, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3)) {

    /* "pycylon/data/table.pyx":2743
 *         return res_table
 *     elif axis == 1:
 *         if not isinstance(tables[0], Table):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 *         ctx = tables[0].context
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_7pycylon_4data_5table_Table); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "pycylon/data/table.pyx":2744
 *     elif axis == 1:
 *         if not isinstance(tables[0], Table):
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")             # <<<<<<<<<<<<<<
 *         ctx = tables[0].context
 *         res_table = tables[0]
 */
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_object);
      __pyx_t_4 += 15;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_object);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_object);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_5;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u_Table_expected);
      __pyx_t_4 += 16;
      __Pyx_GIVEREF(__pyx_kp_u_Table_expected);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Table_expected);
      __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 2744, __pyx_L1_error)

      /* "pycylon/data/table.pyx":2743
 *         return res_table
 *     elif axis == 1:
 *         if not isinstance(tables[0], Table):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 *         ctx = tables[0].context
 */
    }

    /* "pycylon/data/table.pyx":2745
 *         if not isinstance(tables[0], Table):
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 *         ctx = tables[0].context             # <<<<<<<<<<<<<<
 *         res_table = tables[0]
 *         for i in range(1, len(tables)):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_context); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ctx = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pycylon/data/table.pyx":2746
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 *         ctx = tables[0].context
 *         res_table = tables[0]             # <<<<<<<<<<<<<<
 *         for i in range(1, len(tables)):
 *             tb1 = tables[i]
 */
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_v_res_table = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pycylon/data/table.pyx":2747
 *         ctx = tables[0].context
 *         res_table = tables[0]
 *         for i in range(1, len(tables)):             # <<<<<<<<<<<<<<
 *             tb1 = tables[i]
 *             if not isinstance(tb1, Table):
 */
    __pyx_t_4 = PyObject_Length(__pyx_v_tables); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2747, __pyx_L1_error)
    __pyx_t_7 = __pyx_t_4;
    for (__pyx_t_8 = 1; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "pycylon/data/table.pyx":2748
 *         res_table = tables[0]
 *         for i in range(1, len(tables)):
 *             tb1 = tables[i]             # <<<<<<<<<<<<<<
 *             if not isinstance(tb1, Table):
 *                 raise ValueError(f"Invalid object {tb1}, expected Table")
 */
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_tables, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2748, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_tb1, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "pycylon/data/table.pyx":2749
 *         for i in range(1, len(tables)):
 *             tb1 = tables[i]
 *             if not isinstance(tb1, Table):             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"Invalid object {tb1}, expected Table")
 *             tb1.reset_index()
 */
      __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_tb1, __pyx_ptype_7pycylon_4data_5table_Table); 
      __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
      if (unlikely(__pyx_t_3)) {

        /* "pycylon/data/table.pyx":2750
 *             tb1 = tables[i]
 *             if not isinstance(tb1, Table):
 *                 raise ValueError(f"Invalid object {tb1}, expected Table")             # <<<<<<<<<<<<<<
 *             tb1.reset_index()
 *             res_table.reset_index()
 */
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = 0;
        __pyx_t_5 = 127;
        __Pyx_INCREF(__pyx_kp_u_Invalid_object);
        __pyx_t_11 += 15;
        __Pyx_GIVEREF(__pyx_kp_u_Invalid_object);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_Invalid_object);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_tb1, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_5;
        __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_expected_Table);
        __pyx_t_11 += 16;
        __Pyx_GIVEREF(__pyx_kp_u_expected_Table);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_expected_Table);
        __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_9, 3, __pyx_t_11, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 2750, __pyx_L1_error)

        /* "pycylon/data/table.pyx":2749
 *         for i in range(1, len(tables)):
 *             tb1 = tables[i]
 *             if not isinstance(tb1, Table):             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"Invalid object {tb1}, expected Table")
 *             tb1.reset_index()
 */
      }

      /* "pycylon/data/table.pyx":2751
 *             if not isinstance(tb1, Table):
 *                 raise ValueError(f"Invalid object {tb1}, expected Table")
 *             tb1.reset_index()             # <<<<<<<<<<<<<<
 *             res_table.reset_index()
 *             # call method name by string
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb1, __pyx_n_s_reset_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_9 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "pycylon/data/table.pyx":2752
 *                 raise ValueError(f"Invalid object {tb1}, expected Table")
 *             tb1.reset_index()
 *             res_table.reset_index()             # <<<<<<<<<<<<<<
 *             # call method name by string
 *             res_table = getattr(res_table, axis1_join_func)(table=tb1, join_type=join,
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_res_table, __pyx_n_s_reset_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_9 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "pycylon/data/table.pyx":2754
 *             res_table.reset_index()
 *             # call method name by string
 *             res_table = getattr(res_table, axis1_join_func)(table=tb1, join_type=join,             # <<<<<<<<<<<<<<
 *                                                             algorithm=algorithm,
 *                                                             left_on=[res_table.column_names[0]],
 */
      __pyx_t_9 = __Pyx_GetAttr(__pyx_v_res_table, __pyx_v_axis1_join_func); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_table, __pyx_v_tb1) < 0) __PYX_ERR(0, 2754, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_join_type, __pyx_v_join) < 0) __PYX_ERR(0, 2754, __pyx_L1_error)

      /* "pycylon/data/table.pyx":2755
 *             # call method name by string
 *             res_table = getattr(res_table, axis1_join_func)(table=tb1, join_type=join,
 *                                                             algorithm=algorithm,             # <<<<<<<<<<<<<<
 *                                                             left_on=[res_table.column_names[0]],
 *                                                             right_on=[tb1.column_names[0]])
 */
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_algorithm, __pyx_v_algorithm) < 0) __PYX_ERR(0, 2754, __pyx_L1_error)

      /* "pycylon/data/table.pyx":2756
 *             res_table = getattr(res_table, axis1_join_func)(table=tb1, join_type=join,
 *                                                             algorithm=algorithm,
 *                                                             left_on=[res_table.column_names[0]],             # <<<<<<<<<<<<<<
 *                                                             right_on=[tb1.column_names[0]])
 *             res_table.set_index(res_table.column_names[0], drop=True)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_res_table, __pyx_n_s_column_names); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_10);
      __pyx_t_10 = 0;
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_left_on, __pyx_t_6) < 0) __PYX_ERR(0, 2754, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pycylon/data/table.pyx":2757
 *                                                             algorithm=algorithm,
 *                                                             left_on=[res_table.column_names[0]],
 *                                                             right_on=[tb1.column_names[0]])             # <<<<<<<<<<<<<<
 *             res_table.set_index(res_table.column_names[0], drop=True)
 *             res_table.drop([tb1.column_names[0]], inplace=True)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb1, __pyx_n_s_column_names); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_10);
      __pyx_t_10 = 0;
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_right_on, __pyx_t_6) < 0) __PYX_ERR(0, 2754, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pycylon/data/table.pyx":2754
 *             res_table.reset_index()
 *             # call method name by string
 *             res_table = getattr(res_table, axis1_join_func)(table=tb1, join_type=join,             # <<<<<<<<<<<<<<
 *                                                             algorithm=algorithm,
 *                                                             left_on=[res_table.column_names[0]],
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_res_table, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "pycylon/data/table.pyx":2758
 *                                                             left_on=[res_table.column_names[0]],
 *                                                             right_on=[tb1.column_names[0]])
 *             res_table.set_index(res_table.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *             res_table.drop([tb1.column_names[0]], inplace=True)
 *             tb1.set_index(tb1.column_names[0], drop=True)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_res_table, __pyx_n_s_set_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_res_table, __pyx_n_s_column_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2758, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "pycylon/data/table.pyx":2759
 *                                                             right_on=[tb1.column_names[0]])
 *             res_table.set_index(res_table.column_names[0], drop=True)
 *             res_table.drop([tb1.column_names[0]], inplace=True)             # <<<<<<<<<<<<<<
 *             tb1.set_index(tb1.column_names[0], drop=True)
 *         tables[0].set_index(tables[0].column_names[0], drop=True)
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_res_table, __pyx_n_s_drop); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb1, __pyx_n_s_column_names); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_inplace, Py_True) < 0) __PYX_ERR(0, 2759, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pycylon/data/table.pyx":2760
 *             res_table.set_index(res_table.column_names[0], drop=True)
 *             res_table.drop([tb1.column_names[0]], inplace=True)
 *             tb1.set_index(tb1.column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *         tables[0].set_index(tables[0].column_names[0], drop=True)
 *         return res_table
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb1, __pyx_n_s_set_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_tb1, __pyx_n_s_column_names); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2760, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }

    /* "pycylon/data/table.pyx":2761
 *             res_table.drop([tb1.column_names[0]], inplace=True)
 *             tb1.set_index(tb1.column_names[0], drop=True)
 *         tables[0].set_index(tables[0].column_names[0], drop=True)             # <<<<<<<<<<<<<<
 *         return res_table
 *     else:
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_set_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_tables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_column_names); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_drop, Py_True) < 0) __PYX_ERR(0, 2761, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pycylon/data/table.pyx":2762
 *             tb1.set_index(tb1.column_names[0], drop=True)
 *         tables[0].set_index(tables[0].column_names[0], drop=True)
 *         return res_table             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError(f"Invalid axis {axis}, must 0 or 1")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_res_table);
    __pyx_r = __pyx_v_res_table;
    goto __pyx_L0;

    /* "pycylon/data/table.pyx":2742
 *             tb1.set_index(tb1.column_names[0], drop=True)
 *         return res_table
 *     elif axis == 1:             # <<<<<<<<<<<<<<
 *         if not isinstance(tables[0], Table):
 *             raise ValueError(f"Invalid object {tables[0]}, Table expected")
 */
  }

  /* "pycylon/data/table.pyx":2764
 *         return res_table
 *     else:
 *         raise ValueError(f"Invalid axis {axis}, must 0 or 1")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
    __pyx_t_4 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Invalid_axis);
    __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_v_axis, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_INCREF(__pyx_kp_u_must_0_or_1);
    __pyx_t_4 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_must_0_or_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_must_0_or_1);
    __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_6, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2764, __pyx_L1_error)
  }

  /* "pycylon/data/table.pyx":2724
 *         return self.row_count
 * 
 * def _concat_impl(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort',             # <<<<<<<<<<<<<<
 *                  axis1_join_func: str = 'join'):
 *     # row-wise concat -> locally stacking up tables
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pycylon.data.table._concat_impl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res_table);
  __Pyx_XDECREF(__pyx_v_formatted_tables);
  __Pyx_XDECREF(__pyx_v_new_column_names);
  __Pyx_XDECREF(__pyx_v_tb1);
  __Pyx_XDECREF(__pyx_v_ctx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2775
 *     '''
 * 
 *     def __init__(self, context: CylonContext, index: RangeIndex):             # <<<<<<<<<<<<<<
 *         self.ctx = context
 *         self.idx = index
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_10EmptyTable_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_10EmptyTable___init__[] = "EmptyTable.__init__(self, context: CylonContext, index: RangeIndex)";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_10EmptyTable_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_10EmptyTable_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_10EmptyTable___init__};
static PyObject *__pyx_pw_7pycylon_4data_5table_10EmptyTable_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_context,&__pyx_n_s_index_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 2775, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 2775, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2775, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_context = values[1];
    __pyx_v_index = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2775, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.EmptyTable.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pycylon_4data_5table_10EmptyTable___init__(__pyx_self, __pyx_v_self, __pyx_v_context, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_10EmptyTable___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_context, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pycylon/data/table.pyx":2776
 * 
 *     def __init__(self, context: CylonContext, index: RangeIndex):
 *         self.ctx = context             # <<<<<<<<<<<<<<
 *         self.idx = index
 *         self._empty_initialize()
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_ctx, __pyx_v_context) < 0) __PYX_ERR(0, 2776, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2777
 *     def __init__(self, context: CylonContext, index: RangeIndex):
 *         self.ctx = context
 *         self.idx = index             # <<<<<<<<<<<<<<
 *         self._empty_initialize()
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_idx, __pyx_v_index) < 0) __PYX_ERR(0, 2777, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2778
 *         self.ctx = context
 *         self.idx = index
 *         self._empty_initialize()             # <<<<<<<<<<<<<<
 * 
 *     def _empty_initialize(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_empty_initialize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2775
 *     '''
 * 
 *     def __init__(self, context: CylonContext, index: RangeIndex):             # <<<<<<<<<<<<<<
 *         self.ctx = context
 *         self.idx = index
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycylon.data.table.EmptyTable.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2780
 *         self._empty_initialize()
 * 
 *     def _empty_initialize(self):             # <<<<<<<<<<<<<<
 *         empty_data = []
 *         self.initialize(pa.Table.from_arrays([], []), self.ctx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_10EmptyTable_3_empty_initialize(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_10EmptyTable_2_empty_initialize[] = "EmptyTable._empty_initialize(self)";
static PyMethodDef __pyx_mdef_7pycylon_4data_5table_10EmptyTable_3_empty_initialize = {"_empty_initialize", (PyCFunction)__pyx_pw_7pycylon_4data_5table_10EmptyTable_3_empty_initialize, METH_O, __pyx_doc_7pycylon_4data_5table_10EmptyTable_2_empty_initialize};
static PyObject *__pyx_pw_7pycylon_4data_5table_10EmptyTable_3_empty_initialize(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_empty_initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_10EmptyTable_2_empty_initialize(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_10EmptyTable_2_empty_initialize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_v_empty_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_empty_initialize", 0);

  /* "pycylon/data/table.pyx":2781
 * 
 *     def _empty_initialize(self):
 *         empty_data = []             # <<<<<<<<<<<<<<
 *         self.initialize(pa.Table.from_arrays([], []), self.ctx)
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_empty_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2782
 *     def _empty_initialize(self):
 *         empty_data = []
 *         self.initialize(pa.Table.from_arrays([], []), self.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_initialize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pa); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Table); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2782, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2782, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ctx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2782, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2782, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":2780
 *         self._empty_initialize()
 * 
 *     def _empty_initialize(self):             # <<<<<<<<<<<<<<
 *         empty_data = []
 *         self.initialize(pa.Table.from_arrays([], []), self.ctx)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycylon.data.table.EmptyTable._empty_initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_empty_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2789
 *     Sort Operations for Distributed Sort
 *     """
 *     def __cinit__(self, num_bins: int = 0, num_samples: int = 0, sampling: str = 'regular'):             # <<<<<<<<<<<<<<
 *         '''
 *         Initializes the CSortOptions struct
 */

/* Python wrapper */
static int __pyx_pw_7pycylon_4data_5table_11SortOptions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pycylon_4data_5table_11SortOptions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_num_bins = 0;
  PyObject *__pyx_v_num_samples = 0;
  PyObject *__pyx_v_sampling = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num_bins,&__pyx_n_s_num_samples,&__pyx_n_s_sampling,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject*)__pyx_n_u_regular);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_bins);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_samples);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sampling);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2789, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_num_bins = values[0];
    __pyx_v_num_samples = values[1];
    __pyx_v_sampling = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2789, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycylon.data.table.SortOptions.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sampling), (&PyUnicode_Type), 1, "sampling", 1))) __PYX_ERR(0, 2789, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pycylon_4data_5table_11SortOptions___cinit__(((struct __pyx_obj_7pycylon_4data_5table_SortOptions *)__pyx_v_self), __pyx_v_num_bins, __pyx_v_num_samples, __pyx_v_sampling);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pycylon_4data_5table_11SortOptions___cinit__(struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_self, PyObject *__pyx_v_num_bins, PyObject *__pyx_v_num_samples, PyObject *__pyx_v_sampling) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<cylon::SortOptions>  __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_sampling);

  /* "pycylon/data/table.pyx":2799
 * 
 *         '''
 *         self.thisPtr = make_shared[CSortOptions]()             # <<<<<<<<<<<<<<
 *         self.thisPtr.get().num_bins = num_bins
 *         self.thisPtr.get().num_samples = num_samples
 */
  try {
    __pyx_t_1 = std::make_shared<cylon::SortOptions>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2799, __pyx_L1_error)
  }
  __pyx_v_self->thisPtr = __pyx_t_1;

  /* "pycylon/data/table.pyx":2800
 *         '''
 *         self.thisPtr = make_shared[CSortOptions]()
 *         self.thisPtr.get().num_bins = num_bins             # <<<<<<<<<<<<<<
 *         self.thisPtr.get().num_samples = num_samples
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_num_bins); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2800, __pyx_L1_error)
  __pyx_v_self->thisPtr.get()->num_bins = __pyx_t_2;

  /* "pycylon/data/table.pyx":2801
 *         self.thisPtr = make_shared[CSortOptions]()
 *         self.thisPtr.get().num_bins = num_bins
 *         self.thisPtr.get().num_samples = num_samples             # <<<<<<<<<<<<<<
 * 
 *         sampling = sampling.lower()
 */
  __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_v_num_samples); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2801, __pyx_L1_error)
  __pyx_v_self->thisPtr.get()->num_samples = __pyx_t_3;

  /* "pycylon/data/table.pyx":2803
 *         self.thisPtr.get().num_samples = num_samples
 * 
 *         sampling = sampling.lower()             # <<<<<<<<<<<<<<
 *         if sampling == 'regular':
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CREGULAR_SAMPLE
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sampling, __pyx_n_s_lower); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 2803, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_sampling, ((PyObject*)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "pycylon/data/table.pyx":2804
 * 
 *         sampling = sampling.lower()
 *         if sampling == 'regular':             # <<<<<<<<<<<<<<
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CREGULAR_SAMPLE
 *         elif sampling == 'initial':
 */
  __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_sampling, __pyx_n_u_regular, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2804, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "pycylon/data/table.pyx":2805
 *         sampling = sampling.lower()
 *         if sampling == 'regular':
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CREGULAR_SAMPLE             # <<<<<<<<<<<<<<
 *         elif sampling == 'initial':
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CINITIAL_SAMPLE
 */
    __pyx_v_self->thisPtr.get()->sort_method = cylon::SortOptions::SortMethod::REGULAR_SAMPLE;

    /* "pycylon/data/table.pyx":2804
 * 
 *         sampling = sampling.lower()
 *         if sampling == 'regular':             # <<<<<<<<<<<<<<
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CREGULAR_SAMPLE
 *         elif sampling == 'initial':
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":2806
 *         if sampling == 'regular':
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CREGULAR_SAMPLE
 *         elif sampling == 'initial':             # <<<<<<<<<<<<<<
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CINITIAL_SAMPLE
 *         else:
 */
  __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_v_sampling, __pyx_n_u_initial, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2806, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_8 != 0);
  if (likely(__pyx_t_7)) {

    /* "pycylon/data/table.pyx":2807
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CREGULAR_SAMPLE
 *         elif sampling == 'initial':
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CINITIAL_SAMPLE             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f'unknown sampling method for sorting: {sampling}')
 */
    __pyx_v_self->thisPtr.get()->sort_method = cylon::SortOptions::SortMethod::INITIAL_SAMPLE;

    /* "pycylon/data/table.pyx":2806
 *         if sampling == 'regular':
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CREGULAR_SAMPLE
 *         elif sampling == 'initial':             # <<<<<<<<<<<<<<
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CINITIAL_SAMPLE
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pycylon/data/table.pyx":2809
 *             self.thisPtr.get().sort_method = CSortOptions.CSortMethod.CINITIAL_SAMPLE
 *         else:
 *             raise ValueError(f'unknown sampling method for sorting: {sampling}')             # <<<<<<<<<<<<<<
 * 
 *     cdef void init(self, const shared_ptr[CSortOptions] &csort_options):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_sampling); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_unknown_sampling_method_for_sort, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 2809, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pycylon/data/table.pyx":2789
 *     Sort Operations for Distributed Sort
 *     """
 *     def __cinit__(self, num_bins: int = 0, num_samples: int = 0, sampling: str = 'regular'):             # <<<<<<<<<<<<<<
 *         '''
 *         Initializes the CSortOptions struct
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycylon.data.table.SortOptions.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sampling);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycylon/data/table.pyx":2811
 *             raise ValueError(f'unknown sampling method for sorting: {sampling}')
 * 
 *     cdef void init(self, const shared_ptr[CSortOptions] &csort_options):             # <<<<<<<<<<<<<<
 *         self.thisPtr = csort_options
 */

static void __pyx_f_7pycylon_4data_5table_11SortOptions_init(struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_self, std::shared_ptr<cylon::SortOptions>  const &__pyx_v_csort_options) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pycylon/data/table.pyx":2812
 * 
 *     cdef void init(self, const shared_ptr[CSortOptions] &csort_options):
 *         self.thisPtr = csort_options             # <<<<<<<<<<<<<<
 */
  __pyx_v_self->thisPtr = __pyx_v_csort_options;

  /* "pycylon/data/table.pyx":2811
 *             raise ValueError(f'unknown sampling method for sorting: {sampling}')
 * 
 *     cdef void init(self, const shared_ptr[CSortOptions] &csort_options):             # <<<<<<<<<<<<<<
 *         self.thisPtr = csort_options
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_11SortOptions_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_11SortOptions_2__reduce_cython__[] = "SortOptions.__reduce_cython__(self)";
static PyObject *__pyx_pw_7pycylon_4data_5table_11SortOptions_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_11SortOptions_2__reduce_cython__(((struct __pyx_obj_7pycylon_4data_5table_SortOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_11SortOptions_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.SortOptions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pycylon_4data_5table_11SortOptions_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7pycylon_4data_5table_11SortOptions_4__setstate_cython__[] = "SortOptions.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7pycylon_4data_5table_11SortOptions_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pycylon_4data_5table_11SortOptions_4__setstate_cython__(((struct __pyx_obj_7pycylon_4data_5table_SortOptions *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pycylon_4data_5table_11SortOptions_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7pycylon_4data_5table_SortOptions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycylon.data.table.SortOptions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":104
 * # Datetime C API initialization function.
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime():             # <<<<<<<<<<<<<<
 *     PyDateTime_IMPORT
 * 
 */

static CYTHON_INLINE void __pyx_f_7cpython_8datetime_import_datetime(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("import_datetime", 0);

  /* "cpython/datetime.pxd":105
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime():
 *     PyDateTime_IMPORT             # <<<<<<<<<<<<<<
 * 
 * # Create date object using DateTime CAPI factory function.
 */
  (void)(PyDateTime_IMPORT);

  /* "cpython/datetime.pxd":104
 * # Datetime C API initialization function.
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime():             # <<<<<<<<<<<<<<
 *     PyDateTime_IMPORT
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpython/datetime.pxd":109
 * # Create date object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object date_new(int year, int month, int day):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_date_new(int __pyx_v_year, int __pyx_v_month, int __pyx_v_day) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("date_new", 0);

  /* "cpython/datetime.pxd":110
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object date_new(int year, int month, int day):
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)             # <<<<<<<<<<<<<<
 * 
 * # Create time object using DateTime CAPI factory function
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDateTimeAPI->Date_FromDate(__pyx_v_year, __pyx_v_month, __pyx_v_day, PyDateTimeAPI->DateType); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":109
 * # Create date object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object date_new(int year, int month, int day):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.datetime.date_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":114
 * # Create time object using DateTime CAPI factory function
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object time_new(int hour, int minute, int second, int microsecond, object tz):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Time_FromTime(hour, minute, second, microsecond, tz, PyDateTimeAPI.TimeType)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_time_new(int __pyx_v_hour, int __pyx_v_minute, int __pyx_v_second, int __pyx_v_microsecond, PyObject *__pyx_v_tz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("time_new", 0);

  /* "cpython/datetime.pxd":115
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object time_new(int hour, int minute, int second, int microsecond, object tz):
 *     return PyDateTimeAPI.Time_FromTime(hour, minute, second, microsecond, tz, PyDateTimeAPI.TimeType)             # <<<<<<<<<<<<<<
 * 
 * # Create datetime object using DateTime CAPI factory function.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDateTimeAPI->Time_FromTime(__pyx_v_hour, __pyx_v_minute, __pyx_v_second, __pyx_v_microsecond, __pyx_v_tz, PyDateTimeAPI->TimeType); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":114
 * # Create time object using DateTime CAPI factory function
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object time_new(int hour, int minute, int second, int microsecond, object tz):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Time_FromTime(hour, minute, second, microsecond, tz, PyDateTimeAPI.TimeType)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.datetime.time_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":119
 * # Create datetime object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.DateTime_FromDateAndTime(year, month, day, hour, minute, second, microsecond, tz, PyDateTimeAPI.DateTimeType)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_datetime_new(int __pyx_v_year, int __pyx_v_month, int __pyx_v_day, int __pyx_v_hour, int __pyx_v_minute, int __pyx_v_second, int __pyx_v_microsecond, PyObject *__pyx_v_tz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("datetime_new", 0);

  /* "cpython/datetime.pxd":120
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz):
 *     return PyDateTimeAPI.DateTime_FromDateAndTime(year, month, day, hour, minute, second, microsecond, tz, PyDateTimeAPI.DateTimeType)             # <<<<<<<<<<<<<<
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDateTimeAPI->DateTime_FromDateAndTime(__pyx_v_year, __pyx_v_month, __pyx_v_day, __pyx_v_hour, __pyx_v_minute, __pyx_v_second, __pyx_v_microsecond, __pyx_v_tz, PyDateTimeAPI->DateTimeType); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":119
 * # Create datetime object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.DateTime_FromDateAndTime(year, month, day, hour, minute, second, microsecond, tz, PyDateTimeAPI.DateTimeType)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.datetime.datetime_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":124
 * # Create timedelta object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object timedelta_new(int days, int seconds, int useconds):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_timedelta_new(int __pyx_v_days, int __pyx_v_seconds, int __pyx_v_useconds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timedelta_new", 0);

  /* "cpython/datetime.pxd":125
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object timedelta_new(int days, int seconds, int useconds):
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)             # <<<<<<<<<<<<<<
 * 
 * # More recognizable getters for date/time/datetime/timedelta.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDateTimeAPI->Delta_FromDelta(__pyx_v_days, __pyx_v_seconds, __pyx_v_useconds, 1, PyDateTimeAPI->DeltaType); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":124
 * # Create timedelta object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline object timedelta_new(int days, int seconds, int useconds):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.datetime.timedelta_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":133
 * 
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     if (<PyDateTime_Time*>o).hastzinfo:
 *         return <object>(<PyDateTime_Time*>o).tzinfo
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_time_tzinfo(PyObject *__pyx_v_o) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("time_tzinfo", 0);

  /* "cpython/datetime.pxd":134
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):
 *     if (<PyDateTime_Time*>o).hastzinfo:             # <<<<<<<<<<<<<<
 *         return <object>(<PyDateTime_Time*>o).tzinfo
 *     else:
 */
  __pyx_t_1 = (((PyDateTime_Time *)__pyx_v_o)->hastzinfo != 0);
  if (__pyx_t_1) {

    /* "cpython/datetime.pxd":135
 * cdef inline object time_tzinfo(object o):
 *     if (<PyDateTime_Time*>o).hastzinfo:
 *         return <object>(<PyDateTime_Time*>o).tzinfo             # <<<<<<<<<<<<<<
 *     else:
 *         return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)((PyDateTime_Time *)__pyx_v_o)->tzinfo));
    __pyx_r = ((PyObject *)((PyDateTime_Time *)__pyx_v_o)->tzinfo);
    goto __pyx_L0;

    /* "cpython/datetime.pxd":134
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):
 *     if (<PyDateTime_Time*>o).hastzinfo:             # <<<<<<<<<<<<<<
 *         return <object>(<PyDateTime_Time*>o).tzinfo
 *     else:
 */
  }

  /* "cpython/datetime.pxd":137
 *         return <object>(<PyDateTime_Time*>o).tzinfo
 *     else:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * # Get tzinfo of datetime
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "cpython/datetime.pxd":133
 * 
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     if (<PyDateTime_Time*>o).hastzinfo:
 *         return <object>(<PyDateTime_Time*>o).tzinfo
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":140
 * 
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     if (<PyDateTime_DateTime*>o).hastzinfo:
 *         return <object>(<PyDateTime_DateTime*>o).tzinfo
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_datetime_tzinfo(PyObject *__pyx_v_o) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("datetime_tzinfo", 0);

  /* "cpython/datetime.pxd":141
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):
 *     if (<PyDateTime_DateTime*>o).hastzinfo:             # <<<<<<<<<<<<<<
 *         return <object>(<PyDateTime_DateTime*>o).tzinfo
 *     else:
 */
  __pyx_t_1 = (((PyDateTime_DateTime *)__pyx_v_o)->hastzinfo != 0);
  if (__pyx_t_1) {

    /* "cpython/datetime.pxd":142
 * cdef inline object datetime_tzinfo(object o):
 *     if (<PyDateTime_DateTime*>o).hastzinfo:
 *         return <object>(<PyDateTime_DateTime*>o).tzinfo             # <<<<<<<<<<<<<<
 *     else:
 *         return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)((PyDateTime_DateTime *)__pyx_v_o)->tzinfo));
    __pyx_r = ((PyObject *)((PyDateTime_DateTime *)__pyx_v_o)->tzinfo);
    goto __pyx_L0;

    /* "cpython/datetime.pxd":141
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):
 *     if (<PyDateTime_DateTime*>o).hastzinfo:             # <<<<<<<<<<<<<<
 *         return <object>(<PyDateTime_DateTime*>o).tzinfo
 *     else:
 */
  }

  /* "cpython/datetime.pxd":144
 *         return <object>(<PyDateTime_DateTime*>o).tzinfo
 *     else:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * # Get year of date
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "cpython/datetime.pxd":140
 * 
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     if (<PyDateTime_DateTime*>o).hastzinfo:
 *         return <object>(<PyDateTime_DateTime*>o).tzinfo
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":147
 * 
 * # Get year of date
 * cdef inline int date_year(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_year(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("date_year", 0);

  /* "cpython/datetime.pxd":148
 * # Get year of date
 * cdef inline int date_year(object o):
 *     return PyDateTime_GET_YEAR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get month of date
 */
  __pyx_r = PyDateTime_GET_YEAR(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":147
 * 
 * # Get year of date
 * cdef inline int date_year(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":151
 * 
 * # Get month of date
 * cdef inline int date_month(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_month(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("date_month", 0);

  /* "cpython/datetime.pxd":152
 * # Get month of date
 * cdef inline int date_month(object o):
 *     return PyDateTime_GET_MONTH(o)             # <<<<<<<<<<<<<<
 * 
 * # Get day of date
 */
  __pyx_r = PyDateTime_GET_MONTH(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":151
 * 
 * # Get month of date
 * cdef inline int date_month(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":155
 * 
 * # Get day of date
 * cdef inline int date_day(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_day(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("date_day", 0);

  /* "cpython/datetime.pxd":156
 * # Get day of date
 * cdef inline int date_day(object o):
 *     return PyDateTime_GET_DAY(o)             # <<<<<<<<<<<<<<
 * 
 * # Get year of datetime
 */
  __pyx_r = PyDateTime_GET_DAY(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":155
 * 
 * # Get day of date
 * cdef inline int date_day(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":159
 * 
 * # Get year of datetime
 * cdef inline int datetime_year(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_year(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_year", 0);

  /* "cpython/datetime.pxd":160
 * # Get year of datetime
 * cdef inline int datetime_year(object o):
 *     return PyDateTime_GET_YEAR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get month of datetime
 */
  __pyx_r = PyDateTime_GET_YEAR(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":159
 * 
 * # Get year of datetime
 * cdef inline int datetime_year(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":163
 * 
 * # Get month of datetime
 * cdef inline int datetime_month(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_month(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_month", 0);

  /* "cpython/datetime.pxd":164
 * # Get month of datetime
 * cdef inline int datetime_month(object o):
 *     return PyDateTime_GET_MONTH(o)             # <<<<<<<<<<<<<<
 * 
 * # Get day of datetime
 */
  __pyx_r = PyDateTime_GET_MONTH(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":163
 * 
 * # Get month of datetime
 * cdef inline int datetime_month(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":167
 * 
 * # Get day of datetime
 * cdef inline int datetime_day(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_day(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_day", 0);

  /* "cpython/datetime.pxd":168
 * # Get day of datetime
 * cdef inline int datetime_day(object o):
 *     return PyDateTime_GET_DAY(o)             # <<<<<<<<<<<<<<
 * 
 * # Get hour of time
 */
  __pyx_r = PyDateTime_GET_DAY(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":167
 * 
 * # Get day of datetime
 * cdef inline int datetime_day(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":171
 * 
 * # Get hour of time
 * cdef inline int time_hour(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_HOUR(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_hour(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_hour", 0);

  /* "cpython/datetime.pxd":172
 * # Get hour of time
 * cdef inline int time_hour(object o):
 *     return PyDateTime_TIME_GET_HOUR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get minute of time
 */
  __pyx_r = PyDateTime_TIME_GET_HOUR(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":171
 * 
 * # Get hour of time
 * cdef inline int time_hour(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_HOUR(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":175
 * 
 * # Get minute of time
 * cdef inline int time_minute(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MINUTE(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_minute(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_minute", 0);

  /* "cpython/datetime.pxd":176
 * # Get minute of time
 * cdef inline int time_minute(object o):
 *     return PyDateTime_TIME_GET_MINUTE(o)             # <<<<<<<<<<<<<<
 * 
 * # Get second of time
 */
  __pyx_r = PyDateTime_TIME_GET_MINUTE(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":175
 * 
 * # Get minute of time
 * cdef inline int time_minute(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MINUTE(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":179
 * 
 * # Get second of time
 * cdef inline int time_second(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_SECOND(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_second(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_second", 0);

  /* "cpython/datetime.pxd":180
 * # Get second of time
 * cdef inline int time_second(object o):
 *     return PyDateTime_TIME_GET_SECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get microsecond of time
 */
  __pyx_r = PyDateTime_TIME_GET_SECOND(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":179
 * 
 * # Get second of time
 * cdef inline int time_second(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_SECOND(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":183
 * 
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MICROSECOND(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_microsecond(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_microsecond", 0);

  /* "cpython/datetime.pxd":184
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o):
 *     return PyDateTime_TIME_GET_MICROSECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get hour of datetime
 */
  __pyx_r = PyDateTime_TIME_GET_MICROSECOND(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":183
 * 
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MICROSECOND(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":187
 * 
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_HOUR(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_hour(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_hour", 0);

  /* "cpython/datetime.pxd":188
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o):
 *     return PyDateTime_DATE_GET_HOUR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get minute of datetime
 */
  __pyx_r = PyDateTime_DATE_GET_HOUR(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":187
 * 
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_HOUR(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":191
 * 
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MINUTE(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_minute(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_minute", 0);

  /* "cpython/datetime.pxd":192
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o):
 *     return PyDateTime_DATE_GET_MINUTE(o)             # <<<<<<<<<<<<<<
 * 
 * # Get second of datetime
 */
  __pyx_r = PyDateTime_DATE_GET_MINUTE(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":191
 * 
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MINUTE(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":195
 * 
 * # Get second of datetime
 * cdef inline int datetime_second(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_SECOND(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_second(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_second", 0);

  /* "cpython/datetime.pxd":196
 * # Get second of datetime
 * cdef inline int datetime_second(object o):
 *     return PyDateTime_DATE_GET_SECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get microsecond of datetime
 */
  __pyx_r = PyDateTime_DATE_GET_SECOND(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":195
 * 
 * # Get second of datetime
 * cdef inline int datetime_second(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_SECOND(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":199
 * 
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MICROSECOND(o)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_microsecond(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datetime_microsecond", 0);

  /* "cpython/datetime.pxd":200
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o):
 *     return PyDateTime_DATE_GET_MICROSECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get days of timedelta
 */
  __pyx_r = PyDateTime_DATE_GET_MICROSECOND(__pyx_v_o);
  goto __pyx_L0;

  /* "cpython/datetime.pxd":199
 * 
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o):             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MICROSECOND(o)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":203
 * 
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).days
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_days(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timedelta_days", 0);

  /* "cpython/datetime.pxd":204
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o):
 *     return (<PyDateTime_Delta*>o).days             # <<<<<<<<<<<<<<
 * 
 * # Get seconds of timedelta
 */
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->days;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":203
 * 
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).days
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":207
 * 
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).seconds
 * 
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_seconds(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timedelta_seconds", 0);

  /* "cpython/datetime.pxd":208
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o):
 *     return (<PyDateTime_Delta*>o).seconds             # <<<<<<<<<<<<<<
 * 
 * # Get microseconds of timedelta
 */
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->seconds;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":207
 * 
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).seconds
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/datetime.pxd":211
 * 
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).microseconds
 */

static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_microseconds(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timedelta_microseconds", 0);

  /* "cpython/datetime.pxd":212
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o):
 *     return (<PyDateTime_Delta*>o).microseconds             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->microseconds;
  goto __pyx_L0;

  /* "cpython/datetime.pxd":211
 * 
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o):             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).microseconds
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyarrow/includes/common.pxd":135
 * 
 * 
 * cdef inline object PyObject_to_object(PyObject* o):             # <<<<<<<<<<<<<<
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 */

static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8includes_6common_PyObject_to_object(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyObject_to_object", 0);

  /* "pyarrow/includes/common.pxd":137
 * cdef inline object PyObject_to_object(PyObject* o):
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o             # <<<<<<<<<<<<<<
 *     cpython.Py_DECREF(result)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_o);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyarrow/includes/common.pxd":138
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 *     cpython.Py_DECREF(result)             # <<<<<<<<<<<<<<
 *     return result
 */
  Py_DECREF(__pyx_v_result);

  /* "pyarrow/includes/common.pxd":139
 *     cdef object result = <object> o
 *     cpython.Py_DECREF(result)
 *     return result             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pyarrow/includes/common.pxd":135
 * 
 * 
 * cdef inline object PyObject_to_object(PyObject* o):             # <<<<<<<<<<<<<<
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7pycylon_4data_5table_SortOptions __pyx_vtable_7pycylon_4data_5table_SortOptions;

static PyObject *__pyx_tp_new_7pycylon_4data_5table_SortOptions(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7pycylon_4data_5table_SortOptions *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7pycylon_4data_5table_SortOptions *)o);
  p->__pyx_vtab = __pyx_vtabptr_7pycylon_4data_5table_SortOptions;
  new((void*)&(p->thisPtr)) std::shared_ptr<cylon::SortOptions> ();
  if (unlikely(__pyx_pw_7pycylon_4data_5table_11SortOptions_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7pycylon_4data_5table_SortOptions(PyObject *o) {
  struct __pyx_obj_7pycylon_4data_5table_SortOptions *p = (struct __pyx_obj_7pycylon_4data_5table_SortOptions *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->thisPtr);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7pycylon_4data_5table_SortOptions[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7pycylon_4data_5table_11SortOptions_3__reduce_cython__, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_11SortOptions_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7pycylon_4data_5table_11SortOptions_5__setstate_cython__, METH_O, __pyx_doc_7pycylon_4data_5table_11SortOptions_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pycylon_4data_5table_SortOptions = {
  PyVarObject_HEAD_INIT(0, 0)
  "pycylon.data.table.SortOptions", /*tp_name*/
  sizeof(struct __pyx_obj_7pycylon_4data_5table_SortOptions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pycylon_4data_5table_SortOptions, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Sort Operations for Distributed Sort\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pycylon_4data_5table_SortOptions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pycylon_4data_5table_SortOptions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7pycylon_4data_5table_Table __pyx_vtable_7pycylon_4data_5table_Table;

static PyObject *__pyx_tp_new_7pycylon_4data_5table_Table(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7pycylon_4data_5table_Table *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7pycylon_4data_5table_Table *)o);
  p->__pyx_vtab = __pyx_vtabptr_7pycylon_4data_5table_Table;
  new((void*)&(p->table_shd_ptr)) std::shared_ptr<cylon::Table> ();
  new((void*)&(p->sp_context)) std::shared_ptr<cylon::CylonContext> ();
  p->__dict__ = PyDict_New(); if (unlikely(!p->__dict__)) goto bad;if (unlikely(__pyx_pw_7pycylon_4data_5table_5Table_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7pycylon_4data_5table_Table(PyObject *o) {
  struct __pyx_obj_7pycylon_4data_5table_Table *p = (struct __pyx_obj_7pycylon_4data_5table_Table *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__dict__) PyDict_Clear(p->__dict__);
  __Pyx_call_destructor(p->table_shd_ptr);
  __Pyx_call_destructor(p->sp_context);
  Py_CLEAR(p->__dict__);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7pycylon_4data_5table_Table(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7pycylon_4data_5table_Table *p = (struct __pyx_obj_7pycylon_4data_5table_Table *)o;
  if (p->__dict__) {
    e = (*v)(p->__dict__, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7pycylon_4data_5table_Table(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7pycylon_4data_5table_Table *p = (struct __pyx_obj_7pycylon_4data_5table_Table *)o;
  tmp = ((PyObject*)p->__dict__);
  p->__dict__ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_7pycylon_4data_5table_Table(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_7pycylon_4data_5table_Table(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_7pycylon_4data_5table_5Table_105__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx___dict__getter_7pycylon_4data_5table_Table(PyObject *o, CYTHON_UNUSED void *x) {
  struct __pyx_obj_7pycylon_4data_5table_Table *p = (struct __pyx_obj_7pycylon_4data_5table_Table *)o;
  if (unlikely(!p->__dict__)){
    p->__dict__ = PyDict_New();
  }
  Py_XINCREF(p->__dict__);
  return p->__dict__;
}

static PyObject *__pyx_tp_richcompare_7pycylon_4data_5table_Table(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_7pycylon_4data_5table_5Table_107__eq__(o1, o2);
    }
    case Py_NE: {
      return __pyx_pw_7pycylon_4data_5table_5Table_109__ne__(o1, o2);
    }
    case Py_LT: {
      return __pyx_pw_7pycylon_4data_5table_5Table_111__lt__(o1, o2);
    }
    case Py_GT: {
      return __pyx_pw_7pycylon_4data_5table_5Table_113__gt__(o1, o2);
    }
    case Py_LE: {
      return __pyx_pw_7pycylon_4data_5table_5Table_115__le__(o1, o2);
    }
    case Py_GE: {
      return __pyx_pw_7pycylon_4data_5table_5Table_117__ge__(o1, o2);
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_column_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_12column_count_1__get__(o);
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_row_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_9row_count_1__get__(o);
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_context(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_7context_1__get__(o);
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_column_names(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_12column_names_1__get__(o);
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_5shape_1__get__(o);
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_5index_1__get__(o);
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_indexing_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_13indexing_type_1__get__(o);
}

static int __pyx_setprop_7pycylon_4data_5table_5Table_indexing_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7pycylon_4data_5table_5Table_13indexing_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_loc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_3loc_1__get__(o);
}

static PyObject *__pyx_getprop_7pycylon_4data_5table_5Table_iloc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pycylon_4data_5table_5Table_4iloc_1__get__(o);
}

static PyMethodDef __pyx_methods_7pycylon_4data_5table_Table[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_5initialize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_4initialize},
  {"_is_pyarrow_table", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_7_is_pyarrow_table, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_6_is_pyarrow_table},
  {"_is_pycylon_table", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_9_is_pycylon_table, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_8_is_pycylon_table},
  {"_is_pycylon_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_11_is_pycylon_context, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_10_is_pycylon_context},
  {"show", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_13show, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_12show},
  {"sort", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_15sort, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_14sort},
  {"retain_memory", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_17retain_memory, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_16retain_memory},
  {"is_retain", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_19is_retain, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_18is_retain},
  {"merge", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_21merge, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_20merge},
  {"_resolve_column_index_from_column_name", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_23_resolve_column_index_from_column_name, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_22_resolve_column_index_from_column_name},
  {"_resolve_join_column_indices_from_column_names", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_25_resolve_join_column_indices_from_column_names, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_24_resolve_join_column_indices_from_column_names},
  {"_get_join_column_indices", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_27_get_join_column_indices, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_26_get_join_column_indices},
  {"_is_column_indices_viable", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_29_is_column_indices_viable, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_28_is_column_indices_viable},
  {"_check_column_names_viable", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_31_check_column_names_viable, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_30_check_column_names_viable},
  {"join", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_33join, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_32join},
  {"distributed_join", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_35distributed_join, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_34distributed_join},
  {"union", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_37union, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_36union},
  {"distributed_union", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_39distributed_union, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_38distributed_union},
  {"subtract", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_41subtract, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_40subtract},
  {"distributed_subtract", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_43distributed_subtract, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_42distributed_subtract},
  {"intersect", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_45intersect, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_44intersect},
  {"distributed_intersect", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_47distributed_intersect, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_46distributed_intersect},
  {"project", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_49project, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_48project},
  {"distributed_sort", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_51distributed_sort, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_50distributed_sort},
  {"shuffle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_53shuffle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_52shuffle},
  {"_agg_op", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_55_agg_op, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_54_agg_op},
  {"sum", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_57sum, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_56sum},
  {"count", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_59count, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_58count},
  {"min", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_61min, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_60min},
  {"max", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_63max, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_62max},
  {"groupby", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_65groupby, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_64groupby},
  {"unique", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_67unique, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_66unique},
  {"distributed_unique", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_69distributed_unique, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_68distributed_unique},
  {"equals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_71equals, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_70equals},
  {"distributed_equals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_73distributed_equals, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_72distributed_equals},
  {"repartition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_75repartition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_74repartition},
  {"evenly_partition", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_77evenly_partition, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_76evenly_partition},
  {"from_arrow", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_79from_arrow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_78from_arrow},
  {"from_numpy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_81from_numpy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_80from_numpy},
  {"from_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_83from_list, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_82from_list},
  {"from_pydict", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_85from_pydict, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_84from_pydict},
  {"from_pandas", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_87from_pandas, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_86from_pandas},
  {"to_pandas", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_89to_pandas, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_88to_pandas},
  {"to_numpy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_91to_numpy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_90to_numpy},
  {"to_pydict", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_93to_pydict, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_92to_pydict},
  {"to_csv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_95to_csv, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_94to_csv},
  {"to_arrow", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_97to_arrow, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_96to_arrow},
  {"filter", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_99filter, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_98filter},
  {"_table_from_mask", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_101_table_from_mask, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_100_table_from_mask},
  {"to_string", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_137to_string, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_136to_string},
  {"drop", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_139drop, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_138drop},
  {"fillna", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_141fillna, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_140fillna},
  {"where", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_143where, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_142where},
  {"isnull", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_145isnull, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_144isnull},
  {"isna", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_147isna, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_146isna},
  {"notnull", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_149notnull, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_148notnull},
  {"notna", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_151notna, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_150notna},
  {"rename", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_153rename, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_152rename},
  {"add_prefix", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_155add_prefix, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_154add_prefix},
  {"add_suffix", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_157add_suffix, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_156add_suffix},
  {"_is_index_and_range_validity", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_159_is_index_and_range_validity, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_158_is_index_and_range_validity},
  {"_is_index_list_and_valid", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_161_is_index_list_and_valid, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_160_is_index_list_and_valid},
  {"_is_index_list_of_columns", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_163_is_index_list_of_columns, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_162_is_index_list_of_columns},
  {"_get_index_list_from_columns", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_165_get_index_list_from_columns, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_164_get_index_list_from_columns},
  {"_is_index_str_and_valid", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_167_is_index_str_and_valid, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_166_is_index_str_and_valid},
  {"_get_column_by_name", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_169_get_column_by_name, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_168_get_column_by_name},
  {"set_index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_171set_index, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_170set_index},
  {"reset_index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_173reset_index, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_172reset_index},
  {"dropna", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_175dropna, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_174dropna},
  {"isin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_177isin, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_176isin},
  {"applymap", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_179applymap, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_178applymap},
  {"get_index", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_181get_index, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_180get_index},
  {"concat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_183concat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_182concat},
  {"distributed_concat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_185distributed_concat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_184distributed_concat},
  {"iterrows", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_187iterrows, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_186iterrows},
  {"astype", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pycylon_4data_5table_5Table_190astype, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pycylon_4data_5table_5Table_189astype},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_194__reduce_cython__, METH_NOARGS, __pyx_doc_7pycylon_4data_5table_5Table_193__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7pycylon_4data_5table_5Table_196__setstate_cython__, METH_O, __pyx_doc_7pycylon_4data_5table_5Table_195__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pycylon_4data_5table_Table[] = {
  {(char *)"__dict__", __pyx___dict__getter_7pycylon_4data_5table_Table, 0, (char *)0, 0},
  {(char *)"column_count", __pyx_getprop_7pycylon_4data_5table_5Table_column_count, 0, (char *)"\n        Produces column count\n        @return: int\n        ", 0},
  {(char *)"row_count", __pyx_getprop_7pycylon_4data_5table_5Table_row_count, 0, (char *)"\n        Produces row count\n        @return: int\n        ", 0},
  {(char *)"context", __pyx_getprop_7pycylon_4data_5table_5Table_context, 0, (char *)"\n        Get the CylonContext from PyCylon Table\n        @rtype: CylonContext\n        ", 0},
  {(char *)"column_names", __pyx_getprop_7pycylon_4data_5table_5Table_column_names, 0, (char *)"\n        Produces column names from PyCylon Table\n        @return: list\n        ", 0},
  {(char *)"shape", __pyx_getprop_7pycylon_4data_5table_5Table_shape, 0, (char *)0, 0},
  {(char *)"index", __pyx_getprop_7pycylon_4data_5table_5Table_index, 0, (char *)"\n        Retrieve index if exists or provide a range index as default\n        Returns: Index object\n\n        Examples:\n\n        >>> tb.index\n            <pycylon.index.RangeIndex object at 0x7f58bde8e040>\n\n        ", 0},
  {(char *)"indexing_type", __pyx_getprop_7pycylon_4data_5table_5Table_indexing_type, __pyx_setprop_7pycylon_4data_5table_5Table_indexing_type, (char *)0, 0},
  {(char *)"loc", __pyx_getprop_7pycylon_4data_5table_5Table_loc, 0, (char *)"\n        loc\n\n        This operator finds value by key\n\n        Examples\n        --------\n\n        >>> tb\n               col-2  col-3   col-4\n            1      5      9       1\n            2      6     10      12\n            3      7     11      15\n            4      8     12      21\n\n        >>> tb.loc[2:3, 'col-2']\n                col-2\n            2      6\n            3      7\n\n        >>> tb.loc[2:3, 'col-3':'col-4']\n               col-3   col-4\n            2     10      12\n            3     11      15\n\n        Returns: PyCylon Table\n\n        ", 0},
  {(char *)"iloc", __pyx_getprop_7pycylon_4data_5table_5Table_iloc, 0, (char *)"\n        loc\n\n        This operator finds value by position as an index (row index)\n\n        Examples\n        --------\n\n        >>> tb\n               col-2  col-3   col-4\n            1      5      9       1\n            2      6     10      12\n            3      7     11      15\n            4      8     12      21\n\n        >>> tb.iloc[1:3, 'col-2']\n                col-2\n            2      6\n            3      7\n\n\n        >>> tb.iloc[1:3, 'col-3':'col-4']\n               col-3   col-4\n            2     10      12\n            3     11      15\n\n        Returns: PyCylon Table\n\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Table = {
  __pyx_pw_7pycylon_4data_5table_5Table_127__add__, /*nb_add*/
  __pyx_pw_7pycylon_4data_5table_5Table_129__sub__, /*nb_subtract*/
  __pyx_pw_7pycylon_4data_5table_5Table_131__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_7pycylon_4data_5table_5Table_125__neg__, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  __pyx_pw_7pycylon_4data_5table_5Table_123__invert__, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_pw_7pycylon_4data_5table_5Table_121__and__, /*nb_and*/
  0, /*nb_xor*/
  __pyx_pw_7pycylon_4data_5table_5Table_119__or__, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_pw_7pycylon_4data_5table_5Table_133__truediv__, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Table = {
  __pyx_pw_7pycylon_4data_5table_5Table_192__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7pycylon_4data_5table_Table, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Table = {
  __pyx_pw_7pycylon_4data_5table_5Table_192__len__, /*mp_length*/
  __pyx_pw_7pycylon_4data_5table_5Table_103__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_7pycylon_4data_5table_Table, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7pycylon_4data_5table_Table = {
  PyVarObject_HEAD_INIT(0, 0)
  "pycylon.data.table.Table", /*tp_name*/
  sizeof(struct __pyx_obj_7pycylon_4data_5table_Table), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pycylon_4data_5table_Table, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7pycylon_4data_5table_5Table_135__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Table, /*tp_as_number*/
  &__pyx_tp_as_sequence_Table, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Table, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Table(pyarrow_table=None, context=None)", /*tp_doc*/
  __pyx_tp_traverse_7pycylon_4data_5table_Table, /*tp_traverse*/
  __pyx_tp_clear_7pycylon_4data_5table_Table, /*tp_clear*/
  __pyx_tp_richcompare_7pycylon_4data_5table_Table, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pycylon_4data_5table_Table, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pycylon_4data_5table_Table, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  offsetof(struct __pyx_obj_7pycylon_4data_5table_Table, __dict__), /*tp_dictoffset*/
  __pyx_pw_7pycylon_4data_5table_5Table_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pycylon_4data_5table_Table, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *__pyx_freelist_7pycylon_4data_5table___pyx_scope_struct__iterrows[8];
static int __pyx_freecount_7pycylon_4data_5table___pyx_scope_struct__iterrows = 0;

static PyObject *__pyx_tp_new_7pycylon_4data_5table___pyx_scope_struct__iterrows(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7pycylon_4data_5table___pyx_scope_struct__iterrows > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows)))) {
    o = (PyObject*)__pyx_freelist_7pycylon_4data_5table___pyx_scope_struct__iterrows[--__pyx_freecount_7pycylon_4data_5table___pyx_scope_struct__iterrows];
    memset(o, 0, sizeof(struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pycylon_4data_5table___pyx_scope_struct__iterrows(PyObject *o) {
  struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *p = (struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_column);
  Py_CLEAR(p->__pyx_v_data_dict);
  Py_CLEAR(p->__pyx_v_index_id);
  Py_CLEAR(p->__pyx_v_index_values);
  Py_CLEAR(p->__pyx_v_row);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7pycylon_4data_5table___pyx_scope_struct__iterrows < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows)))) {
    __pyx_freelist_7pycylon_4data_5table___pyx_scope_struct__iterrows[__pyx_freecount_7pycylon_4data_5table___pyx_scope_struct__iterrows++] = ((struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7pycylon_4data_5table___pyx_scope_struct__iterrows(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *p = (struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows *)o;
  if (p->__pyx_v_column) {
    e = (*v)(p->__pyx_v_column, a); if (e) return e;
  }
  if (p->__pyx_v_data_dict) {
    e = (*v)(p->__pyx_v_data_dict, a); if (e) return e;
  }
  if (p->__pyx_v_index_id) {
    e = (*v)(p->__pyx_v_index_id, a); if (e) return e;
  }
  if (p->__pyx_v_index_values) {
    e = (*v)(p->__pyx_v_index_values, a); if (e) return e;
  }
  if (p->__pyx_v_row) {
    e = (*v)(p->__pyx_v_row, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_7pycylon_4data_5table___pyx_scope_struct__iterrows = {
  PyVarObject_HEAD_INIT(0, 0)
  "pycylon.data.table.__pyx_scope_struct__iterrows", /*tp_name*/
  sizeof(struct __pyx_obj_7pycylon_4data_5table___pyx_scope_struct__iterrows), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pycylon_4data_5table___pyx_scope_struct__iterrows, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7pycylon_4data_5table___pyx_scope_struct__iterrows, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pycylon_4data_5table___pyx_scope_struct__iterrows, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_table(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_table},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "table",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_Add_operator_for_Table_Args_oth, __pyx_k_Add_operator_for_Table_Args_oth, sizeof(__pyx_k_Add_operator_for_Table_Args_oth), 0, 1, 0, 0},
  {&__pyx_kp_u_Adding_a_prefix_to_column_names, __pyx_k_Adding_a_prefix_to_column_names, sizeof(__pyx_k_Adding_a_prefix_to_column_names), 0, 1, 0, 0},
  {&__pyx_kp_u_Adding_a_prefix_to_column_names_2, __pyx_k_Adding_a_prefix_to_column_names_2, sizeof(__pyx_k_Adding_a_prefix_to_column_names_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Agg_column_must_be_either_column, __pyx_k_Agg_column_must_be_either_column, sizeof(__pyx_k_Agg_column_must_be_either_column), 0, 1, 0, 0},
  {&__pyx_kp_u_Agg_op_must_be_either_op_name_st, __pyx_k_Agg_op_must_be_either_op_name_st, sizeof(__pyx_k_Agg_op_must_be_either_op_name_st), 0, 1, 0, 0},
  {&__pyx_kp_u_Aggregate_op, __pyx_k_Aggregate_op, sizeof(__pyx_k_Aggregate_op), 0, 1, 0, 0},
  {&__pyx_n_s_AggregationOp, __pyx_k_AggregationOp, sizeof(__pyx_k_AggregationOp), 0, 0, 1, 1},
  {&__pyx_n_s_AggregationOpString, __pyx_k_AggregationOpString, sizeof(__pyx_k_AggregationOpString), 0, 0, 1, 1},
  {&__pyx_kp_u_And_operator_for_Table_Args_oth, __pyx_k_And_operator_for_Table_Args_oth, sizeof(__pyx_k_And_operator_for_Table_Args_oth), 0, 1, 0, 0},
  {&__pyx_kp_u_Applies_an_element_wise_map_fun, __pyx_k_Applies_an_element_wise_map_fun, sizeof(__pyx_k_Applies_an_element_wise_map_fun), 0, 1, 0, 0},
  {&__pyx_kp_u_Available_hash_mapred_hash, __pyx_k_Available_hash_mapred_hash, sizeof(__pyx_k_Available_hash_mapred_hash), 0, 1, 0, 0},
  {&__pyx_n_s_BaseArrowIndex, __pyx_k_BaseArrowIndex, sizeof(__pyx_k_BaseArrowIndex), 0, 0, 1, 1},
  {&__pyx_n_s_COUNT, __pyx_k_COUNT, sizeof(__pyx_k_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_CSVWriteOptions, __pyx_k_CSVWriteOptions, sizeof(__pyx_k_CSVWriteOptions), 0, 0, 1, 1},
  {&__pyx_kp_u_Check_for_not_applicable_values, __pyx_k_Check_for_not_applicable_values, sizeof(__pyx_k_Check_for_not_applicable_values), 0, 1, 0, 0},
  {&__pyx_kp_u_Check_the_not_null_values_and_r, __pyx_k_Check_the_not_null_values_and_r, sizeof(__pyx_k_Check_the_not_null_values_and_r), 0, 1, 0, 0},
  {&__pyx_kp_u_Checks_for_not_NA_values_and_re, __pyx_k_Checks_for_not_NA_values_and_re, sizeof(__pyx_k_Checks_for_not_NA_values_and_re), 0, 1, 0, 0},
  {&__pyx_kp_u_Checks_for_null_elements_and_re, __pyx_k_Checks_for_null_elements_and_re, sizeof(__pyx_k_Checks_for_null_elements_and_re), 0, 1, 0, 0},
  {&__pyx_kp_u_Column, __pyx_k_Column, sizeof(__pyx_k_Column), 0, 1, 0, 0},
  {&__pyx_kp_u_Column_Names_count_doesn_t_match, __pyx_k_Column_Names_count_doesn_t_match, sizeof(__pyx_k_Column_Names_count_doesn_t_match), 0, 1, 0, 0},
  {&__pyx_kp_u_Column_name_doesn_t_exist_in_the, __pyx_k_Column_name_doesn_t_exist_in_the, sizeof(__pyx_k_Column_name_doesn_t_exist_in_the), 0, 1, 0, 0},
  {&__pyx_kp_u_Columns_not_passed, __pyx_k_Columns_not_passed, sizeof(__pyx_k_Columns_not_passed), 0, 1, 0, 0},
  {&__pyx_kp_u_Creating_a_PyCylon_table_from_P, __pyx_k_Creating_a_PyCylon_table_from_P, sizeof(__pyx_k_Creating_a_PyCylon_table_from_P), 0, 1, 0, 0},
  {&__pyx_kp_u_Creating_a_PyCylon_table_from_P_2, __pyx_k_Creating_a_PyCylon_table_from_P_2, sizeof(__pyx_k_Creating_a_PyCylon_table_from_P_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Creating_a_PyCylon_table_from_a, __pyx_k_Creating_a_PyCylon_table_from_a, sizeof(__pyx_k_Creating_a_PyCylon_table_from_a), 0, 1, 0, 0},
  {&__pyx_kp_u_Creating_a_PyCylon_table_from_a_2, __pyx_k_Creating_a_PyCylon_table_from_a_2, sizeof(__pyx_k_Creating_a_PyCylon_table_from_a_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Creating_a_PyCylon_table_from_n, __pyx_k_Creating_a_PyCylon_table_from_n, sizeof(__pyx_k_Creating_a_PyCylon_table_from_n), 0, 1, 0, 0},
  {&__pyx_kp_u_Creating_a_csv_file_with_PyCylo, __pyx_k_Creating_a_csv_file_with_PyCylo, sizeof(__pyx_k_Creating_a_csv_file_with_PyCylo), 0, 1, 0, 0},
  {&__pyx_n_s_CylonContext, __pyx_k_CylonContext, sizeof(__pyx_k_CylonContext), 0, 0, 1, 1},
  {&__pyx_kp_u_Determine_whether_two_tables_ar, __pyx_k_Determine_whether_two_tables_ar, sizeof(__pyx_k_Determine_whether_two_tables_ar), 0, 1, 0, 0},
  {&__pyx_kp_u_Distributed_Join, __pyx_k_Distributed_Join, sizeof(__pyx_k_Distributed_Join), 0, 1, 0, 0},
  {&__pyx_kp_u_Does_a_distributed_sort_on_the, __pyx_k_Does_a_distributed_sort_on_the, sizeof(__pyx_k_Does_a_distributed_sort_on_the), 0, 1, 0, 0},
  {&__pyx_kp_u_Drop_not_applicable_values_from, __pyx_k_Drop_not_applicable_values_from, sizeof(__pyx_k_Drop_not_applicable_values_from), 0, 1, 0, 0},
  {&__pyx_kp_u_Element_wise_division_operator, __pyx_k_Element_wise_division_operator, sizeof(__pyx_k_Element_wise_division_operator), 0, 1, 0, 0},
  {&__pyx_n_s_EmptyTable, __pyx_k_EmptyTable, sizeof(__pyx_k_EmptyTable), 0, 0, 1, 1},
  {&__pyx_n_s_EmptyTable___init, __pyx_k_EmptyTable___init, sizeof(__pyx_k_EmptyTable___init), 0, 0, 1, 1},
  {&__pyx_n_s_EmptyTable__empty_initialize, __pyx_k_EmptyTable__empty_initialize, sizeof(__pyx_k_EmptyTable__empty_initialize), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_Table_definition_required, __pyx_k_Empty_Table_definition_required, sizeof(__pyx_k_Empty_Table_definition_required), 0, 0, 1, 0},
  {&__pyx_kp_u_Equal_operation_failed, __pyx_k_Equal_operation_failed, sizeof(__pyx_k_Equal_operation_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_Equal_operator_for_Table_Args_o, __pyx_k_Equal_operator_for_Table_Args_o, sizeof(__pyx_k_Equal_operator_for_Table_Args_o), 0, 1, 0, 0},
  {&__pyx_kp_u_Experimental_version_of_Where_o, __pyx_k_Experimental_version_of_Where_o, sizeof(__pyx_k_Experimental_version_of_Where_o), 0, 1, 0, 0},
  {&__pyx_n_u_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 1, 0, 1},
  {&__pyx_kp_u_Fill_not_applicable_values_with, __pyx_k_Fill_not_applicable_values_with, sizeof(__pyx_k_Fill_not_applicable_values_with), 0, 1, 0, 0},
  {&__pyx_kp_u_Given_table_has_more_than_1_colu, __pyx_k_Given_table_has_more_than_1_colu, sizeof(__pyx_k_Given_table_has_more_than_1_colu), 0, 1, 0, 0},
  {&__pyx_kp_u_Greater_than_operator_for_Table, __pyx_k_Greater_than_operator_for_Table, sizeof(__pyx_k_Greater_than_operator_for_Table), 0, 1, 0, 0},
  {&__pyx_kp_u_Greater_than_or_equal_operator, __pyx_k_Greater_than_or_equal_operator, sizeof(__pyx_k_Greater_than_or_equal_operator), 0, 1, 0, 0},
  {&__pyx_kp_u_Groupby_operation_failed, __pyx_k_Groupby_operation_failed, sizeof(__pyx_k_Groupby_operation_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_Hash_columns_are_not_provided, __pyx_k_Hash_columns_are_not_provided, sizeof(__pyx_k_Hash_columns_are_not_provided), 0, 1, 0, 0},
  {&__pyx_kp_u_Hash_columns_must_be_a_List_of_i, __pyx_k_Hash_columns_must_be_a_List_of_i, sizeof(__pyx_k_Hash_columns_must_be_a_List_of_i), 0, 1, 0, 0},
  {&__pyx_kp_u_Head_operation_failed, __pyx_k_Head_operation_failed, sizeof(__pyx_k_Head_operation_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_Heterogeneous_Cylon_Table_Detect, __pyx_k_Heterogeneous_Cylon_Table_Detect, sizeof(__pyx_k_Heterogeneous_Cylon_Table_Detect), 0, 1, 0, 0},
  {&__pyx_n_s_IndexUtil, __pyx_k_IndexUtil, sizeof(__pyx_k_IndexUtil), 0, 0, 1, 1},
  {&__pyx_kp_u_Index_column_must_be_either_colu, __pyx_k_Index_column_must_be_either_colu, sizeof(__pyx_k_Index_column_must_be_either_colu), 0, 1, 0, 0},
  {&__pyx_n_s_IndexingType, __pyx_k_IndexingType, sizeof(__pyx_k_IndexingType), 0, 0, 1, 1},
  {&__pyx_kp_u_Input_Column_names_must_be_a_dic, __pyx_k_Input_Column_names_must_be_a_dic, sizeof(__pyx_k_Input_Column_names_must_be_a_dic), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_axis, __pyx_k_Invalid_axis, sizeof(__pyx_k_Invalid_axis), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_column_list_it_must_be_c, __pyx_k_Invalid_column_list_it_must_be_c, sizeof(__pyx_k_Invalid_column_list_it_must_be_c), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_object, __pyx_k_Invalid_object, sizeof(__pyx_k_Invalid_object), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_object_expected_List, __pyx_k_Invalid_object_expected_List, sizeof(__pyx_k_Invalid_object_expected_List), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_object_expected_range, __pyx_k_Invalid_object_expected_range, sizeof(__pyx_k_Invalid_object_expected_range), 0, 1, 0, 0},
  {&__pyx_kp_u_Invert_operator_for_Table_Retur, __pyx_k_Invert_operator_for_Table_Retur, sizeof(__pyx_k_Invert_operator_for_Table_Retur), 0, 1, 0, 0},
  {&__pyx_n_u_Join, __pyx_k_Join, sizeof(__pyx_k_Join), 0, 1, 0, 1},
  {&__pyx_n_s_JoinConfig, __pyx_k_JoinConfig, sizeof(__pyx_k_JoinConfig), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_LINEAR, __pyx_k_LINEAR, sizeof(__pyx_k_LINEAR), 0, 0, 1, 1},
  {&__pyx_kp_u_Lesser_than_operator_for_Table, __pyx_k_Lesser_than_operator_for_Table, sizeof(__pyx_k_Lesser_than_operator_for_Table), 0, 1, 0, 0},
  {&__pyx_kp_u_Lesser_than_or_equal_operator_f, __pyx_k_Lesser_than_or_equal_operator_f, sizeof(__pyx_k_Lesser_than_or_equal_operator_f), 0, 1, 0, 0},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_MAX, __pyx_k_MAX, sizeof(__pyx_k_MAX), 0, 0, 1, 1},
  {&__pyx_n_s_MIN, __pyx_k_MIN, sizeof(__pyx_k_MIN), 0, 0, 1, 1},
  {&__pyx_kp_u_Multiply_operator_for_Table_Arg, __pyx_k_Multiply_operator_for_Table_Arg, sizeof(__pyx_k_Multiply_operator_for_Table_Arg), 0, 1, 0, 0},
  {&__pyx_kp_u_Negation_operator_for_Table_Ret, __pyx_k_Negation_operator_for_Table_Ret, sizeof(__pyx_k_Negation_operator_for_Table_Ret), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_kp_u_Not_Implemented___setitem___opti, __pyx_k_Not_Implemented___setitem___opti, sizeof(__pyx_k_Not_Implemented___setitem___opti), 0, 1, 0, 0},
  {&__pyx_kp_u_Not_Supported_index_pattern, __pyx_k_Not_Supported_index_pattern, sizeof(__pyx_k_Not_Supported_index_pattern), 0, 1, 0, 0},
  {&__pyx_kp_u_Not_equal_operator_for_Table_Ar, __pyx_k_Not_equal_operator_for_Table_Ar, sizeof(__pyx_k_Not_equal_operator_for_Table_Ar), 0, 1, 0, 0},
  {&__pyx_n_s_NumericIndex, __pyx_k_NumericIndex, sizeof(__pyx_k_NumericIndex), 0, 0, 1, 1},
  {&__pyx_kp_u_Operation_failed, __pyx_k_Operation_failed, sizeof(__pyx_k_Operation_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_Or_operator_for_Table_Args_othe, __pyx_k_Or_operator_for_Table_Args_othe, sizeof(__pyx_k_Or_operator_for_Table_Args_othe), 0, 1, 0, 0},
  {&__pyx_kp_u_Project_operation_failed, __pyx_k_Project_operation_failed, sizeof(__pyx_k_Project_operation_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_Provided_Column_Names_or_Column, __pyx_k_Provided_Column_Names_or_Column, sizeof(__pyx_k_Provided_Column_Names_or_Column), 0, 1, 0, 0},
  {&__pyx_n_s_PyLocIndexer, __pyx_k_PyLocIndexer, sizeof(__pyx_k_PyLocIndexer), 0, 0, 1, 1},
  {&__pyx_n_s_RANGE, __pyx_k_RANGE, sizeof(__pyx_k_RANGE), 0, 0, 1, 1},
  {&__pyx_n_s_RangeIndex, __pyx_k_RangeIndex, sizeof(__pyx_k_RangeIndex), 0, 0, 1, 1},
  {&__pyx_kp_u_Removes_duplicates_and_returns, __pyx_k_Removes_duplicates_and_returns, sizeof(__pyx_k_Removes_duplicates_and_returns), 0, 1, 0, 0},
  {&__pyx_kp_u_Removes_duplicates_and_returns_2, __pyx_k_Removes_duplicates_and_returns_2, sizeof(__pyx_k_Removes_duplicates_and_returns_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Rename_a_Table_with_a_column_na, __pyx_k_Rename_a_Table_with_a_column_na, sizeof(__pyx_k_Rename_a_Table_with_a_column_na), 0, 1, 0, 0},
  {&__pyx_kp_u_Repartition_failed, __pyx_k_Repartition_failed, sizeof(__pyx_k_Repartition_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_Retrieve_index_if_exists_or_pro, __pyx_k_Retrieve_index_if_exists_or_pro, sizeof(__pyx_k_Retrieve_index_if_exists_or_pro), 0, 1, 0, 0},
  {&__pyx_n_s_SUM, __pyx_k_SUM, sizeof(__pyx_k_SUM), 0, 0, 1, 1},
  {&__pyx_kp_u_Set_Index_Operation_takes_place, __pyx_k_Set_Index_Operation_takes_place, sizeof(__pyx_k_Set_Index_Operation_takes_place), 0, 1, 0, 0},
  {&__pyx_kp_u_Sets_values_for_a_existing_tabl, __pyx_k_Sets_values_for_a_existing_tabl, sizeof(__pyx_k_Sets_values_for_a_existing_tabl), 0, 1, 0, 0},
  {&__pyx_kp_u_Shuffle_operation_failed, __pyx_k_Shuffle_operation_failed, sizeof(__pyx_k_Shuffle_operation_failed), 0, 1, 0, 0},
  {&__pyx_n_s_SortOptions, __pyx_k_SortOptions, sizeof(__pyx_k_SortOptions), 0, 0, 1, 1},
  {&__pyx_n_s_Status, __pyx_k_Status, sizeof(__pyx_k_Status), 0, 0, 1, 1},
  {&__pyx_n_s_StrToJoinAlgorithm, __pyx_k_StrToJoinAlgorithm, sizeof(__pyx_k_StrToJoinAlgorithm), 0, 0, 1, 1},
  {&__pyx_n_s_StrToJoinType, __pyx_k_StrToJoinType, sizeof(__pyx_k_StrToJoinType), 0, 0, 1, 1},
  {&__pyx_kp_u_Subtract_operator_for_Table_Arg, __pyx_k_Subtract_operator_for_Table_Arg, sizeof(__pyx_k_Subtract_operator_for_Table_Arg), 0, 1, 0, 0},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_Table, __pyx_k_Table, sizeof(__pyx_k_Table), 0, 0, 1, 1},
  {&__pyx_kp_u_Table___add___line_1741, __pyx_k_Table___add___line_1741, sizeof(__pyx_k_Table___add___line_1741), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___and___line_1657, __pyx_k_Table___and___line_1657, sizeof(__pyx_k_Table___and___line_1657), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___eq___line_1416, __pyx_k_Table___eq___line_1416, sizeof(__pyx_k_Table___eq___line_1416), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___ge___line_1588, __pyx_k_Table___ge___line_1588, sizeof(__pyx_k_Table___ge___line_1588), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___getitem___line_1232, __pyx_k_Table___getitem___line_1232, sizeof(__pyx_k_Table___getitem___line_1232), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___gt___line_1520, __pyx_k_Table___gt___line_1520, sizeof(__pyx_k_Table___gt___line_1520), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___invert___line_1691, __pyx_k_Table___invert___line_1691, sizeof(__pyx_k_Table___invert___line_1691), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___le___line_1554, __pyx_k_Table___le___line_1554, sizeof(__pyx_k_Table___le___line_1554), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___lt___line_1486, __pyx_k_Table___lt___line_1486, sizeof(__pyx_k_Table___lt___line_1486), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___mul___line_1795, __pyx_k_Table___mul___line_1795, sizeof(__pyx_k_Table___mul___line_1795), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___ne___line_1452, __pyx_k_Table___ne___line_1452, sizeof(__pyx_k_Table___ne___line_1452), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___neg___line_1716, __pyx_k_Table___neg___line_1716, sizeof(__pyx_k_Table___neg___line_1716), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___or___line_1623, __pyx_k_Table___or___line_1623, sizeof(__pyx_k_Table___or___line_1623), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___setitem___line_1359, __pyx_k_Table___setitem___line_1359, sizeof(__pyx_k_Table___setitem___line_1359), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___sub___line_1768, __pyx_k_Table___sub___line_1768, sizeof(__pyx_k_Table___sub___line_1768), 0, 1, 0, 0},
  {&__pyx_kp_u_Table___truediv___line_1822, __pyx_k_Table___truediv___line_1822, sizeof(__pyx_k_Table___truediv___line_1822), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_add_prefix_line_2135, __pyx_k_Table_add_prefix_line_2135, sizeof(__pyx_k_Table_add_prefix_line_2135), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_add_suffix_line_2164, __pyx_k_Table_add_suffix_line_2164, sizeof(__pyx_k_Table_add_suffix_line_2164), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_applymap_line_2445, __pyx_k_Table_applymap_line_2445, sizeof(__pyx_k_Table_applymap_line_2445), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_astype_line_2639, __pyx_k_Table_astype_line_2639, sizeof(__pyx_k_Table_astype_line_2639), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_couldn_t_be_converted_to_a, __pyx_k_Table_couldn_t_be_converted_to_a, sizeof(__pyx_k_Table_couldn_t_be_converted_to_a), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_couldn_t_be_created_from_P, __pyx_k_Table_couldn_t_be_created_from_P, sizeof(__pyx_k_Table_couldn_t_be_created_from_P), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_couldn_t_be_sorted, __pyx_k_Table_couldn_t_be_sorted, sizeof(__pyx_k_Table_couldn_t_be_sorted), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_distributed_equals_line_82, __pyx_k_Table_distributed_equals_line_82, sizeof(__pyx_k_Table_distributed_equals_line_82), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_distributed_sort_line_463, __pyx_k_Table_distributed_sort_line_463, sizeof(__pyx_k_Table_distributed_sort_line_463), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_distributed_unique_line_74, __pyx_k_Table_distributed_unique_line_74, sizeof(__pyx_k_Table_distributed_unique_line_74), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_drop_line_1875, __pyx_k_Table_drop_line_1875, sizeof(__pyx_k_Table_drop_line_1875), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_dropna_line_2367, __pyx_k_Table_dropna_line_2367, sizeof(__pyx_k_Table_dropna_line_2367), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_equals_line_789, __pyx_k_Table_equals_line_789, sizeof(__pyx_k_Table_equals_line_789), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_expected, __pyx_k_Table_expected, sizeof(__pyx_k_Table_expected), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_fillna_line_1911, __pyx_k_Table_fillna_line_1911, sizeof(__pyx_k_Table_fillna_line_1911), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_from_arrow_line_911, __pyx_k_Table_from_arrow_line_911, sizeof(__pyx_k_Table_from_arrow_line_911), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_from_list_line_972, __pyx_k_Table_from_list_line_972, sizeof(__pyx_k_Table_from_list_line_972), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_from_numpy_line_948, __pyx_k_Table_from_numpy_line_948, sizeof(__pyx_k_Table_from_numpy_line_948), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_from_pandas_line_1024, __pyx_k_Table_from_pandas_line_1024, sizeof(__pyx_k_Table_from_pandas_line_1024), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_from_pydict_line_1001, __pyx_k_Table_from_pydict_line_1001, sizeof(__pyx_k_Table_from_pydict_line_1001), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_iloc___get___line_2528, __pyx_k_Table_iloc___get___line_2528, sizeof(__pyx_k_Table_iloc___get___line_2528), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_index___get___line_2236, __pyx_k_Table_index___get___line_2236, sizeof(__pyx_k_Table_index___get___line_2236), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_isna_line_2019, __pyx_k_Table_isna_line_2019, sizeof(__pyx_k_Table_isna_line_2019), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_isnull_line_1994, __pyx_k_Table_isnull_line_1994, sizeof(__pyx_k_Table_isnull_line_1994), 0, 1, 0, 0},
  {&__pyx_n_s_Table_iterrows, __pyx_k_Table_iterrows, sizeof(__pyx_k_Table_iterrows), 0, 0, 1, 1},
  {&__pyx_kp_u_Table_loc___get___line_2496, __pyx_k_Table_loc___get___line_2496, sizeof(__pyx_k_Table_loc___get___line_2496), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_notna_line_2066, __pyx_k_Table_notna_line_2066, sizeof(__pyx_k_Table_notna_line_2066), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_notnull_line_2042, __pyx_k_Table_notnull_line_2042, sizeof(__pyx_k_Table_notnull_line_2042), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_rename_line_2088, __pyx_k_Table_rename_line_2088, sizeof(__pyx_k_Table_rename_line_2088), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_reset_index_line_2336, __pyx_k_Table_reset_index_line_2336, sizeof(__pyx_k_Table_reset_index_line_2336), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_set_index_line_2249, __pyx_k_Table_set_index_line_2249, sizeof(__pyx_k_Table_set_index_line_2249), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_to_csv_line_1114, __pyx_k_Table_to_csv_line_1114, sizeof(__pyx_k_Table_to_csv_line_1114), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_unique_line_671, __pyx_k_Table_unique_line_671, sizeof(__pyx_k_Table_unique_line_671), 0, 1, 0, 0},
  {&__pyx_kp_u_Table_where_line_1943, __pyx_k_Table_where_line_1943, sizeof(__pyx_k_Table_where_line_1943), 0, 1, 0, 0},
  {&__pyx_kp_u_Tables_are_not_parsed_for_merge, __pyx_k_Tables_are_not_parsed_for_merge, sizeof(__pyx_k_Tables_are_not_parsed_for_merge), 0, 1, 0, 0},
  {&__pyx_kp_u_Tables_couldn_t_be_merged, __pyx_k_Tables_couldn_t_be_merged, sizeof(__pyx_k_Tables_couldn_t_be_merged), 0, 1, 0, 0},
  {&__pyx_kp_u_This_cast_a_table_into_given_da, __pyx_k_This_cast_a_table_into_given_da, sizeof(__pyx_k_This_cast_a_table_into_given_da), 0, 1, 0, 0},
  {&__pyx_kp_u_This_method_allows_to_retrieve, __pyx_k_This_method_allows_to_retrieve, sizeof(__pyx_k_This_method_allows_to_retrieve), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Unique_operation_failed, __pyx_k_Unique_operation_failed, sizeof(__pyx_k_Unique_operation_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_groupby_type, __pyx_k_Unknown_groupby_type, sizeof(__pyx_k_Unknown_groupby_type), 0, 1, 0, 0},
  {&__pyx_kp_u_Unsupported_Key_Type_in___getite, __pyx_k_Unsupported_Key_Type_in___getite, sizeof(__pyx_k_Unsupported_Key_Type_in___getite), 0, 1, 0, 0},
  {&__pyx_kp_u_Unsupported_aggregation_type, __pyx_k_Unsupported_aggregation_type, sizeof(__pyx_k_Unsupported_aggregation_type), 0, 1, 0, 0},
  {&__pyx_kp_u_Unsupported_data_type_representa, __pyx_k_Unsupported_data_type_representa, sizeof(__pyx_k_Unsupported_data_type_representa), 0, 1, 0, 0},
  {&__pyx_kp_u_Unsupported_format_for_ascending, __pyx_k_Unsupported_format_for_ascending, sizeof(__pyx_k_Unsupported_format_for_ascending), 0, 1, 0, 0},
  {&__pyx_kp_u_Unsupported_relational_algebra_o, __pyx_k_Unsupported_relational_algebra_o, sizeof(__pyx_k_Unsupported_relational_algebra_o), 0, 1, 0, 0},
  {&__pyx_kp_u_Unsupported_type_used_to_specify, __pyx_k_Unsupported_type_used_to_specify, sizeof(__pyx_k_Unsupported_type_used_to_specify), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 1, 0, 0},
  {&__pyx_kp_u__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_agg, __pyx_k_agg, sizeof(__pyx_k_agg), 0, 0, 1, 1},
  {&__pyx_n_s_agg_op, __pyx_k_agg_op, sizeof(__pyx_k_agg_op), 0, 0, 1, 1},
  {&__pyx_kp_u_agg_should_be_non_empty_and_dict, __pyx_k_agg_should_be_non_empty_and_dict, sizeof(__pyx_k_agg_should_be_non_empty_and_dict), 0, 1, 0, 0},
  {&__pyx_n_s_algorithm, __pyx_k_algorithm, sizeof(__pyx_k_algorithm), 0, 0, 1, 1},
  {&__pyx_n_s_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 0, 1, 1},
  {&__pyx_kp_u_and_value_type, __pyx_k_and_value_type, sizeof(__pyx_k_and_value_type), 0, 1, 0, 0},
  {&__pyx_n_u_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 1, 0, 1},
  {&__pyx_n_s_append_column, __pyx_k_append_column, sizeof(__pyx_k_append_column), 0, 0, 1, 1},
  {&__pyx_n_s_ar_list, __pyx_k_ar_list, sizeof(__pyx_k_ar_list), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_u_arrow, __pyx_k_arrow, sizeof(__pyx_k_arrow), 0, 1, 0, 1},
  {&__pyx_n_s_arw_table, __pyx_k_arw_table, sizeof(__pyx_k_arw_table), 0, 0, 1, 1},
  {&__pyx_n_s_as_py, __pyx_k_as_py, sizeof(__pyx_k_as_py), 0, 0, 1, 1},
  {&__pyx_n_s_ascending, __pyx_k_ascending, sizeof(__pyx_k_ascending), 0, 0, 1, 1},
  {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
  {&__pyx_n_s_asfortranarray, __pyx_k_asfortranarray, sizeof(__pyx_k_asfortranarray), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_axis1_join_func, __pyx_k_axis1_join_func, sizeof(__pyx_k_axis1_join_func), 0, 0, 1, 1},
  {&__pyx_n_s_cast, __pyx_k_cast, sizeof(__pyx_k_cast), 0, 0, 1, 1},
  {&__pyx_kp_u_cast_data_type_is_not_supported, __pyx_k_cast_data_type_is_not_supported, sizeof(__pyx_k_cast_data_type_is_not_supported), 0, 1, 0, 0},
  {&__pyx_n_s_check_column_names_viable, __pyx_k_check_column_names_viable, sizeof(__pyx_k_check_column_names_viable), 0, 0, 1, 1},
  {&__pyx_n_s_chunk, __pyx_k_chunk, sizeof(__pyx_k_chunk), 0, 0, 1, 1},
  {&__pyx_n_s_chunks, __pyx_k_chunks, sizeof(__pyx_k_chunks), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cn_table, __pyx_k_cn_table, sizeof(__pyx_k_cn_table), 0, 0, 1, 1},
  {&__pyx_n_s_col1, __pyx_k_col1, sizeof(__pyx_k_col1), 0, 0, 1, 1},
  {&__pyx_n_s_col2, __pyx_k_col2, sizeof(__pyx_k_col2), 0, 0, 1, 1},
  {&__pyx_n_s_col_names, __pyx_k_col_names, sizeof(__pyx_k_col_names), 0, 0, 1, 1},
  {&__pyx_n_s_column, __pyx_k_column, sizeof(__pyx_k_column), 0, 0, 1, 1},
  {&__pyx_n_s_column_count, __pyx_k_column_count, sizeof(__pyx_k_column_count), 0, 0, 1, 1},
  {&__pyx_kp_u_column_must_be_str_or_int, __pyx_k_column_must_be_str_or_int, sizeof(__pyx_k_column_must_be_str_or_int), 0, 1, 0, 0},
  {&__pyx_n_s_column_names, __pyx_k_column_names, sizeof(__pyx_k_column_names), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_kp_u_columns_must_be_str_or_int_provi, __pyx_k_columns_must_be_str_or_int_provi, sizeof(__pyx_k_columns_must_be_str_or_int_provi), 0, 1, 0, 0},
  {&__pyx_n_s_combine_chunks, __pyx_k_combine_chunks, sizeof(__pyx_k_combine_chunks), 0, 0, 1, 1},
  {&__pyx_n_s_compute, __pyx_k_compute, sizeof(__pyx_k_compute), 0, 0, 1, 1},
  {&__pyx_n_u_compute_engine, __pyx_k_compute_engine, sizeof(__pyx_k_compute_engine), 0, 1, 0, 1},
  {&__pyx_n_s_concat, __pyx_k_concat, sizeof(__pyx_k_concat), 0, 0, 1, 1},
  {&__pyx_n_s_concat_impl, __pyx_k_concat_impl, sizeof(__pyx_k_concat_impl), 0, 0, 1, 1},
  {&__pyx_n_s_condition, __pyx_k_condition, sizeof(__pyx_k_condition), 0, 0, 1, 1},
  {&__pyx_n_s_context, __pyx_k_context, sizeof(__pyx_k_context), 0, 0, 1, 1},
  {&__pyx_n_s_csv_write_options, __pyx_k_csv_write_options, sizeof(__pyx_k_csv_write_options), 0, 0, 1, 1},
  {&__pyx_n_s_ctables, __pyx_k_ctables, sizeof(__pyx_k_ctables), 0, 0, 1, 1},
  {&__pyx_n_s_ctx, __pyx_k_ctx, sizeof(__pyx_k_ctx), 0, 0, 1, 1},
  {&__pyx_n_s_curTable, __pyx_k_curTable, sizeof(__pyx_k_curTable), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_data_list, __pyx_k_data_list, sizeof(__pyx_k_data_list), 0, 0, 1, 1},
  {&__pyx_n_s_df, __pyx_k_df, sizeof(__pyx_k_df), 0, 0, 1, 1},
  {&__pyx_n_s_dictionary, __pyx_k_dictionary, sizeof(__pyx_k_dictionary), 0, 0, 1, 1},
  {&__pyx_n_s_distributed_concat, __pyx_k_distributed_concat, sizeof(__pyx_k_distributed_concat), 0, 0, 1, 1},
  {&__pyx_n_u_distributed_intersect, __pyx_k_distributed_intersect, sizeof(__pyx_k_distributed_intersect), 0, 1, 0, 1},
  {&__pyx_n_u_distributed_join, __pyx_k_distributed_join, sizeof(__pyx_k_distributed_join), 0, 1, 0, 1},
  {&__pyx_n_u_distributed_subtract, __pyx_k_distributed_subtract, sizeof(__pyx_k_distributed_subtract), 0, 1, 0, 1},
  {&__pyx_n_u_distributed_union, __pyx_k_distributed_union, sizeof(__pyx_k_distributed_union), 0, 1, 0, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_kp_u_does_not_exist_in_the_table, __pyx_k_does_not_exist_in_the_table, sizeof(__pyx_k_does_not_exist_in_the_table), 0, 1, 0, 0},
  {&__pyx_n_s_drop, __pyx_k_drop, sizeof(__pyx_k_drop), 0, 0, 1, 1},
  {&__pyx_kp_u_drop_a_column_or_list_of_column, __pyx_k_drop_a_column_or_list_of_column, sizeof(__pyx_k_drop_a_column_or_list_of_column), 0, 1, 0, 0},
  {&__pyx_n_s_drop_index, __pyx_k_drop_index, sizeof(__pyx_k_drop_index), 0, 0, 1, 1},
  {&__pyx_n_s_drop_na, __pyx_k_drop_na, sizeof(__pyx_k_drop_na), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_empty_data, __pyx_k_empty_data, sizeof(__pyx_k_empty_data), 0, 0, 1, 1},
  {&__pyx_n_s_empty_initialize, __pyx_k_empty_initialize, sizeof(__pyx_k_empty_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eq, __pyx_k_eq, sizeof(__pyx_k_eq), 0, 0, 1, 1},
  {&__pyx_kp_u_expected_Table, __pyx_k_expected_Table, sizeof(__pyx_k_expected_Table), 0, 1, 0, 0},
  {&__pyx_kp_u_failed, __pyx_k_failed, sizeof(__pyx_k_failed), 0, 1, 0, 0},
  {&__pyx_n_s_fill_null, __pyx_k_fill_null, sizeof(__pyx_k_fill_null), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_u_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 1, 0, 1},
  {&__pyx_n_s_formatted_tables, __pyx_k_formatted_tables, sizeof(__pyx_k_formatted_tables), 0, 0, 1, 1},
  {&__pyx_n_s_from_arrays, __pyx_k_from_arrays, sizeof(__pyx_k_from_arrays), 0, 0, 1, 1},
  {&__pyx_n_s_from_arrow, __pyx_k_from_arrow, sizeof(__pyx_k_from_arrow), 0, 0, 1, 1},
  {&__pyx_n_s_from_list, __pyx_k_from_list, sizeof(__pyx_k_from_list), 0, 0, 1, 1},
  {&__pyx_n_s_from_numpy, __pyx_k_from_numpy, sizeof(__pyx_k_from_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_from_pandas, __pyx_k_from_pandas, sizeof(__pyx_k_from_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_from_pydict, __pyx_k_from_pydict, sizeof(__pyx_k_from_pydict), 0, 0, 1, 1},
  {&__pyx_n_s_full, __pyx_k_full, sizeof(__pyx_k_full), 0, 0, 1, 1},
  {&__pyx_n_s_ge, __pyx_k_ge, sizeof(__pyx_k_ge), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_arrow_type, __pyx_k_get_arrow_type, sizeof(__pyx_k_get_arrow_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_config, __pyx_k_get_config, sizeof(__pyx_k_get_config), 0, 0, 1, 1},
  {&__pyx_n_s_get_index, __pyx_k_get_index, sizeof(__pyx_k_get_index), 0, 0, 1, 1},
  {&__pyx_n_s_get_join_column_indices, __pyx_k_get_join_column_indices, sizeof(__pyx_k_get_join_column_indices), 0, 0, 1, 1},
  {&__pyx_n_s_get_world_size, __pyx_k_get_world_size, sizeof(__pyx_k_get_world_size), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_groupby_type, __pyx_k_groupby_type, sizeof(__pyx_k_groupby_type), 0, 0, 1, 1},
  {&__pyx_n_s_gt, __pyx_k_gt, sizeof(__pyx_k_gt), 0, 0, 1, 1},
  {&__pyx_n_u_hash, __pyx_k_hash, sizeof(__pyx_k_hash), 0, 1, 0, 1},
  {&__pyx_n_s_hash_columns, __pyx_k_hash_columns, sizeof(__pyx_k_hash_columns), 0, 0, 1, 1},
  {&__pyx_n_s_how, __pyx_k_how, sizeof(__pyx_k_how), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_u_iloc, __pyx_k_iloc, sizeof(__pyx_k_iloc), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_index_2, __pyx_k_index_2, sizeof(__pyx_k_index_2), 0, 0, 1, 1},
  {&__pyx_n_s_indexing_type, __pyx_k_indexing_type, sizeof(__pyx_k_indexing_type), 0, 0, 1, 1},
  {&__pyx_n_s_indexing_type_2, __pyx_k_indexing_type_2, sizeof(__pyx_k_indexing_type_2), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_u_initial, __pyx_k_initial, sizeof(__pyx_k_initial), 0, 1, 0, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_n_u_inner, __pyx_k_inner, sizeof(__pyx_k_inner), 0, 1, 0, 1},
  {&__pyx_n_s_inplace, __pyx_k_inplace, sizeof(__pyx_k_inplace), 0, 0, 1, 1},
  {&__pyx_n_u_intersect, __pyx_k_intersect, sizeof(__pyx_k_intersect), 0, 1, 0, 1},
  {&__pyx_n_s_invert, __pyx_k_invert, sizeof(__pyx_k_invert), 0, 0, 1, 1},
  {&__pyx_n_s_is_column_indices_viable, __pyx_k_is_column_indices_viable, sizeof(__pyx_k_is_column_indices_viable), 0, 0, 1, 1},
  {&__pyx_n_s_is_in, __pyx_k_is_in, sizeof(__pyx_k_is_in), 0, 0, 1, 1},
  {&__pyx_n_s_is_null, __pyx_k_is_null, sizeof(__pyx_k_is_null), 0, 0, 1, 1},
  {&__pyx_n_s_is_pyarrow_table, __pyx_k_is_pyarrow_table, sizeof(__pyx_k_is_pyarrow_table), 0, 0, 1, 1},
  {&__pyx_n_s_is_pycylon_context, __pyx_k_is_pycylon_context, sizeof(__pyx_k_is_pycylon_context), 0, 0, 1, 1},
  {&__pyx_n_s_is_pycylon_table, __pyx_k_is_pycylon_table, sizeof(__pyx_k_is_pycylon_table), 0, 0, 1, 1},
  {&__pyx_n_s_isscalar, __pyx_k_isscalar, sizeof(__pyx_k_isscalar), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itercolumns, __pyx_k_itercolumns, sizeof(__pyx_k_itercolumns), 0, 0, 1, 1},
  {&__pyx_n_s_iterrows, __pyx_k_iterrows, sizeof(__pyx_k_iterrows), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_u_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 1, 0, 1},
  {&__pyx_n_s_join_type, __pyx_k_join_type, sizeof(__pyx_k_join_type), 0, 0, 1, 1},
  {&__pyx_n_s_keep, __pyx_k_keep, sizeof(__pyx_k_keep), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_kp_u_kwargs_on_or_left_on_and_right_o, __pyx_k_kwargs_on_or_left_on_and_right_o, sizeof(__pyx_k_kwargs_on_or_left_on_and_right_o), 0, 1, 0, 0},
  {&__pyx_kp_u_kwargs_on_or_left_on_and_right_o_2, __pyx_k_kwargs_on_or_left_on_and_right_o_2, sizeof(__pyx_k_kwargs_on_or_left_on_and_right_o_2), 0, 1, 0, 0},
  {&__pyx_n_s_le, __pyx_k_le, sizeof(__pyx_k_le), 0, 0, 1, 1},
  {&__pyx_n_s_left_cols, __pyx_k_left_cols, sizeof(__pyx_k_left_cols), 0, 0, 1, 1},
  {&__pyx_n_s_left_on, __pyx_k_left_on, sizeof(__pyx_k_left_on), 0, 0, 1, 1},
  {&__pyx_n_u_left_on, __pyx_k_left_on, sizeof(__pyx_k_left_on), 0, 1, 0, 1},
  {&__pyx_n_u_left_prefix, __pyx_k_left_prefix, sizeof(__pyx_k_left_prefix), 0, 1, 0, 1},
  {&__pyx_n_u_loc, __pyx_k_loc, sizeof(__pyx_k_loc), 0, 1, 0, 1},
  {&__pyx_kp_u_loc_This_operator_finds_value_b, __pyx_k_loc_This_operator_finds_value_b, sizeof(__pyx_k_loc_This_operator_finds_value_b), 0, 1, 0, 0},
  {&__pyx_kp_u_loc_This_operator_finds_value_b_2, __pyx_k_loc_This_operator_finds_value_b_2, sizeof(__pyx_k_loc_This_operator_finds_value_b_2), 0, 1, 0, 0},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_lt, __pyx_k_lt, sizeof(__pyx_k_lt), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_u_mapred_hash, __pyx_k_mapred_hash, sizeof(__pyx_k_mapred_hash), 0, 1, 0, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_math_op, __pyx_k_math_op, sizeof(__pyx_k_math_op), 0, 0, 1, 1},
  {&__pyx_n_s_merge, __pyx_k_merge, sizeof(__pyx_k_merge), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mul, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 0, 1, 1},
  {&__pyx_kp_u_must_0_or_1, __pyx_k_must_0_or_1, sizeof(__pyx_k_must_0_or_1), 0, 1, 0, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_names, __pyx_k_names, sizeof(__pyx_k_names), 0, 0, 1, 1},
  {&__pyx_n_s_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
  {&__pyx_n_s_ne, __pyx_k_ne, sizeof(__pyx_k_ne), 0, 0, 1, 1},
  {&__pyx_n_s_neg, __pyx_k_neg, sizeof(__pyx_k_neg), 0, 0, 1, 1},
  {&__pyx_n_s_new_column_names, __pyx_k_new_column_names, sizeof(__pyx_k_new_column_names), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nthreads, __pyx_k_nthreads, sizeof(__pyx_k_nthreads), 0, 0, 1, 1},
  {&__pyx_n_s_num_bins, __pyx_k_num_bins, sizeof(__pyx_k_num_bins), 0, 0, 1, 1},
  {&__pyx_n_s_num_samples, __pyx_k_num_samples, sizeof(__pyx_k_num_samples), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_u_on, __pyx_k_on, sizeof(__pyx_k_on), 0, 1, 0, 1},
  {&__pyx_n_s_op, __pyx_k_op, sizeof(__pyx_k_op), 0, 0, 1, 1},
  {&__pyx_n_s_op_column_names, __pyx_k_op_column_names, sizeof(__pyx_k_op_column_names), 0, 0, 1, 1},
  {&__pyx_kp_u_operation_failed, __pyx_k_operation_failed, sizeof(__pyx_k_operation_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_operation_failed_2, __pyx_k_operation_failed_2, sizeof(__pyx_k_operation_failed_2), 0, 1, 0, 0},
  {&__pyx_n_s_operator, __pyx_k_operator, sizeof(__pyx_k_operator), 0, 0, 1, 1},
  {&__pyx_n_s_or, __pyx_k_or, sizeof(__pyx_k_or), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_order_by, __pyx_k_order_by, sizeof(__pyx_k_order_by), 0, 0, 1, 1},
  {&__pyx_n_s_ordered, __pyx_k_ordered, sizeof(__pyx_k_ordered), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_pa, __pyx_k_pa, sizeof(__pyx_k_pa), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_preserve_index, __pyx_k_preserve_index, sizeof(__pyx_k_preserve_index), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_process_index_by_value, __pyx_k_process_index_by_value, sizeof(__pyx_k_process_index_by_value), 0, 0, 1, 1},
  {&__pyx_n_s_pyarrow, __pyx_k_pyarrow, sizeof(__pyx_k_pyarrow), 0, 0, 1, 1},
  {&__pyx_n_s_pyarrow_table, __pyx_k_pyarrow_table, sizeof(__pyx_k_pyarrow_table), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_common_join_config, __pyx_k_pycylon_common_join_config, sizeof(__pyx_k_pycylon_common_join_config), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_common_status, __pyx_k_pycylon_common_status, sizeof(__pyx_k_pycylon_common_status), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_ctx_context, __pyx_k_pycylon_ctx_context, sizeof(__pyx_k_pycylon_ctx_context), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_data, __pyx_k_pycylon_data, sizeof(__pyx_k_pycylon_data), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_data_aggregates, __pyx_k_pycylon_data_aggregates, sizeof(__pyx_k_pycylon_data_aggregates), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_data_table, __pyx_k_pycylon_data_table, sizeof(__pyx_k_pycylon_data_table), 0, 0, 1, 1},
  {&__pyx_kp_s_pycylon_data_table_pyx, __pyx_k_pycylon_data_table_pyx, sizeof(__pyx_k_pycylon_data_table_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pycylon_index, __pyx_k_pycylon_index, sizeof(__pyx_k_pycylon_index), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_indexing_cyindex, __pyx_k_pycylon_indexing_cyindex, sizeof(__pyx_k_pycylon_indexing_cyindex), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_indexing_index_utils, __pyx_k_pycylon_indexing_index_utils, sizeof(__pyx_k_pycylon_indexing_index_utils), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_io_csv_write_config, __pyx_k_pycylon_io_csv_write_config, sizeof(__pyx_k_pycylon_io_csv_write_config), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_table, __pyx_k_pycylon_table, sizeof(__pyx_k_pycylon_table), 0, 0, 1, 1},
  {&__pyx_n_s_pycylon_util_type_utils, __pyx_k_pycylon_util_type_utils, sizeof(__pyx_k_pycylon_util_type_utils), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_range_calculator, __pyx_k_range_calculator, sizeof(__pyx_k_range_calculator), 0, 0, 1, 1},
  {&__pyx_n_s_receive_build_rank_order, __pyx_k_receive_build_rank_order, sizeof(__pyx_k_receive_build_rank_order), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_u_regular, __pyx_k_regular, sizeof(__pyx_k_regular), 0, 1, 0, 1},
  {&__pyx_n_s_rename_columns, __pyx_k_rename_columns, sizeof(__pyx_k_rename_columns), 0, 0, 1, 1},
  {&__pyx_n_s_res_table, __pyx_k_res_table, sizeof(__pyx_k_res_table), 0, 0, 1, 1},
  {&__pyx_n_s_reset_index, __pyx_k_reset_index, sizeof(__pyx_k_reset_index), 0, 0, 1, 1},
  {&__pyx_kp_u_reset_index_Here_the_existing_i, __pyx_k_reset_index_Here_the_existing_i, sizeof(__pyx_k_reset_index_Here_the_existing_i), 0, 1, 0, 0},
  {&__pyx_n_s_resolve_column_index_from_colum, __pyx_k_resolve_column_index_from_colum, sizeof(__pyx_k_resolve_column_index_from_colum), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_join_column_indices_fro, __pyx_k_resolve_join_column_indices_fro, sizeof(__pyx_k_resolve_join_column_indices_fro), 0, 0, 1, 1},
  {&__pyx_n_s_right_cols, __pyx_k_right_cols, sizeof(__pyx_k_right_cols), 0, 0, 1, 1},
  {&__pyx_n_s_right_on, __pyx_k_right_on, sizeof(__pyx_k_right_on), 0, 0, 1, 1},
  {&__pyx_n_u_right_on, __pyx_k_right_on, sizeof(__pyx_k_right_on), 0, 1, 0, 1},
  {&__pyx_n_u_right_prefix, __pyx_k_right_prefix, sizeof(__pyx_k_right_prefix), 0, 1, 0, 1},
  {&__pyx_n_s_row1, __pyx_k_row1, sizeof(__pyx_k_row1), 0, 0, 1, 1},
  {&__pyx_n_s_row2, __pyx_k_row2, sizeof(__pyx_k_row2), 0, 0, 1, 1},
  {&__pyx_n_s_row_count, __pyx_k_row_count, sizeof(__pyx_k_row_count), 0, 0, 1, 1},
  {&__pyx_n_s_row_limit, __pyx_k_row_limit, sizeof(__pyx_k_row_limit), 0, 0, 1, 1},
  {&__pyx_n_s_rows_per_partition, __pyx_k_rows_per_partition, sizeof(__pyx_k_rows_per_partition), 0, 0, 1, 1},
  {&__pyx_n_s_safe, __pyx_k_safe, sizeof(__pyx_k_safe), 0, 0, 1, 1},
  {&__pyx_n_s_sampling, __pyx_k_sampling, sizeof(__pyx_k_sampling), 0, 0, 1, 1},
  {&__pyx_n_s_schema, __pyx_k_schema, sizeof(__pyx_k_schema), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {&__pyx_n_s_set_column, __pyx_k_set_column, sizeof(__pyx_k_set_column), 0, 0, 1, 1},
  {&__pyx_n_s_set_index, __pyx_k_set_index, sizeof(__pyx_k_set_index), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_skip_null, __pyx_k_skip_null, sizeof(__pyx_k_skip_null), 0, 0, 1, 1},
  {&__pyx_n_s_slice, __pyx_k_slice, sizeof(__pyx_k_slice), 0, 0, 1, 1},
  {&__pyx_n_u_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 1, 0, 1},
  {&__pyx_n_s_sort_options, __pyx_k_sort_options, sizeof(__pyx_k_sort_options), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_u_subtract, __pyx_k_subtract, sizeof(__pyx_k_subtract), 0, 1, 0, 1},
  {&__pyx_n_s_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {&__pyx_n_s_table_compare_op, __pyx_k_table_compare_op, sizeof(__pyx_k_table_compare_op), 0, 0, 1, 1},
  {&__pyx_n_s_table_from_mask, __pyx_k_table_from_mask, sizeof(__pyx_k_table_from_mask), 0, 0, 1, 1},
  {&__pyx_n_s_tables, __pyx_k_tables, sizeof(__pyx_k_tables), 0, 0, 1, 1},
  {&__pyx_n_s_tb1, __pyx_k_tb1, sizeof(__pyx_k_tb1), 0, 0, 1, 1},
  {&__pyx_n_s_tb_idx, __pyx_k_tb_idx, sizeof(__pyx_k_tb_idx), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_to_arrow, __pyx_k_to_arrow, sizeof(__pyx_k_to_arrow), 0, 0, 1, 1},
  {&__pyx_n_s_to_batches, __pyx_k_to_batches, sizeof(__pyx_k_to_batches), 0, 0, 1, 1},
  {&__pyx_n_s_to_numpy, __pyx_k_to_numpy, sizeof(__pyx_k_to_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_to_pandas, __pyx_k_to_pandas, sizeof(__pyx_k_to_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_to_pydict, __pyx_k_to_pydict, sizeof(__pyx_k_to_pydict), 0, 0, 1, 1},
  {&__pyx_n_s_to_string, __pyx_k_to_string, sizeof(__pyx_k_to_string), 0, 0, 1, 1},
  {&__pyx_n_s_tolist, __pyx_k_tolist, sizeof(__pyx_k_tolist), 0, 0, 1, 1},
  {&__pyx_n_s_truediv, __pyx_k_truediv, sizeof(__pyx_k_truediv), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_u_union, __pyx_k_union, sizeof(__pyx_k_union), 0, 1, 0, 1},
  {&__pyx_kp_u_unknown_sampling_method_for_sort, __pyx_k_unknown_sampling_method_for_sort, sizeof(__pyx_k_unknown_sampling_method_for_sort), 0, 1, 0, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_with_index, __pyx_k_with_index, sizeof(__pyx_k_with_index), 0, 0, 1, 1},
  {&__pyx_n_s_with_type, __pyx_k_with_type, sizeof(__pyx_k_with_type), 0, 0, 1, 1},
  {&__pyx_n_s_writable, __pyx_k_writable, sizeof(__pyx_k_writable), 0, 0, 1, 1},
  {&__pyx_n_s_zero_copy_only, __pyx_k_zero_copy_only, sizeof(__pyx_k_zero_copy_only), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 115, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 166, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 291, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 1195, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 1205, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 2223, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 2475, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 2688, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pycylon/data/table.pyx":159
 *                     sort_index.push_back(b)
 *                 else:
 *                     raise Exception(             # <<<<<<<<<<<<<<
 *                         'Unsupported type used to specify the sort by columns. Expected column name or index')
 *         else:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Unsupported_type_used_to_specify); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pycylon/data/table.pyx":172
 *                 order_directions.push_back(ascending[i])
 *         else:
 *             raise Exception(             # <<<<<<<<<<<<<<
 *                 'Unsupported format for ascending/descending order indication. Expected a boolean or a list of booleans')
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Unsupported_format_for_ascending); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pycylon/data/table.pyx":216
 *                 raise Exception(f"Tables couldn't be merged: {status.get_msg().decode()}")
 *         else:
 *             raise ValueError("Tables are not parsed for merge")             # <<<<<<<<<<<<<<
 * 
 *     def _resolve_column_index_from_column_name(self, column_name) -> int:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Tables_are_not_parsed_for_merge); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pycylon/data/table.pyx":291
 *                 return column_names, column_names
 *         else:
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be provided")             # <<<<<<<<<<<<<<
 * 
 *         if not (left_cols and isinstance(left_cols[0], int)) and not (right_cols and isinstance(
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_kwargs_on_or_left_on_and_right_o); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pycylon/data/table.pyx":295
 *         if not (left_cols and isinstance(left_cols[0], int)) and not (right_cols and isinstance(
 *                 right_cols[0], int)):
 *             raise TypeError("kwargs 'on' or 'left_on' and 'right_on' must be type List and contain "             # <<<<<<<<<<<<<<
 *                             "int type or str type and cannot be None")
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_kwargs_on_or_left_on_and_right_o_2); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pycylon/data/table.pyx":303
 *     def _check_column_names_viable(self, left_cols, right_cols):
 *         if not self._is_column_indices_viable(left_cols, right_cols):
 *             raise ValueError("Provided Column Names or Column Indices not valid.")             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_join_ra_response(self, op_name, shared_ptr[CTable] output, CStatus status):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Provided_Column_Names_or_Column); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pycylon/data/table.pyx":458
 *                     raise ValueError(f"Project operation failed : {status.get_msg().decode()}")
 *             else:
 *                 raise ValueError("Invalid column list, it must be column names in string or "             # <<<<<<<<<<<<<<
 *                                  "column indices in int")
 *         else:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Invalid_column_list_it_must_be_c); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pycylon/data/table.pyx":461
 *                                  "column indices in int")
 *         else:
 *             raise ValueError("Columns not passed.")             # <<<<<<<<<<<<<<
 * 
 *     def distributed_sort(self, order_by, ascending = True,
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Columns_not_passed); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pycylon/data/table.pyx":517
 *             csort_options = pycylon_unwrap_sort_options(sort_options)
 *         else:
 *             csort_options = pycylon_unwrap_sort_options(SortOptions(0, 0))             # <<<<<<<<<<<<<<
 *         cdef CStatus status = DistributedSort(self.table_shd_ptr, sort_index, output,
 *                                               order_directions, csort_options.get()[0])
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pycylon/data/table.pyx":550
 *                     raise ValueError(f"Shuffle operation failed : {status.get_msg().decode()}")
 *             else:
 *                 raise ValueError('Hash columns must be a List of integers or strings')             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError('Hash columns are not provided')
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Hash_columns_must_be_a_List_of_i); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pycylon/data/table.pyx":552
 *                 raise ValueError('Hash columns must be a List of integers or strings')
 *         else:
 *             raise ValueError('Hash columns are not provided')             # <<<<<<<<<<<<<<
 * 
 *     def _agg_op(self, column, op):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Hash_columns_are_not_provided); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pycylon/data/table.pyx":563
 *             agg_index = column
 *         else:
 *             raise ValueError("column must be str or int")             # <<<<<<<<<<<<<<
 * 
 *         if op == AggregationOp.SUM:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_column_must_be_str_or_int); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "pycylon/data/table.pyx":605
 * 
 *         if not agg or not isinstance(agg, dict):
 *             raise ValueError("agg should be non-empty and dict type")             # <<<<<<<<<<<<<<
 *         else:
 *             # set aggregate col to c-vector
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_agg_should_be_non_empty_and_dict); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "pycylon/data/table.pyx":614
 *                     col_idx = agg_pair[0]
 *                 else:
 *                     raise ValueError("Agg column must be either column name (str) or column "             # <<<<<<<<<<<<<<
 *                                      "index (int)")
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Agg_column_must_be_either_column); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "pycylon/data/table.pyx":637
 *                             caggregate_ops_pair.push_back(pair[int, CGroupByAggregationOp](col_idx, op))
 *                 else:
 *                     raise ValueError("Agg op must be either op name (str) or AggregationOp enum or "             # <<<<<<<<<<<<<<
 *                                      "a list of either of those")
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_Agg_op_must_be_either_op_name_st); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "pycylon/data/table.pyx":651
 *                         col_idx = i
 *                     else:
 *                         raise ValueError("Index column must be either column name (str) or column "             # <<<<<<<<<<<<<<
 *                                          "index (int)")
 *                     cindex_cols.push_back(col_idx)
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_Index_column_must_be_either_colu); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "pycylon/data/table.pyx":998
 *             return Table.from_arrow(context, pa.Table.from_arrays(ar_list, names=col_names))
 *         else:
 *             raise ValueError("Column Names count doesn't match data columns count")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Column_Names_count_doesn_t_match); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pycylon/data/table.pyx":1398
 *                 chunk_arr = value_arrow_table.columns[0].chunks[0]
 *             else:
 *                 raise ValueError("Given table has more than 1 columns")             # <<<<<<<<<<<<<<
 *         elif isinstance(key, str) and np.isscalar(value):
 *             chunk_arr = pa.array(np.full(self.row_count, value))
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_Given_table_has_more_than_1_colu); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "pycylon/data/table.pyx":1449
 * 
 *         '''
 *         engine = self.context.get_config("compute_engine", "arrow")             # <<<<<<<<<<<<<<
 *         return compute.table_compare_op(self, other, operator.__eq__, engine)
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_n_u_compute_engine, __pyx_n_u_arrow); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "pycylon/data/table.pyx":2124
 *             for key in column_names.keys():
 *                 if key not in table_col_names:
 *                     raise ValueError("Column name doesn't exist in the table")             # <<<<<<<<<<<<<<
 *                 else:
 *                     table_col_names[table_col_names.index(key)] = column_names[key]
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Column_name_doesn_t_exist_in_the); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 2124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "pycylon/data/table.pyx":2132
 *                 self.initialize(self.to_arrow().rename_columns(column_names), self.context)
 *         else:
 *             raise ValueError("Input Column names must be a dictionary or list")             # <<<<<<<<<<<<<<
 *         self.set_index(index_values)
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_Input_Column_names_must_be_a_dic); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 2132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pycylon/data/table.pyx":2197
 *             return range_calculator(index_range) == self.row_count
 *         else:
 *             raise ValueError("Invalid object, expected range")             # <<<<<<<<<<<<<<
 * 
 *     def _is_index_list_and_valid(self, index):
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_Invalid_object_expected_range); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 2197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "pycylon/data/table.pyx":2203
 *             return len(index) == self.row_count
 *         else:
 *             raise ValueError("Invalid object, expected List")             # <<<<<<<<<<<<<<
 * 
 *     def _is_index_list_of_columns(self, index):
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_Invalid_object_expected_List); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 2203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "pycylon/data/table.pyx":2223
 *             return index_columns
 *         else:
 *             return NotImplemented("Not Supported index pattern")             # <<<<<<<<<<<<<<
 * 
 *     def _is_index_str_and_valid(self, index):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_Not_Supported_index_pattern); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "pycylon/data/table.pyx":2692
 *                 arrow_type = get_arrow_type(expected_dtype)
 *                 if arrow_type is None:
 *                     raise ValueError(f"cast data type is not supported")             # <<<<<<<<<<<<<<
 *                 if field_id == 0:
 *                     new_field = field
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_cast_data_type_is_not_supported); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 2692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "pycylon/data/table.pyx":2719
 *             return new_cn_table
 *         else:
 *             raise ValueError("Unsupported data type representation")             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self) -> int:
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Unsupported_data_type_representa); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 2719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "pycylon/data/table.pyx":116
 * 
 *     @staticmethod
 *     def _is_pyarrow_table(pyarrow_table):             # <<<<<<<<<<<<<<
 *         return isinstance(pyarrow_table, pa.Table)
 * 
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_n_s_pyarrow_table); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_is_pyarrow_table, 116, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 116, __pyx_L1_error)

  /* "pycylon/data/table.pyx":120
 * 
 *     @staticmethod
 *     def _is_pycylon_table(pycylon_table):             # <<<<<<<<<<<<<<
 *         return isinstance(pycylon_table, Table)
 * 
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_n_s_pycylon_table); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_is_pycylon_table, 120, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 120, __pyx_L1_error)

  /* "pycylon/data/table.pyx":124
 * 
 *     @staticmethod
 *     def _is_pycylon_context(context):             # <<<<<<<<<<<<<<
 *         return isinstance(context, CylonContext)
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_n_s_context); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_is_pycylon_context, 124, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 124, __pyx_L1_error)

  /* "pycylon/data/table.pyx":195
 * 
 *     @staticmethod
 *     def merge(tables: List[Table]) -> Table:             # <<<<<<<<<<<<<<
 *         """
 *         Merging Two PyCylon tables
 */
  __pyx_tuple__41 = PyTuple_Pack(6, __pyx_n_s_tables, __pyx_n_s_ctables, __pyx_n_s_curTable, __pyx_n_s_output, __pyx_n_s_status, __pyx_n_s_table); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_merge, 195, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 195, __pyx_L1_error)

  /* "pycylon/data/table.pyx":911
 * 
 *     @staticmethod
 *     def from_arrow(context, pyarrow_table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from PyArrow Table
 */
  __pyx_tuple__43 = PyTuple_Pack(6, __pyx_n_s_context, __pyx_n_s_pyarrow_table, __pyx_n_s_ctx, __pyx_n_s_arw_table, __pyx_n_s_cn_table, __pyx_n_s_status); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_from_arrow, 911, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 911, __pyx_L1_error)

  /* "pycylon/data/table.pyx":948
 * 
 *     @staticmethod
 *     def from_numpy(context: CylonContext, col_names: List[str], ar_list: List[np.ndarray]) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from numpy arrays
 */
  __pyx_tuple__45 = PyTuple_Pack(3, __pyx_n_s_context, __pyx_n_s_col_names, __pyx_n_s_ar_list); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_from_numpy, 948, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 948, __pyx_L1_error)

  /* "pycylon/data/table.pyx":972
 * 
 *     @staticmethod
 *     def from_list(context: CylonContext, col_names: List[str], data_list: List) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from a list
 */
  __pyx_tuple__47 = PyTuple_Pack(5, __pyx_n_s_context, __pyx_n_s_col_names, __pyx_n_s_data_list, __pyx_n_s_ar_list, __pyx_n_s_data); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_from_list, 972, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 972, __pyx_L1_error)

  /* "pycylon/data/table.pyx":1001
 * 
 *     @staticmethod
 *     def from_pydict(context: CylonContext, dictionary: dict) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from a dictionary
 */
  __pyx_tuple__49 = PyTuple_Pack(2, __pyx_n_s_context, __pyx_n_s_dictionary); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_from_pydict, 1001, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 1001, __pyx_L1_error)

  /* "pycylon/data/table.pyx":1024
 * 
 *     @staticmethod
 *     def from_pandas(context: CylonContext = None, df: pd.DataFrame = None, preserve_index=False,             # <<<<<<<<<<<<<<
 *                     nthreads=None, columns=None, safe=False) -> Table:
 *         '''
 */
  __pyx_tuple__51 = PyTuple_Pack(6, __pyx_n_s_context, __pyx_n_s_df, __pyx_n_s_preserve_index, __pyx_n_s_nthreads, __pyx_n_s_columns, __pyx_n_s_safe); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_from_pandas, 1024, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 1024, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2561
 * 
 *     @staticmethod
 *     def concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):             # <<<<<<<<<<<<<<
 *         """
 *         Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.
 */
  __pyx_tuple__53 = PyTuple_Pack(4, __pyx_n_s_tables, __pyx_n_s_axis, __pyx_n_s_join, __pyx_n_s_algorithm); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_concat, 2561, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 2561, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2591
 * 
 *     @staticmethod
 *     def distributed_concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):             # <<<<<<<<<<<<<<
 *         """
 *         Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.
 */
  __pyx_tuple__55 = PyTuple_Pack(5, __pyx_n_s_tables, __pyx_n_s_axis, __pyx_n_s_join, __pyx_n_s_algorithm, __pyx_n_s_ctx); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_distributed_concat, 2591, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 2591, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2724
 *         return self.row_count
 * 
 * def _concat_impl(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort',             # <<<<<<<<<<<<<<
 *                  axis1_join_func: str = 'join'):
 *     # row-wise concat -> locally stacking up tables
 */
  __pyx_tuple__57 = PyTuple_Pack(12, __pyx_n_s_tables, __pyx_n_s_axis, __pyx_n_s_join, __pyx_n_s_algorithm, __pyx_n_s_axis1_join_func, __pyx_n_s_res_table, __pyx_n_s_formatted_tables, __pyx_n_s_new_column_names, __pyx_n_s_tb_idx, __pyx_n_s_tb1, __pyx_n_s_ctx, __pyx_n_s_i); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 2724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(5, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_concat_impl, 2724, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 2724, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2775
 *     '''
 * 
 *     def __init__(self, context: CylonContext, index: RangeIndex):             # <<<<<<<<<<<<<<
 *         self.ctx = context
 *         self.idx = index
 */
  __pyx_tuple__59 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_context, __pyx_n_s_index_2); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_init, 2775, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 2775, __pyx_L1_error)

  /* "pycylon/data/table.pyx":2780
 *         self._empty_initialize()
 * 
 *     def _empty_initialize(self):             # <<<<<<<<<<<<<<
 *         empty_data = []
 *         self.initialize(pa.Table.from_arrays([], []), self.ctx)
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_empty_data); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 2780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pycylon_data_table_pyx, __pyx_n_s_empty_initialize, 2780, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 2780, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7pycylon_4data_5table_SortOptions = &__pyx_vtable_7pycylon_4data_5table_SortOptions;
  __pyx_vtable_7pycylon_4data_5table_SortOptions.init = (void (*)(struct __pyx_obj_7pycylon_4data_5table_SortOptions *, std::shared_ptr<cylon::SortOptions>  const &))__pyx_f_7pycylon_4data_5table_11SortOptions_init;
  if (PyType_Ready(&__pyx_type_7pycylon_4data_5table_SortOptions) < 0) __PYX_ERR(0, 2785, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7pycylon_4data_5table_SortOptions.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7pycylon_4data_5table_SortOptions.tp_dictoffset && __pyx_type_7pycylon_4data_5table_SortOptions.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7pycylon_4data_5table_SortOptions.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7pycylon_4data_5table_SortOptions.tp_dict, __pyx_vtabptr_7pycylon_4data_5table_SortOptions) < 0) __PYX_ERR(0, 2785, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SortOptions, (PyObject *)&__pyx_type_7pycylon_4data_5table_SortOptions) < 0) __PYX_ERR(0, 2785, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7pycylon_4data_5table_SortOptions) < 0) __PYX_ERR(0, 2785, __pyx_L1_error)
  __pyx_ptype_7pycylon_4data_5table_SortOptions = &__pyx_type_7pycylon_4data_5table_SortOptions;
  __pyx_vtabptr_7pycylon_4data_5table_Table = &__pyx_vtable_7pycylon_4data_5table_Table;
  __pyx_vtable_7pycylon_4data_5table_Table.init = (void (*)(struct __pyx_obj_7pycylon_4data_5table_Table *, std::shared_ptr<cylon::Table>  const &))__pyx_f_7pycylon_4data_5table_5Table_init;
  __pyx_vtable_7pycylon_4data_5table_Table._get_join_ra_response = (PyObject *(*)(struct __pyx_obj_7pycylon_4data_5table_Table *, PyObject *, std::shared_ptr<cylon::Table> , cylon::Status))__pyx_f_7pycylon_4data_5table_5Table__get_join_ra_response;
  __pyx_vtable_7pycylon_4data_5table_Table._get_ra_response = (PyObject *(*)(struct __pyx_obj_7pycylon_4data_5table_Table *, PyObject *, PyObject *))__pyx_f_7pycylon_4data_5table_5Table__get_ra_response;
  __pyx_vtable_7pycylon_4data_5table_Table._get_slice_ra_response = (PyObject *(*)(struct __pyx_obj_7pycylon_4data_5table_Table *, PyObject *, PyObject *, PyObject *))__pyx_f_7pycylon_4data_5table_5Table__get_slice_ra_response;
  if (PyType_Ready(&__pyx_type_7pycylon_4data_5table_Table) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7pycylon_4data_5table_Table.tp_print = 0;
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_102__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_102__getitem__.doc = __pyx_doc_7pycylon_4data_5table_5Table_102__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_102__getitem__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__setitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_104__setitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_104__setitem__.doc = __pyx_doc_7pycylon_4data_5table_5Table_104__setitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_104__setitem__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__eq__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_106__eq__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_106__eq__.doc = __pyx_doc_7pycylon_4data_5table_5Table_106__eq__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_106__eq__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__ne__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_108__ne__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_108__ne__.doc = __pyx_doc_7pycylon_4data_5table_5Table_108__ne__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_108__ne__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__lt__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_110__lt__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_110__lt__.doc = __pyx_doc_7pycylon_4data_5table_5Table_110__lt__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_110__lt__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__gt__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_112__gt__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_112__gt__.doc = __pyx_doc_7pycylon_4data_5table_5Table_112__gt__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_112__gt__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__le__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_114__le__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_114__le__.doc = __pyx_doc_7pycylon_4data_5table_5Table_114__le__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_114__le__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__ge__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_116__ge__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_116__ge__.doc = __pyx_doc_7pycylon_4data_5table_5Table_116__ge__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_116__ge__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__or__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_118__or__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_118__or__.doc = __pyx_doc_7pycylon_4data_5table_5Table_118__or__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_118__or__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__and__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_120__and__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_120__and__.doc = __pyx_doc_7pycylon_4data_5table_5Table_120__and__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_120__and__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__invert__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_122__invert__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_122__invert__.doc = __pyx_doc_7pycylon_4data_5table_5Table_122__invert__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_122__invert__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__neg__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_124__neg__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_124__neg__.doc = __pyx_doc_7pycylon_4data_5table_5Table_124__neg__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_124__neg__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__add__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_126__add__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_126__add__.doc = __pyx_doc_7pycylon_4data_5table_5Table_126__add__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_126__add__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__sub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_128__sub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_128__sub__.doc = __pyx_doc_7pycylon_4data_5table_5Table_128__sub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_128__sub__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__mul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_130__mul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_130__mul__.doc = __pyx_doc_7pycylon_4data_5table_5Table_130__mul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_130__mul__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pycylon_4data_5table_Table, "__truediv__"); if (unlikely(!wrapper)) __PYX_ERR(0, 87, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_132__truediv__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pycylon_4data_5table_5Table_132__truediv__.doc = __pyx_doc_7pycylon_4data_5table_5Table_132__truediv__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pycylon_4data_5table_5Table_132__truediv__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7pycylon_4data_5table_Table.tp_dict, __pyx_vtabptr_7pycylon_4data_5table_Table) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Table, (PyObject *)&__pyx_type_7pycylon_4data_5table_Table) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7pycylon_4data_5table_Table) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_ptype_7pycylon_4data_5table_Table = &__pyx_type_7pycylon_4data_5table_Table;
  if (PyType_Ready(&__pyx_type_7pycylon_4data_5table___pyx_scope_struct__iterrows) < 0) __PYX_ERR(0, 2630, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7pycylon_4data_5table___pyx_scope_struct__iterrows.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7pycylon_4data_5table___pyx_scope_struct__iterrows.tp_dictoffset && __pyx_type_7pycylon_4data_5table___pyx_scope_struct__iterrows.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7pycylon_4data_5table___pyx_scope_struct__iterrows.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7pycylon_4data_5table___pyx_scope_struct__iterrows = &__pyx_type_7pycylon_4data_5table___pyx_scope_struct__iterrows;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pycylon.common.status"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_6common_6status_Status = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.common.status", "Status", sizeof(struct __pyx_obj_7pycylon_6common_6status_Status), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_6common_6status_Status),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_6common_6status_Status) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.common.join_config"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_6common_11join_config_JoinConfig = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.common.join_config", "JoinConfig", sizeof(struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_6common_11join_config_JoinConfig),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_6common_11join_config_JoinConfig) __PYX_ERR(4, 49, __pyx_L1_error)
  __pyx_vtabptr_7pycylon_6common_11join_config_JoinConfig = (struct __pyx_vtabstruct_7pycylon_6common_11join_config_JoinConfig*)__Pyx_GetVtable(__pyx_ptype_7pycylon_6common_11join_config_JoinConfig->tp_dict); if (unlikely(!__pyx_vtabptr_7pycylon_6common_11join_config_JoinConfig)) __PYX_ERR(4, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.io.csv_write_config"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_2io_16csv_write_config_CSVWriteOptions = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.io.csv_write_config", "CSVWriteOptions", sizeof(struct __pyx_obj_7pycylon_2io_16csv_write_config_CSVWriteOptions), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_2io_16csv_write_config_CSVWriteOptions),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_2io_16csv_write_config_CSVWriteOptions) __PYX_ERR(5, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_0_29_37(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_0_29_37(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_0_29_37(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(8, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("datetime"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_8datetime_date = __Pyx_ImportType_0_29_37(__pyx_t_1, "datetime", "date", sizeof(PyDateTime_Date), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyDateTime_Date),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_8datetime_date) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_8datetime_time = __Pyx_ImportType_0_29_37(__pyx_t_1, "datetime", "time", sizeof(PyDateTime_Time), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyDateTime_Time),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_8datetime_time) __PYX_ERR(2, 12, __pyx_L1_error)
  __pyx_ptype_7cpython_8datetime_datetime = __Pyx_ImportType_0_29_37(__pyx_t_1, "datetime", "datetime", sizeof(PyDateTime_DateTime), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyDateTime_DateTime),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_8datetime_datetime) __PYX_ERR(2, 15, __pyx_L1_error)
  __pyx_ptype_7cpython_8datetime_timedelta = __Pyx_ImportType_0_29_37(__pyx_t_1, "datetime", "timedelta", sizeof(PyDateTime_Delta), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyDateTime_Delta),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_8datetime_timedelta) __PYX_ERR(2, 18, __pyx_L1_error)
  __pyx_ptype_7cpython_8datetime_tzinfo = __Pyx_ImportType_0_29_37(__pyx_t_1, "datetime", "tzinfo", sizeof(PyDateTime_TZInfo), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyDateTime_TZInfo),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_8datetime_tzinfo) __PYX_ERR(2, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyarrow.lib"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyarrow_3lib__Weakrefable = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "_Weakrefable", sizeof(struct __pyx_obj_7pyarrow_3lib__Weakrefable), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib__Weakrefable),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib__Weakrefable) __PYX_ERR(9, 36, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_IpcWriteOptions = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "IpcWriteOptions", sizeof(struct __pyx_obj_7pyarrow_3lib_IpcWriteOptions), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_IpcWriteOptions),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_IpcWriteOptions) __PYX_ERR(9, 40, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_IpcReadOptions = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "IpcReadOptions", sizeof(struct __pyx_obj_7pyarrow_3lib_IpcReadOptions), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_IpcReadOptions),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_IpcReadOptions) __PYX_ERR(9, 44, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Message = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Message", sizeof(struct __pyx_obj_7pyarrow_3lib_Message), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Message),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Message) __PYX_ERR(9, 49, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MemoryPool = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "MemoryPool", sizeof(struct __pyx_obj_7pyarrow_3lib_MemoryPool), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_MemoryPool),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_MemoryPool) __PYX_ERR(9, 54, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MemoryPool = (struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MemoryPool->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MemoryPool)) __PYX_ERR(9, 54, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DataType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "DataType", sizeof(struct __pyx_obj_7pyarrow_3lib_DataType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_DataType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_DataType) __PYX_ERR(9, 67, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DataType = (struct __pyx_vtabstruct_7pyarrow_3lib_DataType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DataType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DataType)) __PYX_ERR(9, 67, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "ListType", sizeof(struct __pyx_obj_7pyarrow_3lib_ListType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_ListType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_ListType) __PYX_ERR(9, 77, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListType = (struct __pyx_vtabstruct_7pyarrow_3lib_ListType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListType)) __PYX_ERR(9, 77, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "LargeListType", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_LargeListType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_LargeListType) __PYX_ERR(9, 82, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListType = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListType)) __PYX_ERR(9, 82, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MapType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "MapType", sizeof(struct __pyx_obj_7pyarrow_3lib_MapType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_MapType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_MapType) __PYX_ERR(9, 87, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MapType = (struct __pyx_vtabstruct_7pyarrow_3lib_MapType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MapType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MapType)) __PYX_ERR(9, 87, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeListType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "FixedSizeListType", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeListType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_FixedSizeListType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_FixedSizeListType) __PYX_ERR(9, 92, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeListType = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeListType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeListType)) __PYX_ERR(9, 92, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StructType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "StructType", sizeof(struct __pyx_obj_7pyarrow_3lib_StructType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_StructType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_StructType) __PYX_ERR(9, 97, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StructType = (struct __pyx_vtabstruct_7pyarrow_3lib_StructType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StructType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StructType)) __PYX_ERR(9, 97, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryMemo = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "DictionaryMemo", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryMemo), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_DictionaryMemo),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_DictionaryMemo) __PYX_ERR(9, 104, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "DictionaryType", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_DictionaryType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_DictionaryType) __PYX_ERR(9, 112, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DictionaryType = (struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DictionaryType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DictionaryType)) __PYX_ERR(9, 112, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_TimestampType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "TimestampType", sizeof(struct __pyx_obj_7pyarrow_3lib_TimestampType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_TimestampType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_TimestampType) __PYX_ERR(9, 117, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_TimestampType = (struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_TimestampType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_TimestampType)) __PYX_ERR(9, 117, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Time32Type = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Time32Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Time32Type), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Time32Type),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Time32Type) __PYX_ERR(9, 122, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Time32Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Time32Type->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Time32Type)) __PYX_ERR(9, 122, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Time64Type = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Time64Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Time64Type), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Time64Type),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Time64Type) __PYX_ERR(9, 127, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Time64Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Time64Type->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Time64Type)) __PYX_ERR(9, 127, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DurationType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "DurationType", sizeof(struct __pyx_obj_7pyarrow_3lib_DurationType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_DurationType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_DurationType) __PYX_ERR(9, 132, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DurationType = (struct __pyx_vtabstruct_7pyarrow_3lib_DurationType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DurationType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DurationType)) __PYX_ERR(9, 132, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "FixedSizeBinaryType", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType) __PYX_ERR(9, 137, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType)) __PYX_ERR(9, 137, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal128Type = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Decimal128Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal128Type), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Decimal128Type),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Decimal128Type) __PYX_ERR(9, 142, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal128Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal128Type->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal128Type)) __PYX_ERR(9, 142, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal256Type = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Decimal256Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal256Type), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Decimal256Type),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Decimal256Type) __PYX_ERR(9, 147, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal256Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal256Type->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal256Type)) __PYX_ERR(9, 147, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BaseExtensionType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "BaseExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_BaseExtensionType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_BaseExtensionType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_BaseExtensionType) __PYX_ERR(9, 152, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BaseExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BaseExtensionType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BaseExtensionType)) __PYX_ERR(9, 152, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ExtensionType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "ExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_ExtensionType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_ExtensionType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_ExtensionType) __PYX_ERR(9, 157, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ExtensionType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ExtensionType)) __PYX_ERR(9, 157, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_PyExtensionType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "PyExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_PyExtensionType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_PyExtensionType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_PyExtensionType) __PYX_ERR(9, 162, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_PyExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_PyExtensionType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_PyExtensionType)) __PYX_ERR(9, 162, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__Metadata = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "_Metadata", sizeof(struct __pyx_obj_7pyarrow_3lib__Metadata), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib__Metadata),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib__Metadata) __PYX_ERR(9, 166, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_KeyValueMetadata = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "KeyValueMetadata", sizeof(struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_KeyValueMetadata) __PYX_ERR(9, 172, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_KeyValueMetadata = (struct __pyx_vtabstruct_7pyarrow_3lib_KeyValueMetadata*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_KeyValueMetadata->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_KeyValueMetadata)) __PYX_ERR(9, 172, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Field = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Field", sizeof(struct __pyx_obj_7pyarrow_3lib_Field), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Field),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Field) __PYX_ERR(9, 184, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Field = (struct __pyx_vtabstruct_7pyarrow_3lib_Field*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Field->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Field)) __PYX_ERR(9, 184, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Schema = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Schema", sizeof(struct __pyx_obj_7pyarrow_3lib_Schema), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Schema),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Schema) __PYX_ERR(9, 195, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Schema = (struct __pyx_vtabstruct_7pyarrow_3lib_Schema*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Schema->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Schema)) __PYX_ERR(9, 195, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Scalar = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Scalar", sizeof(struct __pyx_obj_7pyarrow_3lib_Scalar), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Scalar),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Scalar) __PYX_ERR(9, 204, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Scalar = (struct __pyx_vtabstruct_7pyarrow_3lib_Scalar*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Scalar->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Scalar)) __PYX_ERR(9, 204, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__PandasConvertible = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "_PandasConvertible", sizeof(struct __pyx_obj_7pyarrow_3lib__PandasConvertible), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib__PandasConvertible),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib__PandasConvertible) __PYX_ERR(9, 216, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Array) __PYX_ERR(9, 220, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Array)) __PYX_ERR(9, 220, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Tensor = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Tensor", sizeof(struct __pyx_obj_7pyarrow_3lib_Tensor), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Tensor),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Tensor) __PYX_ERR(9, 235, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Tensor = (struct __pyx_vtabstruct_7pyarrow_3lib_Tensor*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Tensor->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Tensor)) __PYX_ERR(9, 235, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseCSRMatrix = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "SparseCSRMatrix", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix) __PYX_ERR(9, 246, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseCSRMatrix = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSRMatrix*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseCSRMatrix)) __PYX_ERR(9, 246, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseCSCMatrix = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "SparseCSCMatrix", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix) __PYX_ERR(9, 257, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseCSCMatrix = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSCMatrix*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseCSCMatrix)) __PYX_ERR(9, 257, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseCOOTensor = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "SparseCOOTensor", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_SparseCOOTensor) __PYX_ERR(9, 268, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseCOOTensor = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseCOOTensor*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseCOOTensor->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseCOOTensor)) __PYX_ERR(9, 268, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseCSFTensor = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "SparseCSFTensor", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_SparseCSFTensor) __PYX_ERR(9, 279, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseCSFTensor = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSFTensor*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseCSFTensor->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseCSFTensor)) __PYX_ERR(9, 279, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NullArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "NullArray", sizeof(struct __pyx_obj_7pyarrow_3lib_NullArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_NullArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_NullArray) __PYX_ERR(9, 290, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NullArray = (struct __pyx_vtabstruct_7pyarrow_3lib_NullArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NullArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NullArray)) __PYX_ERR(9, 290, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BooleanArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "BooleanArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BooleanArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_BooleanArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_BooleanArray) __PYX_ERR(9, 294, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BooleanArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BooleanArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BooleanArray)) __PYX_ERR(9, 294, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NumericArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "NumericArray", sizeof(struct __pyx_obj_7pyarrow_3lib_NumericArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_NumericArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_NumericArray) __PYX_ERR(9, 298, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NumericArray = (struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NumericArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NumericArray)) __PYX_ERR(9, 298, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_IntegerArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "IntegerArray", sizeof(struct __pyx_obj_7pyarrow_3lib_IntegerArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_IntegerArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_IntegerArray) __PYX_ERR(9, 302, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_IntegerArray = (struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_IntegerArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_IntegerArray)) __PYX_ERR(9, 302, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FloatingPointArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "FloatingPointArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FloatingPointArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_FloatingPointArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_FloatingPointArray) __PYX_ERR(9, 306, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FloatingPointArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FloatingPointArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FloatingPointArray)) __PYX_ERR(9, 306, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int8Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Int8Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int8Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Int8Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Int8Array) __PYX_ERR(9, 310, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int8Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int8Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int8Array)) __PYX_ERR(9, 310, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt8Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "UInt8Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt8Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_UInt8Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_UInt8Array) __PYX_ERR(9, 314, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt8Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt8Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt8Array)) __PYX_ERR(9, 314, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int16Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Int16Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int16Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Int16Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Int16Array) __PYX_ERR(9, 318, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int16Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int16Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int16Array)) __PYX_ERR(9, 318, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt16Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "UInt16Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt16Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_UInt16Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_UInt16Array) __PYX_ERR(9, 322, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt16Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt16Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt16Array)) __PYX_ERR(9, 322, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int32Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Int32Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int32Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Int32Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Int32Array) __PYX_ERR(9, 326, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int32Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int32Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int32Array)) __PYX_ERR(9, 326, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt32Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "UInt32Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt32Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_UInt32Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_UInt32Array) __PYX_ERR(9, 330, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt32Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt32Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt32Array)) __PYX_ERR(9, 330, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int64Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Int64Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int64Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Int64Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Int64Array) __PYX_ERR(9, 334, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int64Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int64Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int64Array)) __PYX_ERR(9, 334, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt64Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "UInt64Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt64Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_UInt64Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_UInt64Array) __PYX_ERR(9, 338, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt64Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt64Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt64Array)) __PYX_ERR(9, 338, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_HalfFloatArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "HalfFloatArray", sizeof(struct __pyx_obj_7pyarrow_3lib_HalfFloatArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_HalfFloatArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_HalfFloatArray) __PYX_ERR(9, 342, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_HalfFloatArray = (struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_HalfFloatArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_HalfFloatArray)) __PYX_ERR(9, 342, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FloatArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "FloatArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FloatArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_FloatArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_FloatArray) __PYX_ERR(9, 346, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FloatArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FloatArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FloatArray)) __PYX_ERR(9, 346, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DoubleArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "DoubleArray", sizeof(struct __pyx_obj_7pyarrow_3lib_DoubleArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_DoubleArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_DoubleArray) __PYX_ERR(9, 350, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DoubleArray = (struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DoubleArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DoubleArray)) __PYX_ERR(9, 350, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "FixedSizeBinaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray) __PYX_ERR(9, 354, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray)) __PYX_ERR(9, 354, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal128Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Decimal128Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal128Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Decimal128Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Decimal128Array) __PYX_ERR(9, 358, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal128Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal128Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal128Array)) __PYX_ERR(9, 358, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal256Array = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Decimal256Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal256Array), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Decimal256Array),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Decimal256Array) __PYX_ERR(9, 362, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal256Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal256Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal256Array)) __PYX_ERR(9, 362, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StructArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "StructArray", sizeof(struct __pyx_obj_7pyarrow_3lib_StructArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_StructArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_StructArray) __PYX_ERR(9, 366, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StructArray = (struct __pyx_vtabstruct_7pyarrow_3lib_StructArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StructArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StructArray)) __PYX_ERR(9, 366, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BaseListArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "BaseListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BaseListArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_BaseListArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_BaseListArray) __PYX_ERR(9, 370, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BaseListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BaseListArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BaseListArray)) __PYX_ERR(9, 370, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "ListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ListArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_ListArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_ListArray) __PYX_ERR(9, 374, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListArray)) __PYX_ERR(9, 374, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "LargeListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_LargeListArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_LargeListArray) __PYX_ERR(9, 378, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListArray)) __PYX_ERR(9, 378, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MapArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "MapArray", sizeof(struct __pyx_obj_7pyarrow_3lib_MapArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_MapArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_MapArray) __PYX_ERR(9, 382, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MapArray = (struct __pyx_vtabstruct_7pyarrow_3lib_MapArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MapArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MapArray)) __PYX_ERR(9, 382, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeListArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "FixedSizeListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeListArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_FixedSizeListArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_FixedSizeListArray) __PYX_ERR(9, 386, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeListArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeListArray)) __PYX_ERR(9, 386, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UnionArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "UnionArray", sizeof(struct __pyx_obj_7pyarrow_3lib_UnionArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_UnionArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_UnionArray) __PYX_ERR(9, 390, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UnionArray = (struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UnionArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UnionArray)) __PYX_ERR(9, 390, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StringArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "StringArray", sizeof(struct __pyx_obj_7pyarrow_3lib_StringArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_StringArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_StringArray) __PYX_ERR(9, 394, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StringArray = (struct __pyx_vtabstruct_7pyarrow_3lib_StringArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StringArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StringArray)) __PYX_ERR(9, 394, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BinaryArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "BinaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BinaryArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_BinaryArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_BinaryArray) __PYX_ERR(9, 398, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BinaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BinaryArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BinaryArray)) __PYX_ERR(9, 398, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "DictionaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_DictionaryArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_DictionaryArray) __PYX_ERR(9, 402, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DictionaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DictionaryArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DictionaryArray)) __PYX_ERR(9, 402, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ExtensionArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "ExtensionArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ExtensionArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_ExtensionArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_ExtensionArray) __PYX_ERR(9, 407, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ExtensionArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ExtensionArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ExtensionArray)) __PYX_ERR(9, 407, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "MonthDayNanoIntervalArray", sizeof(struct __pyx_obj_7pyarrow_3lib_MonthDayNanoIntervalArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_MonthDayNanoIntervalArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray) __PYX_ERR(9, 411, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MonthDayNanoIntervalArray = (struct __pyx_vtabstruct_7pyarrow_3lib_MonthDayNanoIntervalArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MonthDayNanoIntervalArray)) __PYX_ERR(9, 411, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ChunkedArray = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "ChunkedArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ChunkedArray), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_ChunkedArray),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_ChunkedArray) __PYX_ERR(9, 419, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ChunkedArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ChunkedArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ChunkedArray)) __PYX_ERR(9, 419, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Table = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Table", sizeof(struct __pyx_obj_7pyarrow_3lib_Table), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Table),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Table) __PYX_ERR(9, 432, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Table = (struct __pyx_vtabstruct_7pyarrow_3lib_Table*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Table->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Table)) __PYX_ERR(9, 432, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_RecordBatch = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "RecordBatch", sizeof(struct __pyx_obj_7pyarrow_3lib_RecordBatch), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_RecordBatch),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_RecordBatch) __PYX_ERR(9, 440, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_RecordBatch = (struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_RecordBatch->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_RecordBatch)) __PYX_ERR(9, 440, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Buffer = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Buffer", sizeof(struct __pyx_obj_7pyarrow_3lib_Buffer), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Buffer),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Buffer) __PYX_ERR(9, 449, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Buffer = (struct __pyx_vtabstruct_7pyarrow_3lib_Buffer*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Buffer->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Buffer)) __PYX_ERR(9, 449, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ResizableBuffer = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "ResizableBuffer", sizeof(struct __pyx_obj_7pyarrow_3lib_ResizableBuffer), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_ResizableBuffer),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_ResizableBuffer) __PYX_ERR(9, 459, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ResizableBuffer = (struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ResizableBuffer->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ResizableBuffer)) __PYX_ERR(9, 459, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NativeFile = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "NativeFile", sizeof(struct __pyx_obj_7pyarrow_3lib_NativeFile), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_NativeFile),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_NativeFile) __PYX_ERR(9, 464, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NativeFile = (struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NativeFile->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NativeFile)) __PYX_ERR(9, 464, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BufferedInputStream = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "BufferedInputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_BufferedInputStream), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_BufferedInputStream),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_BufferedInputStream) __PYX_ERR(9, 487, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BufferedInputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BufferedInputStream->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BufferedInputStream)) __PYX_ERR(9, 487, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BufferedOutputStream = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "BufferedOutputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_BufferedOutputStream) __PYX_ERR(9, 491, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BufferedOutputStream->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream)) __PYX_ERR(9, 491, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_CompressedInputStream = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "CompressedInputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_CompressedInputStream), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_CompressedInputStream),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_CompressedInputStream) __PYX_ERR(9, 495, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_CompressedInputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_CompressedInputStream->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_CompressedInputStream)) __PYX_ERR(9, 495, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_CompressedOutputStream = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "CompressedOutputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_CompressedOutputStream) __PYX_ERR(9, 499, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_CompressedOutputStream->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream)) __PYX_ERR(9, 499, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__CRecordBatchWriter = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "_CRecordBatchWriter", sizeof(struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter) __PYX_ERR(9, 503, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_RecordBatchReader = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "RecordBatchReader", sizeof(struct __pyx_obj_7pyarrow_3lib_RecordBatchReader), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_RecordBatchReader),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_RecordBatchReader) __PYX_ERR(9, 508, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Codec = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "Codec", sizeof(struct __pyx_obj_7pyarrow_3lib_Codec), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_Codec),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_Codec) __PYX_ERR(9, 513, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Codec = (struct __pyx_vtabstruct_7pyarrow_3lib_Codec*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Codec->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Codec)) __PYX_ERR(9, 513, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StopToken = __Pyx_ImportType_0_29_37(__pyx_t_1, "pyarrow.lib", "StopToken", sizeof(struct __pyx_obj_7pyarrow_3lib_StopToken), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pyarrow_3lib_StopToken),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pyarrow_3lib_StopToken) __PYX_ERR(9, 521, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StopToken = (struct __pyx_vtabstruct_7pyarrow_3lib_StopToken*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StopToken->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StopToken)) __PYX_ERR(9, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.net.comm_config"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_3net_11comm_config_CommConfig = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.net.comm_config", "CommConfig", sizeof(struct __pyx_obj_7pycylon_3net_11comm_config_CommConfig), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_3net_11comm_config_CommConfig),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_3net_11comm_config_CommConfig) __PYX_ERR(10, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.net.mpi_config"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_3net_10mpi_config_MPIConfig = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.net.mpi_config", "MPIConfig", sizeof(struct __pyx_obj_7pycylon_3net_10mpi_config_MPIConfig), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_3net_10mpi_config_MPIConfig),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_3net_10mpi_config_MPIConfig) __PYX_ERR(11, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.data.data_type"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_4data_9data_type_DataType = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.data.data_type", "DataType", sizeof(struct __pyx_obj_7pycylon_4data_9data_type_DataType), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_4data_9data_type_DataType),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_4data_9data_type_DataType) __PYX_ERR(12, 48, __pyx_L1_error)
  __pyx_vtabptr_7pycylon_4data_9data_type_DataType = (struct __pyx_vtabstruct_7pycylon_4data_9data_type_DataType*)__Pyx_GetVtable(__pyx_ptype_7pycylon_4data_9data_type_DataType->tp_dict); if (unlikely(!__pyx_vtabptr_7pycylon_4data_9data_type_DataType)) __PYX_ERR(12, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.data.scalar"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_4data_6scalar_Scalar = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.data.scalar", "Scalar", sizeof(struct __pyx_obj_7pycylon_4data_6scalar_Scalar), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_4data_6scalar_Scalar),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_4data_6scalar_Scalar) __PYX_ERR(13, 29, __pyx_L1_error)
  __pyx_vtabptr_7pycylon_4data_6scalar_Scalar = (struct __pyx_vtabstruct_7pycylon_4data_6scalar_Scalar*)__Pyx_GetVtable(__pyx_ptype_7pycylon_4data_6scalar_Scalar->tp_dict); if (unlikely(!__pyx_vtabptr_7pycylon_4data_6scalar_Scalar)) __PYX_ERR(13, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.net.communicator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_3net_12communicator_Communicator = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.net.communicator", "Communicator", sizeof(struct __pyx_obj_7pycylon_3net_12communicator_Communicator), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_3net_12communicator_Communicator),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_3net_12communicator_Communicator) __PYX_ERR(14, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.ctx.context"); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_3ctx_7context_CylonContext = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.ctx.context", "CylonContext", sizeof(struct __pyx_obj_7pycylon_3ctx_7context_CylonContext), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_3ctx_7context_CylonContext),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_3ctx_7context_CylonContext) __PYX_ERR(15, 66, __pyx_L1_error)
  __pyx_vtabptr_7pycylon_3ctx_7context_CylonContext = (struct __pyx_vtabstruct_7pycylon_3ctx_7context_CylonContext*)__Pyx_GetVtable(__pyx_ptype_7pycylon_3ctx_7context_CylonContext->tp_dict); if (unlikely(!__pyx_vtabptr_7pycylon_3ctx_7context_CylonContext)) __PYX_ERR(15, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.indexing.cyindex"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_8indexing_7cyindex_BaseArrowIndex = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.indexing.cyindex", "BaseArrowIndex", sizeof(struct __pyx_obj_7pycylon_8indexing_7cyindex_BaseArrowIndex), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_8indexing_7cyindex_BaseArrowIndex),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_8indexing_7cyindex_BaseArrowIndex) __PYX_ERR(16, 45, __pyx_L1_error)
  __pyx_vtabptr_7pycylon_8indexing_7cyindex_BaseArrowIndex = (struct __pyx_vtabstruct_7pycylon_8indexing_7cyindex_BaseArrowIndex*)__Pyx_GetVtable(__pyx_ptype_7pycylon_8indexing_7cyindex_BaseArrowIndex->tp_dict); if (unlikely(!__pyx_vtabptr_7pycylon_8indexing_7cyindex_BaseArrowIndex)) __PYX_ERR(16, 45, __pyx_L1_error)
  __pyx_ptype_7pycylon_8indexing_7cyindex_ArrowLocIndexer = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.indexing.cyindex", "ArrowLocIndexer", sizeof(struct __pyx_obj_7pycylon_8indexing_7cyindex_ArrowLocIndexer), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_8indexing_7cyindex_ArrowLocIndexer),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_8indexing_7cyindex_ArrowLocIndexer) __PYX_ERR(16, 109, __pyx_L1_error)
  __pyx_ptype_7pycylon_8indexing_7cyindex_ArrowILocIndexer = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.indexing.cyindex", "ArrowILocIndexer", sizeof(struct __pyx_obj_7pycylon_8indexing_7cyindex_ArrowILocIndexer), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_8indexing_7cyindex_ArrowILocIndexer),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_8indexing_7cyindex_ArrowILocIndexer) __PYX_ERR(16, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.data.column"); if (unlikely(!__pyx_t_1)) __PYX_ERR(17, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_4data_6column_Column = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.data.column", "Column", sizeof(struct __pyx_obj_7pycylon_4data_6column_Column), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_4data_6column_Column),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_4data_6column_Column) __PYX_ERR(17, 60, __pyx_L1_error)
  __pyx_vtabptr_7pycylon_4data_6column_Column = (struct __pyx_vtabstruct_7pycylon_4data_6column_Column*)__Pyx_GetVtable(__pyx_ptype_7pycylon_4data_6column_Column->tp_dict); if (unlikely(!__pyx_vtabptr_7pycylon_4data_6column_Column)) __PYX_ERR(17, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.net.mpi_communicator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(18, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_3net_16mpi_communicator_MPICommunicator = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.net.mpi_communicator", "MPICommunicator", sizeof(struct __pyx_obj_7pycylon_3net_16mpi_communicator_MPICommunicator), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_3net_16mpi_communicator_MPICommunicator),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_3net_16mpi_communicator_MPICommunicator) __PYX_ERR(18, 37, __pyx_L1_error)
  __pyx_vtabptr_7pycylon_3net_16mpi_communicator_MPICommunicator = (struct __pyx_vtabstruct_7pycylon_3net_16mpi_communicator_MPICommunicator*)__Pyx_GetVtable(__pyx_ptype_7pycylon_3net_16mpi_communicator_MPICommunicator->tp_dict); if (unlikely(!__pyx_vtabptr_7pycylon_3net_16mpi_communicator_MPICommunicator)) __PYX_ERR(18, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.io.csv_read_config"); if (unlikely(!__pyx_t_1)) __PYX_ERR(19, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pycylon_2io_15csv_read_config_CSVReadOptions = __Pyx_ImportType_0_29_37(__pyx_t_1, "pycylon.io.csv_read_config", "CSVReadOptions", sizeof(struct __pyx_obj_7pycylon_2io_15csv_read_config_CSVReadOptions), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(struct __pyx_obj_7pycylon_2io_15csv_read_config_CSVReadOptions),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7pycylon_2io_15csv_read_config_CSVReadOptions) __PYX_ERR(19, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pyarrow.lib"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pyarrow_wrap_table", (void (**)(void))&__pyx_f_7pyarrow_3lib_pyarrow_wrap_table, "PyObject *(std::shared_ptr< arrow::Table>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pyarrow_unwrap_table", (void (**)(void))&__pyx_f_7pyarrow_3lib_pyarrow_unwrap_table, "std::shared_ptr< arrow::Table>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pycylon.api.lib"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_unwrap_context", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_context, "std::shared_ptr<cylon::CylonContext>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_unwrap_table", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_table, "std::shared_ptr<cylon::Table>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_unwrap_csv_read_options", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_csv_read_options, "cylon::io::config::CSVReadOptions (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_unwrap_csv_write_options", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_csv_write_options, "cylon::io::config::CSVWriteOptions (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_unwrap_sort_options", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_sort_options, "std::shared_ptr<cylon::SortOptions>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_unwrap_base_arrow_index", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_base_arrow_index, "std::shared_ptr<cylon::BaseArrowIndex>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_unwrap_join_config", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_unwrap_join_config, "cylon::join::config::JoinConfig *(PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_wrap_table", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_wrap_table, "PyObject *(std::shared_ptr<cylon::Table>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_wrap_context", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_wrap_context, "PyObject *(std::shared_ptr<cylon::CylonContext>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_37(__pyx_t_1, "pycylon_wrap_base_arrow_index", (void (**)(void))&__pyx_f_7pycylon_3api_3lib_pycylon_wrap_base_arrow_index, "PyObject *(std::shared_ptr<cylon::BaseArrowIndex>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittable(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittable(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_table(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_table(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_table(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'table' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_table(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("table", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pycylon__data__table) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pycylon.data.table")) {
      if (unlikely(PyDict_SetItemString(modules, "pycylon.data.table", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pycylon/data/table.pyx":21
 * from libcpp.pair cimport pair
 * from pycylon.common.status cimport CStatus
 * from pycylon.common.status import Status             # <<<<<<<<<<<<<<
 * from pycylon.common.join_config cimport CJoinType
 * from pycylon.common.join_config cimport CJoinAlgorithm
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Status);
  __Pyx_GIVEREF(__pyx_n_s_Status);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Status);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pycylon_common_status, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Status, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":25
 * from pycylon.common.join_config cimport CJoinAlgorithm
 * from pycylon.common.join_config cimport CJoinConfig
 * from pycylon.common.join_config import JoinConfig, StrToJoinType, StrToJoinAlgorithm             # <<<<<<<<<<<<<<
 * from pycylon.common.join_config cimport JoinConfig
 * from pycylon.io.csv_write_config cimport CCSVWriteOptions
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_JoinConfig);
  __Pyx_GIVEREF(__pyx_n_s_JoinConfig);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_JoinConfig);
  __Pyx_INCREF(__pyx_n_s_StrToJoinType);
  __Pyx_GIVEREF(__pyx_n_s_StrToJoinType);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_StrToJoinType);
  __Pyx_INCREF(__pyx_n_s_StrToJoinAlgorithm);
  __Pyx_GIVEREF(__pyx_n_s_StrToJoinAlgorithm);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_StrToJoinAlgorithm);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pycylon_common_join_config, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_StrToJoinType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StrToJoinType, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_StrToJoinAlgorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StrToJoinAlgorithm, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":28
 * from pycylon.common.join_config cimport JoinConfig
 * from pycylon.io.csv_write_config cimport CCSVWriteOptions
 * from pycylon.io.csv_write_config import CSVWriteOptions             # <<<<<<<<<<<<<<
 * from pycylon.io.csv_write_config cimport CSVWriteOptions
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_CSVWriteOptions);
  __Pyx_GIVEREF(__pyx_n_s_CSVWriteOptions);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_CSVWriteOptions);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pycylon_io_csv_write_config, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":38
 * 
 * from pycylon.ctx.context cimport CCylonContext
 * from pycylon.ctx.context import CylonContext             # <<<<<<<<<<<<<<
 * from pycylon.api.lib cimport (pycylon_wrap_context,
 * pycylon_unwrap_context,
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CylonContext);
  __Pyx_GIVEREF(__pyx_n_s_CylonContext);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CylonContext);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pycylon_ctx_context, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CylonContext); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CylonContext, __pyx_t_2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":52
 * from pycylon.data.aggregates cimport (Sum, Count, Min, Max)
 * from pycylon.data.aggregates cimport CGroupByAggregationOp
 * from pycylon.data.aggregates import AggregationOp, AggregationOpString             # <<<<<<<<<<<<<<
 * from pycylon.data.groupby cimport (DistributedHashGroupBy, DistributedPipelineGroupBy, MapredHashGroupBy)
 * from pycylon.data import compute
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_AggregationOp);
  __Pyx_GIVEREF(__pyx_n_s_AggregationOp);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_AggregationOp);
  __Pyx_INCREF(__pyx_n_s_AggregationOpString);
  __Pyx_GIVEREF(__pyx_n_s_AggregationOpString);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_AggregationOpString);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pycylon_data_aggregates, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_AggregationOp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AggregationOp, __pyx_t_1) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_AggregationOpString); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AggregationOpString, __pyx_t_1) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":54
 * from pycylon.data.aggregates import AggregationOp, AggregationOpString
 * from pycylon.data.groupby cimport (DistributedHashGroupBy, DistributedPipelineGroupBy, MapredHashGroupBy)
 * from pycylon.data import compute             # <<<<<<<<<<<<<<
 * 
 * from pycylon.index import RangeIndex, NumericIndex, range_calculator, process_index_by_value
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_compute);
  __Pyx_GIVEREF(__pyx_n_s_compute);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_compute);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pycylon_data, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_compute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute, __pyx_t_2) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":56
 * from pycylon.data import compute
 * 
 * from pycylon.index import RangeIndex, NumericIndex, range_calculator, process_index_by_value             # <<<<<<<<<<<<<<
 * from pycylon.indexing.index_utils import IndexUtil
 * 
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_RangeIndex);
  __Pyx_GIVEREF(__pyx_n_s_RangeIndex);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_RangeIndex);
  __Pyx_INCREF(__pyx_n_s_NumericIndex);
  __Pyx_GIVEREF(__pyx_n_s_NumericIndex);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_NumericIndex);
  __Pyx_INCREF(__pyx_n_s_range_calculator);
  __Pyx_GIVEREF(__pyx_n_s_range_calculator);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_range_calculator);
  __Pyx_INCREF(__pyx_n_s_process_index_by_value);
  __Pyx_GIVEREF(__pyx_n_s_process_index_by_value);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_process_index_by_value);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pycylon_index, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RangeIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RangeIndex, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NumericIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NumericIndex, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_range_calculator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_range_calculator, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_process_index_by_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_process_index_by_value, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":57
 * 
 * from pycylon.index import RangeIndex, NumericIndex, range_calculator, process_index_by_value
 * from pycylon.indexing.index_utils import IndexUtil             # <<<<<<<<<<<<<<
 * 
 * from pycylon.indexing.cyindex cimport CBaseArrowIndex
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_IndexUtil);
  __Pyx_GIVEREF(__pyx_n_s_IndexUtil);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_IndexUtil);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pycylon_indexing_index_utils, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_IndexUtil); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IndexUtil, __pyx_t_2) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":60
 * 
 * from pycylon.indexing.cyindex cimport CBaseArrowIndex
 * from pycylon.indexing.cyindex import BaseArrowIndex             # <<<<<<<<<<<<<<
 * from pycylon.indexing.cyindex import IndexingType
 * from pycylon.indexing.cyindex import PyLocIndexer
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BaseArrowIndex);
  __Pyx_GIVEREF(__pyx_n_s_BaseArrowIndex);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BaseArrowIndex);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pycylon_indexing_cyindex, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BaseArrowIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BaseArrowIndex, __pyx_t_1) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":61
 * from pycylon.indexing.cyindex cimport CBaseArrowIndex
 * from pycylon.indexing.cyindex import BaseArrowIndex
 * from pycylon.indexing.cyindex import IndexingType             # <<<<<<<<<<<<<<
 * from pycylon.indexing.cyindex import PyLocIndexer
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_IndexingType);
  __Pyx_GIVEREF(__pyx_n_s_IndexingType);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_IndexingType);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pycylon_indexing_cyindex, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_IndexingType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IndexingType, __pyx_t_2) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":62
 * from pycylon.indexing.cyindex import BaseArrowIndex
 * from pycylon.indexing.cyindex import IndexingType
 * from pycylon.indexing.cyindex import PyLocIndexer             # <<<<<<<<<<<<<<
 * 
 * from pycylon.util.type_utils import get_arrow_type
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PyLocIndexer);
  __Pyx_GIVEREF(__pyx_n_s_PyLocIndexer);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PyLocIndexer);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pycylon_indexing_cyindex, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PyLocIndexer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyLocIndexer, __pyx_t_1) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":64
 * from pycylon.indexing.cyindex import PyLocIndexer
 * 
 * from pycylon.util.type_utils import get_arrow_type             # <<<<<<<<<<<<<<
 * 
 * import math
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_get_arrow_type);
  __Pyx_GIVEREF(__pyx_n_s_get_arrow_type);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_get_arrow_type);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pycylon_util_type_utils, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_get_arrow_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_arrow_type, __pyx_t_2) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":66
 * from pycylon.util.type_utils import get_arrow_type
 * 
 * import math             # <<<<<<<<<<<<<<
 * import pyarrow as pa
 * import numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":67
 * 
 * import math
 * import pyarrow as pa             # <<<<<<<<<<<<<<
 * import numpy as np
 * import pandas as pd
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyarrow, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pa, __pyx_t_1) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":68
 * import math
 * import pyarrow as pa
 * import numpy as np             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from typing import List
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":69
 * import pyarrow as pa
 * import numpy as np
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from typing import List
 * import warnings
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pandas, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_1) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycylon/data/table.pyx":70
 * import numpy as np
 * import pandas as pd
 * from typing import List             # <<<<<<<<<<<<<<
 * import warnings
 * import operator
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_List);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_1) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":71
 * import pandas as pd
 * from typing import List
 * import warnings             # <<<<<<<<<<<<<<
 * import operator
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_warnings, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":72
 * from typing import List
 * import warnings
 * import operator             # <<<<<<<<<<<<<<
 * 
 * '''
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_operator, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_operator, __pyx_t_2) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":116
 * 
 *     @staticmethod
 *     def _is_pyarrow_table(pyarrow_table):             # <<<<<<<<<<<<<<
 *         return isinstance(pyarrow_table, pa.Table)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_7_is_pyarrow_table, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_is_pyarrow_table, __pyx_t_2) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":115
 *         self._index = None
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def _is_pyarrow_table(pyarrow_table):
 *         return isinstance(pyarrow_table, pa.Table)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_is_pyarrow_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_is_pyarrow_table, __pyx_t_1) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":120
 * 
 *     @staticmethod
 *     def _is_pycylon_table(pycylon_table):             # <<<<<<<<<<<<<<
 *         return isinstance(pycylon_table, Table)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_9_is_pycylon_table, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_is_pycylon_table, __pyx_t_1) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":119
 *         return isinstance(pyarrow_table, pa.Table)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def _is_pycylon_table(pycylon_table):
 *         return isinstance(pycylon_table, Table)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_is_pycylon_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_is_pycylon_table, __pyx_t_2) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":124
 * 
 *     @staticmethod
 *     def _is_pycylon_context(context):             # <<<<<<<<<<<<<<
 *         return isinstance(context, CylonContext)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_11_is_pycylon_context, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_is_pycylon_context, __pyx_t_2) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":123
 *         return isinstance(pycylon_table, Table)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def _is_pycylon_context(context):
 *         return isinstance(context, CylonContext)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_is_pycylon_context); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_is_pycylon_context, __pyx_t_1) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":195
 * 
 *     @staticmethod
 *     def merge(tables: List[Table]) -> Table:             # <<<<<<<<<<<<<<
 *         """
 *         Merging Two PyCylon tables
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_21merge, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_merge, __pyx_t_1) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":194
 *         self.table_shd_ptr.get().IsRetain()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def merge(tables: List[Table]) -> Table:
 *         """
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_merge); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_merge, __pyx_t_2) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":911
 * 
 *     @staticmethod
 *     def from_arrow(context, pyarrow_table) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from PyArrow Table
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_79from_arrow, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_arrow, __pyx_t_2) < 0) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":910
 *             raise Exception(f"Repartition failed {status.get_msg().decode()}")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_arrow(context, pyarrow_table) -> Table:
 *         '''
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_from_arrow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_arrow, __pyx_t_1) < 0) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":948
 * 
 *     @staticmethod
 *     def from_numpy(context: CylonContext, col_names: List[str], ar_list: List[np.ndarray]) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from numpy arrays
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_81from_numpy, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_numpy, __pyx_t_1) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":947
 *                 f"Table couldn't be created from PyArrow Table: {status.get_msg().decode()}")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_numpy(context: CylonContext, col_names: List[str], ar_list: List[np.ndarray]) -> Table:
 *         '''
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_from_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_numpy, __pyx_t_2) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":972
 * 
 *     @staticmethod
 *     def from_list(context: CylonContext, col_names: List[str], data_list: List) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from a list
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_83from_list, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_list, __pyx_t_2) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":971
 *         return Table.from_arrow(context, pa.Table.from_arrays(ar_list, names=col_names))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_list(context: CylonContext, col_names: List[str], data_list: List) -> Table:
 *         '''
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_from_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_list, __pyx_t_1) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":1001
 * 
 *     @staticmethod
 *     def from_pydict(context: CylonContext, dictionary: dict) -> Table:             # <<<<<<<<<<<<<<
 *         '''
 *         Creating a PyCylon table from a dictionary
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_85from_pydict, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_pydict, __pyx_t_1) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":1000
 *             raise ValueError("Column Names count doesn't match data columns count")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_pydict(context: CylonContext, dictionary: dict) -> Table:
 *         '''
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_from_pydict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_pydict, __pyx_t_2) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":1024
 * 
 *     @staticmethod
 *     def from_pandas(context: CylonContext = None, df: pd.DataFrame = None, preserve_index=False,             # <<<<<<<<<<<<<<
 *                     nthreads=None, columns=None, safe=False) -> Table:
 *         '''
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_87from_pandas, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_pandas, __pyx_t_2) < 0) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":1023
 *         return Table.from_arrow(context, pa.Table.from_pydict(dictionary))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_pandas(context: CylonContext = None, df: pd.DataFrame = None, preserve_index=False,
 *                     nthreads=None, columns=None, safe=False) -> Table:
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_from_pandas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_from_pandas, __pyx_t_1) < 0) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":2249
 *         return self.get_index()
 * 
 *     def set_index(self, key, indexing_type: IndexingType = IndexingType.LINEAR,             # <<<<<<<<<<<<<<
 *                   drop: bool = False):
 *         '''
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_IndexingType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LINEAR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__28 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":2561
 * 
 *     @staticmethod
 *     def concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):             # <<<<<<<<<<<<<<
 *         """
 *         Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_183concat, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_concat, __pyx_t_2) < 0) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":2560
 *         return PyLocIndexer(self, "iloc")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):
 *         """
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_concat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_concat, __pyx_t_1) < 0) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":2591
 * 
 *     @staticmethod
 *     def distributed_concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):             # <<<<<<<<<<<<<<
 *         """
 *         Concatenate tables. axis=0 (row-wise) concat is independent from local/ distributed execution.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_5Table_185distributed_concat, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_distributed_concat, __pyx_t_1) < 0) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":2590
 *         return _concat_impl(tables=tables, axis=axis, join=join, algorithm=algorithm)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def distributed_concat(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort'):
 *         """
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pycylon_4data_5table_Table, __pyx_n_s_distributed_concat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table->tp_dict, __pyx_n_s_distributed_concat, __pyx_t_2) < 0) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pycylon_4data_5table_Table);

  /* "pycylon/data/table.pyx":2724
 *         return self.row_count
 * 
 * def _concat_impl(tables: List[Table], axis: int = 0, join: str = 'inner', algorithm: str = 'sort',             # <<<<<<<<<<<<<<
 *                  axis1_join_func: str = 'join'):
 *     # row-wise concat -> locally stacking up tables
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7pycylon_4data_5table_1_concat_impl, NULL, __pyx_n_s_pycylon_data_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_concat_impl, __pyx_t_2) < 0) __PYX_ERR(0, 2724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":2767
 * 
 * 
 * class EmptyTable(Table):             # <<<<<<<<<<<<<<
 *     '''
 *     Empty Table definition required in returning an Empty Table when an operation reduces a None
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_7pycylon_4data_5table_Table));
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_EmptyTable, __pyx_n_s_EmptyTable, (PyObject *) NULL, __pyx_n_s_pycylon_data_table, __pyx_kp_s_Empty_Table_definition_required); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pycylon/data/table.pyx":2775
 *     '''
 * 
 *     def __init__(self, context: CylonContext, index: RangeIndex):             # <<<<<<<<<<<<<<
 *         self.ctx = context
 *         self.idx = index
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_CylonContext); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_context, __pyx_t_5) < 0) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_RangeIndex); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_index_2, __pyx_t_5) < 0) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7pycylon_4data_5table_10EmptyTable_1__init__, 0, __pyx_n_s_EmptyTable___init, NULL, __pyx_n_s_pycylon_data_table, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_5, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pycylon/data/table.pyx":2780
 *         self._empty_initialize()
 * 
 *     def _empty_initialize(self):             # <<<<<<<<<<<<<<
 *         empty_data = []
 *         self.initialize(pa.Table.from_arrays([], []), self.ctx)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7pycylon_4data_5table_10EmptyTable_3_empty_initialize, 0, __pyx_n_s_EmptyTable__empty_initialize, NULL, __pyx_n_s_pycylon_data_table, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_empty_initialize, __pyx_t_5) < 0) __PYX_ERR(0, 2780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pycylon/data/table.pyx":2767
 * 
 * 
 * class EmptyTable(Table):             # <<<<<<<<<<<<<<
 *     '''
 *     Empty Table definition required in returning an Empty Table when an operation reduces a None
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_EmptyTable, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EmptyTable, __pyx_t_5) < 0) __PYX_ERR(0, 2767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycylon/data/table.pyx":1
 * ##             # <<<<<<<<<<<<<<
 * # Licensed under the Apache License, Version 2.0 (the "License");
 * # you may not use this file except in compliance with the License.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(45); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_distributed_sort_line_463, __pyx_kp_u_Does_a_distributed_sort_on_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_unique_line_671, __pyx_kp_u_Removes_duplicates_and_returns) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_distributed_unique_line_74, __pyx_kp_u_Removes_duplicates_and_returns_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_equals_line_789, __pyx_kp_u_Determine_whether_two_tables_ar) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_distributed_equals_line_82, __pyx_kp_u_Determine_whether_two_tables_ar) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_from_arrow_line_911, __pyx_kp_u_Creating_a_PyCylon_table_from_P) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_from_numpy_line_948, __pyx_kp_u_Creating_a_PyCylon_table_from_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_from_list_line_972, __pyx_kp_u_Creating_a_PyCylon_table_from_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_from_pydict_line_1001, __pyx_kp_u_Creating_a_PyCylon_table_from_a_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_from_pandas_line_1024, __pyx_kp_u_Creating_a_PyCylon_table_from_P_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_to_csv_line_1114, __pyx_kp_u_Creating_a_csv_file_with_PyCylo) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___getitem___line_1232, __pyx_kp_u_This_method_allows_to_retrieve) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___setitem___line_1359, __pyx_kp_u_Sets_values_for_a_existing_tabl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___eq___line_1416, __pyx_kp_u_Equal_operator_for_Table_Args_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___ne___line_1452, __pyx_kp_u_Not_equal_operator_for_Table_Ar) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___lt___line_1486, __pyx_kp_u_Lesser_than_operator_for_Table) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___gt___line_1520, __pyx_kp_u_Greater_than_operator_for_Table) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___le___line_1554, __pyx_kp_u_Lesser_than_or_equal_operator_f) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___ge___line_1588, __pyx_kp_u_Greater_than_or_equal_operator) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___or___line_1623, __pyx_kp_u_Or_operator_for_Table_Args_othe) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___and___line_1657, __pyx_kp_u_And_operator_for_Table_Args_oth) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___invert___line_1691, __pyx_kp_u_Invert_operator_for_Table_Retur) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___neg___line_1716, __pyx_kp_u_Negation_operator_for_Table_Ret) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___add___line_1741, __pyx_kp_u_Add_operator_for_Table_Args_oth) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___sub___line_1768, __pyx_kp_u_Subtract_operator_for_Table_Arg) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___mul___line_1795, __pyx_kp_u_Multiply_operator_for_Table_Arg) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table___truediv___line_1822, __pyx_kp_u_Element_wise_division_operator) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_drop_line_1875, __pyx_kp_u_drop_a_column_or_list_of_column) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_fillna_line_1911, __pyx_kp_u_Fill_not_applicable_values_with) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_where_line_1943, __pyx_kp_u_Experimental_version_of_Where_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_isnull_line_1994, __pyx_kp_u_Checks_for_null_elements_and_re) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_isna_line_2019, __pyx_kp_u_Check_for_not_applicable_values) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_notnull_line_2042, __pyx_kp_u_Check_the_not_null_values_and_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_notna_line_2066, __pyx_kp_u_Checks_for_not_NA_values_and_re) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_rename_line_2088, __pyx_kp_u_Rename_a_Table_with_a_column_na) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_add_prefix_line_2135, __pyx_kp_u_Adding_a_prefix_to_column_names) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_add_suffix_line_2164, __pyx_kp_u_Adding_a_prefix_to_column_names_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_index___get___line_2236, __pyx_kp_u_Retrieve_index_if_exists_or_pro) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_set_index_line_2249, __pyx_kp_u_Set_Index_Operation_takes_place) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_reset_index_line_2336, __pyx_kp_u_reset_index_Here_the_existing_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_dropna_line_2367, __pyx_kp_u_Drop_not_applicable_values_from) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_applymap_line_2445, __pyx_kp_u_Applies_an_element_wise_map_fun) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_loc___get___line_2496, __pyx_kp_u_loc_This_operator_finds_value_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_iloc___get___line_2528, __pyx_kp_u_loc_This_operator_finds_value_b_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Table_astype_line_2639, __pyx_kp_u_This_cast_a_table_into_given_da) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pycylon.data.table", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pycylon.data.table");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* MergeKeywords */
static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping) {
    PyObject *iter, *key = NULL, *value = NULL;
    int source_is_dict, result;
    Py_ssize_t orig_length, ppos = 0;
    iter = __Pyx_dict_iterator(source_mapping, 0, __pyx_n_s_items, &orig_length, &source_is_dict);
    if (unlikely(!iter)) {
        PyObject *args;
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        args = PyTuple_Pack(1, source_mapping);
        if (likely(args)) {
            PyObject *fallback = PyObject_Call((PyObject*)&PyDict_Type, args, NULL);
            Py_DECREF(args);
            if (likely(fallback)) {
                iter = __Pyx_dict_iterator(fallback, 1, __pyx_n_s_items, &orig_length, &source_is_dict);
                Py_DECREF(fallback);
            }
        }
        if (unlikely(!iter)) goto bad;
    }
    while (1) {
        result = __Pyx_dict_iter_next(iter, orig_length, &ppos, &key, &value, NULL, source_is_dict);
        if (unlikely(result < 0)) goto bad;
        if (!result) break;
        if (unlikely(PyDict_Contains(kwdict, key))) {
            __Pyx_RaiseDoubleKeywordsError("function", key);
            result = -1;
        } else {
            result = PyDict_SetItem(kwdict, key, value);
        }
        Py_DECREF(key);
        Py_DECREF(value);
        if (unlikely(result < 0)) goto bad;
    }
    Py_XDECREF(iter);
    return 0;
bad:
    Py_XDECREF(iter);
    return -1;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_RemainderObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_RemainderObjC_ZeroDivisionError(b)
            x = a % b;
            x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_remainder(op1, op2);
            }
        }
                __Pyx_PyInt_RemainderObjC_ZeroDivisionError(b)
                x = a % b;
                x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla % llb;
                llx += ((llx != 0) & ((llx ^ llb) < 0)) * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRemainder : PyNumber_Remainder)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(b)
            if (unlikely(b == -1 && ((unsigned long)a) == 0-(unsigned long)a))
                return PyInt_Type.tp_as_number->nb_floor_divide(op1, op2);
            else {
                long q, r;
                q = a / b;
                r = a - q*b;
                q -= ((r != 0) & ((r ^ b) < 0));
                x = q;
            }
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_floor_divide(op1, op2);
            }
        }
                __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(b)
                {
                    long q, r;
                    q = a / b;
                    r = a - q*b;
                    q -= ((r != 0) & ((r ^ b) < 0));
                    x = q;
                }
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                {
                    PY_LONG_LONG q, r;
                    q = lla / llb;
                    r = lla - q*llb;
                    q -= ((r != 0) & ((r ^ llb) < 0));
                    llx = q;
                }
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceFloorDivide : PyNumber_FloorDivide)(op1, op2);
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_0_29_37
#define __PYX_HAVE_RT_ImportType_0_29_37
static PyTypeObject *__Pyx_ImportType_0_29_37(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_37 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_0_29_37 && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_0_29_37 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum cylon::compute::AggregationOpId __Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum cylon::compute::AggregationOpId neg_one = (enum cylon::compute::AggregationOpId) -1, const_zero = (enum cylon::compute::AggregationOpId) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum cylon::compute::AggregationOpId) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum cylon::compute::AggregationOpId) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum cylon::compute::AggregationOpId) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) >= 2 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) (((((enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) >= 3 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) (((((((enum cylon::compute::AggregationOpId)digits[2]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) >= 4 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) (((((((((enum cylon::compute::AggregationOpId)digits[3]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[2]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum cylon::compute::AggregationOpId) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum cylon::compute::AggregationOpId) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum cylon::compute::AggregationOpId, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum cylon::compute::AggregationOpId) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum cylon::compute::AggregationOpId, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum cylon::compute::AggregationOpId) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 2 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) (((enum cylon::compute::AggregationOpId)-1)*(((((enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 2 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) ((((((enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 3 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) (((enum cylon::compute::AggregationOpId)-1)*(((((((enum cylon::compute::AggregationOpId)digits[2]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 3 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) ((((((((enum cylon::compute::AggregationOpId)digits[2]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 4 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) (((enum cylon::compute::AggregationOpId)-1)*(((((((((enum cylon::compute::AggregationOpId)digits[3]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[2]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum cylon::compute::AggregationOpId) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum cylon::compute::AggregationOpId, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum cylon::compute::AggregationOpId) - 1 > 4 * PyLong_SHIFT) {
                            return (enum cylon::compute::AggregationOpId) ((((((((((enum cylon::compute::AggregationOpId)digits[3]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[2]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[1]) << PyLong_SHIFT) | (enum cylon::compute::AggregationOpId)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum cylon::compute::AggregationOpId) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum cylon::compute::AggregationOpId, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum cylon::compute::AggregationOpId) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum cylon::compute::AggregationOpId, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum cylon::compute::AggregationOpId val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum cylon::compute::AggregationOpId) -1;
        }
    } else {
        enum cylon::compute::AggregationOpId val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum cylon::compute::AggregationOpId) -1;
        val = __Pyx_PyInt_As_enum__cylon_3a__3a_compute_3a__3a_AggregationOpId(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum cylon::compute::AggregationOpId");
    return (enum cylon::compute::AggregationOpId) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum cylon::compute::AggregationOpId");
    return (enum cylon::compute::AggregationOpId) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From___pyx_t_7pycylon_4data_5table_options(__pyx_t_7pycylon_4data_5table_options value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const __pyx_t_7pycylon_4data_5table_options neg_one = (__pyx_t_7pycylon_4data_5table_options) -1, const_zero = (__pyx_t_7pycylon_4data_5table_options) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(__pyx_t_7pycylon_4data_5table_options) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(__pyx_t_7pycylon_4data_5table_options) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(__pyx_t_7pycylon_4data_5table_options) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(__pyx_t_7pycylon_4data_5table_options) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(__pyx_t_7pycylon_4data_5table_options) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(__pyx_t_7pycylon_4data_5table_options),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_0_29_37
#define __PYX_HAVE_RT_ImportFunction_0_29_37
static int __Pyx_ImportFunction_0_29_37(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
